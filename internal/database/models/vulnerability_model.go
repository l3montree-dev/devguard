package models

import (
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/utils"
)

type Vuln interface {
	SetState(state VulnState)
	GetState() VulnState
	SetRawRiskAssessment(risk float64)
	SetRiskRecalculatedAt(time.Time)
	GetRawRiskAssessment() float64
	GetAssetVersionName() string
	GetAssetID() uuid.UUID
	GetID() string
	TableName() string
	AddScannerID(scannerID string)
	RemoveScannerID(scannerID string)
	GetScannerIDs() string
	GetType() VulnType
	SetTicketID(ticketID string)
	SetTicketURL(ticketURL string)
	SetManualTicketCreation(manualTicketCreation bool)

	GetTicketID() *string
	GetTicketURL() *string
	GetManualTicketCreation() bool
}

type Vulnerability struct {
	ID string `json:"id" gorm:"primaryKey;not null;"`

	AssetVersionName string       `json:"assetVersionName" gorm:"not null;"`
	AssetID          uuid.UUID    `json:"vulnAssetId" gorm:"not null;"`
	AssetVersion     AssetVersion `json:"assetVersion" gorm:"foreignKey:AssetVersionName,AssetID;references:Name,AssetID;constraint:OnDelete:CASCADE;"`

	Message *string `json:"message"`

	// the scanner which was used to detect this dependencyVuln
	ScannerIDs string `json:"scannerIds" gorm:"not null;column:scanner_ids"` //List of scanner ids separated by a white space

	Events []VulnEvent `gorm:"foreignKey:VulnID;constraint:OnDelete:CASCADE,OnUpdate:CASCADE;" json:"events"`

	State VulnState `json:"state" gorm:"default:'open';not null;type:text;"`

	LastDetected time.Time `json:"lastDetected" gorm:"default:now();not null;"`

	TicketID             *string `json:"ticketId" gorm:"default:null;"` // might be set by integrations
	TicketURL            *string `json:"ticketUrl" gorm:"default:null;"`
	ManualTicketCreation bool    `json:"manualTicketCreation" gorm:"default:false;"`

	CreatedAt time.Time    `json:"createdAt"`
	UpdatedAt time.Time    `json:"updatedAt"`
	DeletedAt sql.NullTime `gorm:"index" json:"-"`
}

func (d *Vulnerability) GetTicketID() *string {
	return d.TicketID
}

func (d *Vulnerability) GetTicketURL() *string {
	return d.TicketURL
}

func (d *Vulnerability) GetManualTicketCreation() bool {
	return d.ManualTicketCreation
}

func (d *Vulnerability) SetTicketID(ticketID string) {
	d.TicketID = &ticketID
}

func (d *Vulnerability) SetTicketURL(ticketURL string) {
	d.TicketURL = &ticketURL
}

func (d *Vulnerability) SetManualTicketCreation(manualTicketCreation bool) {
	d.ManualTicketCreation = manualTicketCreation
}

func (d *Vulnerability) SetState(state VulnState) {
	d.State = state
}
func (d *Vulnerability) GetState() VulnState {
	return d.State
}

func (d *Vulnerability) SetRawRiskAssessment(risk float64) {
	// do nothing
}

func (d *Vulnerability) GetRawRiskAssessment() float64 {
	return 0
}

func (d *Vulnerability) GetAssetVersionName() string {
	return d.AssetVersionName
}

func (d *Vulnerability) GetAssetID() uuid.UUID {
	return d.AssetID
}

func (d *Vulnerability) GetID() string {
	if d.ID == "" {
		panic("ID is not set yet. Please call CalculateHash beforehand. Wrong API-CALL-ORDER")
	}
	return d.ID
}

func (d *Vulnerability) SetRiskRecalculatedAt(t time.Time) {
	// leaving this empty for other structs to overwrite
}

func (d *Vulnerability) AddScannerID(scannerID string) {
	d.ScannerIDs = utils.AddToWhitespaceSeparatedStringList(d.ScannerIDs, scannerID)
}

func (d *Vulnerability) RemoveScannerID(scannerID string) {
	d.ScannerIDs = utils.RemoveFromWhitespaceSeparatedStringList(d.ScannerIDs, scannerID)
}

func (d *Vulnerability) GetScannerIDs() string {
	return d.ScannerIDs
}
