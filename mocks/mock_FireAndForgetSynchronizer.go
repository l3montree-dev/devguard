// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewFireAndForgetSynchronizer creates a new instance of FireAndForgetSynchronizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFireAndForgetSynchronizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FireAndForgetSynchronizer {
	mock := &FireAndForgetSynchronizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FireAndForgetSynchronizer is an autogenerated mock type for the FireAndForgetSynchronizer type
type FireAndForgetSynchronizer struct {
	mock.Mock
}

type FireAndForgetSynchronizer_Expecter struct {
	mock *mock.Mock
}

func (_m *FireAndForgetSynchronizer) EXPECT() *FireAndForgetSynchronizer_Expecter {
	return &FireAndForgetSynchronizer_Expecter{mock: &_m.Mock}
}

// FireAndForget provides a mock function for the type FireAndForgetSynchronizer
func (_mock *FireAndForgetSynchronizer) FireAndForget(fn func()) {
	_mock.Called(fn)
	return
}

// FireAndForgetSynchronizer_FireAndForget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FireAndForget'
type FireAndForgetSynchronizer_FireAndForget_Call struct {
	*mock.Call
}

// FireAndForget is a helper method to define mock.On call
//   - fn
func (_e *FireAndForgetSynchronizer_Expecter) FireAndForget(fn interface{}) *FireAndForgetSynchronizer_FireAndForget_Call {
	return &FireAndForgetSynchronizer_FireAndForget_Call{Call: _e.mock.On("FireAndForget", fn)}
}

func (_c *FireAndForgetSynchronizer_FireAndForget_Call) Run(run func(fn func())) *FireAndForgetSynchronizer_FireAndForget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *FireAndForgetSynchronizer_FireAndForget_Call) Return() *FireAndForgetSynchronizer_FireAndForget_Call {
	_c.Call.Return()
	return _c
}

func (_c *FireAndForgetSynchronizer_FireAndForget_Call) RunAndReturn(run func(fn func())) *FireAndForgetSynchronizer_FireAndForget_Call {
	_c.Run(run)
	return _c
}
