// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewReleaseRepository creates a new instance of ReleaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseRepository {
	mock := &ReleaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ReleaseRepository is an autogenerated mock type for the ReleaseRepository type
type ReleaseRepository struct {
	mock.Mock
}

type ReleaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleaseRepository) EXPECT() *ReleaseRepository_Expecter {
	return &ReleaseRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Activate(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type ReleaseRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx core.DB
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) Activate(tx interface{}, id interface{}) *ReleaseRepository_Activate_Call {
	return &ReleaseRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *ReleaseRepository_Activate_Call) Run(run func(tx core.DB, id uuid.UUID)) *ReleaseRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Activate_Call) Return(err error) *ReleaseRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *ReleaseRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) All() ([]models.Release, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Release, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Release); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Release)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type ReleaseRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *ReleaseRepository_Expecter) All() *ReleaseRepository_All_Call {
	return &ReleaseRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *ReleaseRepository_All_Call) Run(run func()) *ReleaseRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReleaseRepository_All_Call) Return(releases []models.Release, err error) *ReleaseRepository_All_Call {
	_c.Call.Return(releases, err)
	return _c
}

func (_c *ReleaseRepository_All_Call) RunAndReturn(run func() ([]models.Release, error)) *ReleaseRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ReleaseRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type ReleaseRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *ReleaseRepository_Expecter) Begin() *ReleaseRepository_Begin_Call {
	return &ReleaseRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *ReleaseRepository_Begin_Call) Run(run func()) *ReleaseRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReleaseRepository_Begin_Call) Return(v core.DB) *ReleaseRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ReleaseRepository_Begin_Call) RunAndReturn(run func() core.DB) *ReleaseRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Create(tx core.DB, t *models.Release) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Release) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReleaseRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx core.DB
//   - t *models.Release
func (_e *ReleaseRepository_Expecter) Create(tx interface{}, t interface{}) *ReleaseRepository_Create_Call {
	return &ReleaseRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *ReleaseRepository_Create_Call) Run(run func(tx core.DB, t *models.Release)) *ReleaseRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.Release
		if args[1] != nil {
			arg1 = args[1].(*models.Release)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Create_Call) Return(err error) *ReleaseRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.Release) error) *ReleaseRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) CreateBatch(tx core.DB, ts []models.Release) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Release) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type ReleaseRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ts []models.Release
func (_e *ReleaseRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *ReleaseRepository_CreateBatch_Call {
	return &ReleaseRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *ReleaseRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.Release)) *ReleaseRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Release
		if args[1] != nil {
			arg1 = args[1].([]models.Release)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_CreateBatch_Call) Return(err error) *ReleaseRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Release) error) *ReleaseRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReleaseItem provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) CreateReleaseItem(tx core.DB, item *models.ReleaseItem) error {
	ret := _mock.Called(tx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateReleaseItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.ReleaseItem) error); ok {
		r0 = returnFunc(tx, item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_CreateReleaseItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReleaseItem'
type ReleaseRepository_CreateReleaseItem_Call struct {
	*mock.Call
}

// CreateReleaseItem is a helper method to define mock.On call
//   - tx core.DB
//   - item *models.ReleaseItem
func (_e *ReleaseRepository_Expecter) CreateReleaseItem(tx interface{}, item interface{}) *ReleaseRepository_CreateReleaseItem_Call {
	return &ReleaseRepository_CreateReleaseItem_Call{Call: _e.mock.On("CreateReleaseItem", tx, item)}
}

func (_c *ReleaseRepository_CreateReleaseItem_Call) Run(run func(tx core.DB, item *models.ReleaseItem)) *ReleaseRepository_CreateReleaseItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.ReleaseItem
		if args[1] != nil {
			arg1 = args[1].(*models.ReleaseItem)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_CreateReleaseItem_Call) Return(err error) *ReleaseRepository_CreateReleaseItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_CreateReleaseItem_Call) RunAndReturn(run func(tx core.DB, item *models.ReleaseItem) error) *ReleaseRepository_CreateReleaseItem_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReleaseRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx core.DB
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) Delete(tx interface{}, id interface{}) *ReleaseRepository_Delete_Call {
	return &ReleaseRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *ReleaseRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *ReleaseRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Delete_Call) Return(err error) *ReleaseRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *ReleaseRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) DeleteBatch(tx core.DB, ids []models.Release) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Release) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type ReleaseRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ids []models.Release
func (_e *ReleaseRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *ReleaseRepository_DeleteBatch_Call {
	return &ReleaseRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *ReleaseRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.Release)) *ReleaseRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Release
		if args[1] != nil {
			arg1 = args[1].([]models.Release)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_DeleteBatch_Call) Return(err error) *ReleaseRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.Release) error) *ReleaseRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReleaseItem provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) DeleteReleaseItem(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReleaseItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_DeleteReleaseItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReleaseItem'
type ReleaseRepository_DeleteReleaseItem_Call struct {
	*mock.Call
}

// DeleteReleaseItem is a helper method to define mock.On call
//   - tx core.DB
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) DeleteReleaseItem(tx interface{}, id interface{}) *ReleaseRepository_DeleteReleaseItem_Call {
	return &ReleaseRepository_DeleteReleaseItem_Call{Call: _e.mock.On("DeleteReleaseItem", tx, id)}
}

func (_c *ReleaseRepository_DeleteReleaseItem_Call) Run(run func(tx core.DB, id uuid.UUID)) *ReleaseRepository_DeleteReleaseItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_DeleteReleaseItem_Call) Return(err error) *ReleaseRepository_DeleteReleaseItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_DeleteReleaseItem_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *ReleaseRepository_DeleteReleaseItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) GetByProjectID(projectID uuid.UUID) ([]models.Release, error) {
	ret := _mock.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.Release, error)); ok {
		return returnFunc(projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.Release); ok {
		r0 = returnFunc(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Release)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type ReleaseRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - projectID uuid.UUID
func (_e *ReleaseRepository_Expecter) GetByProjectID(projectID interface{}) *ReleaseRepository_GetByProjectID_Call {
	return &ReleaseRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", projectID)}
}

func (_c *ReleaseRepository_GetByProjectID_Call) Run(run func(projectID uuid.UUID)) *ReleaseRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_GetByProjectID_Call) Return(releases []models.Release, err error) *ReleaseRepository_GetByProjectID_Call {
	_c.Call.Return(releases, err)
	return _c
}

func (_c *ReleaseRepository_GetByProjectID_Call) RunAndReturn(run func(projectID uuid.UUID) ([]models.Release, error)) *ReleaseRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectIDPaged provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) GetByProjectIDPaged(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.Release], error) {
	ret := _mock.Called(tx, projectID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectIDPaged")
	}

	var r0 core.Paged[models.Release]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.Release], error)); ok {
		return returnFunc(tx, projectID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.Release]); ok {
		r0 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.Release])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_GetByProjectIDPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectIDPaged'
type ReleaseRepository_GetByProjectIDPaged_Call struct {
	*mock.Call
}

// GetByProjectIDPaged is a helper method to define mock.On call
//   - tx core.DB
//   - projectID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *ReleaseRepository_Expecter) GetByProjectIDPaged(tx interface{}, projectID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *ReleaseRepository_GetByProjectIDPaged_Call {
	return &ReleaseRepository_GetByProjectIDPaged_Call{Call: _e.mock.On("GetByProjectIDPaged", tx, projectID, pageInfo, search, filter, sort)}
}

func (_c *ReleaseRepository_GetByProjectIDPaged_Call) Run(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *ReleaseRepository_GetByProjectIDPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 core.PageInfo
		if args[2] != nil {
			arg2 = args[2].(core.PageInfo)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []core.FilterQuery
		if args[4] != nil {
			arg4 = args[4].([]core.FilterQuery)
		}
		var arg5 []core.SortQuery
		if args[5] != nil {
			arg5 = args[5].([]core.SortQuery)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *ReleaseRepository_GetByProjectIDPaged_Call) Return(paged core.Paged[models.Release], err error) *ReleaseRepository_GetByProjectIDPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *ReleaseRepository_GetByProjectIDPaged_Call) RunAndReturn(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.Release], error)) *ReleaseRepository_GetByProjectIDPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetCandidateItemsForRelease provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) GetCandidateItemsForRelease(projectID uuid.UUID, releaseID *uuid.UUID) ([]models.Artifact, []models.Release, error) {
	ret := _mock.Called(projectID, releaseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCandidateItemsForRelease")
	}

	var r0 []models.Artifact
	var r1 []models.Release
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, *uuid.UUID) ([]models.Artifact, []models.Release, error)); ok {
		return returnFunc(projectID, releaseID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, *uuid.UUID) []models.Artifact); ok {
		r0 = returnFunc(projectID, releaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, *uuid.UUID) []models.Release); ok {
		r1 = returnFunc(projectID, releaseID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Release)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(uuid.UUID, *uuid.UUID) error); ok {
		r2 = returnFunc(projectID, releaseID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// ReleaseRepository_GetCandidateItemsForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCandidateItemsForRelease'
type ReleaseRepository_GetCandidateItemsForRelease_Call struct {
	*mock.Call
}

// GetCandidateItemsForRelease is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - releaseID *uuid.UUID
func (_e *ReleaseRepository_Expecter) GetCandidateItemsForRelease(projectID interface{}, releaseID interface{}) *ReleaseRepository_GetCandidateItemsForRelease_Call {
	return &ReleaseRepository_GetCandidateItemsForRelease_Call{Call: _e.mock.On("GetCandidateItemsForRelease", projectID, releaseID)}
}

func (_c *ReleaseRepository_GetCandidateItemsForRelease_Call) Run(run func(projectID uuid.UUID, releaseID *uuid.UUID)) *ReleaseRepository_GetCandidateItemsForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_GetCandidateItemsForRelease_Call) Return(artifacts []models.Artifact, releases []models.Release, err error) *ReleaseRepository_GetCandidateItemsForRelease_Call {
	_c.Call.Return(artifacts, releases, err)
	return _c
}

func (_c *ReleaseRepository_GetCandidateItemsForRelease_Call) RunAndReturn(run func(projectID uuid.UUID, releaseID *uuid.UUID) ([]models.Artifact, []models.Release, error)) *ReleaseRepository_GetCandidateItemsForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ReleaseRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type ReleaseRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx core.DB
func (_e *ReleaseRepository_Expecter) GetDB(tx interface{}) *ReleaseRepository_GetDB_Call {
	return &ReleaseRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *ReleaseRepository_GetDB_Call) Run(run func(tx core.DB)) *ReleaseRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_GetDB_Call) Return(v core.DB) *ReleaseRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ReleaseRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *ReleaseRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) List(ids []uuid.UUID) ([]models.Release, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Release, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) []models.Release); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Release)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ReleaseRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *ReleaseRepository_Expecter) List(ids interface{}) *ReleaseRepository_List_Call {
	return &ReleaseRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *ReleaseRepository_List_Call) Run(run func(ids []uuid.UUID)) *ReleaseRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []uuid.UUID
		if args[0] != nil {
			arg0 = args[0].([]uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_List_Call) Return(releases []models.Release, err error) *ReleaseRepository_List_Call {
	_c.Call.Return(releases, err)
	return _c
}

func (_c *ReleaseRepository_List_Call) RunAndReturn(run func(ids []uuid.UUID) ([]models.Release, error)) *ReleaseRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Read(id uuid.UUID) (models.Release, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Release, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Release); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Release)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ReleaseRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) Read(id interface{}) *ReleaseRepository_Read_Call {
	return &ReleaseRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *ReleaseRepository_Read_Call) Run(run func(id uuid.UUID)) *ReleaseRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Read_Call) Return(release models.Release, err error) *ReleaseRepository_Read_Call {
	_c.Call.Return(release, err)
	return _c
}

func (_c *ReleaseRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.Release, error)) *ReleaseRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRecursive provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) ReadRecursive(id uuid.UUID) (models.Release, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadRecursive")
	}

	var r0 models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Release, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Release); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Release)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_ReadRecursive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRecursive'
type ReleaseRepository_ReadRecursive_Call struct {
	*mock.Call
}

// ReadRecursive is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) ReadRecursive(id interface{}) *ReleaseRepository_ReadRecursive_Call {
	return &ReleaseRepository_ReadRecursive_Call{Call: _e.mock.On("ReadRecursive", id)}
}

func (_c *ReleaseRepository_ReadRecursive_Call) Run(run func(id uuid.UUID)) *ReleaseRepository_ReadRecursive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_ReadRecursive_Call) Return(release models.Release, err error) *ReleaseRepository_ReadRecursive_Call {
	_c.Call.Return(release, err)
	return _c
}

func (_c *ReleaseRepository_ReadRecursive_Call) RunAndReturn(run func(id uuid.UUID) (models.Release, error)) *ReleaseRepository_ReadRecursive_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWithItems provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) ReadWithItems(id uuid.UUID) (models.Release, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadWithItems")
	}

	var r0 models.Release
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Release, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Release); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Release)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ReleaseRepository_ReadWithItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWithItems'
type ReleaseRepository_ReadWithItems_Call struct {
	*mock.Call
}

// ReadWithItems is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *ReleaseRepository_Expecter) ReadWithItems(id interface{}) *ReleaseRepository_ReadWithItems_Call {
	return &ReleaseRepository_ReadWithItems_Call{Call: _e.mock.On("ReadWithItems", id)}
}

func (_c *ReleaseRepository_ReadWithItems_Call) Run(run func(id uuid.UUID)) *ReleaseRepository_ReadWithItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_ReadWithItems_Call) Return(release models.Release, err error) *ReleaseRepository_ReadWithItems_Call {
	_c.Call.Return(release, err)
	return _c
}

func (_c *ReleaseRepository_ReadWithItems_Call) RunAndReturn(run func(id uuid.UUID) (models.Release, error)) *ReleaseRepository_ReadWithItems_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Save(tx core.DB, t *models.Release) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Release) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ReleaseRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - t *models.Release
func (_e *ReleaseRepository_Expecter) Save(tx interface{}, t interface{}) *ReleaseRepository_Save_Call {
	return &ReleaseRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *ReleaseRepository_Save_Call) Run(run func(tx core.DB, t *models.Release)) *ReleaseRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.Release
		if args[1] != nil {
			arg1 = args[1].(*models.Release)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Save_Call) Return(err error) *ReleaseRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.Release) error) *ReleaseRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) SaveBatch(tx core.DB, ts []models.Release) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Release) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type ReleaseRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ts []models.Release
func (_e *ReleaseRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *ReleaseRepository_SaveBatch_Call {
	return &ReleaseRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *ReleaseRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.Release)) *ReleaseRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Release
		if args[1] != nil {
			arg1 = args[1].([]models.Release)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ReleaseRepository_SaveBatch_Call) Return(err error) *ReleaseRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Release) error) *ReleaseRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type ReleaseRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn func(tx core.DB) error
func (_e *ReleaseRepository_Expecter) Transaction(fn interface{}) *ReleaseRepository_Transaction_Call {
	return &ReleaseRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *ReleaseRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *ReleaseRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(tx core.DB) error
		if args[0] != nil {
			arg0 = args[0].(func(tx core.DB) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Transaction_Call) Return(err error) *ReleaseRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *ReleaseRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type ReleaseRepository
func (_mock *ReleaseRepository) Upsert(t *[]*models.Release, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.Release, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ReleaseRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type ReleaseRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t *[]*models.Release
//   - conflictingColumns []clause.Column
//   - updateOnly []string
func (_e *ReleaseRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *ReleaseRepository_Upsert_Call {
	return &ReleaseRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *ReleaseRepository_Upsert_Call) Run(run func(t *[]*models.Release, conflictingColumns []clause.Column, updateOnly []string)) *ReleaseRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *[]*models.Release
		if args[0] != nil {
			arg0 = args[0].(*[]*models.Release)
		}
		var arg1 []clause.Column
		if args[1] != nil {
			arg1 = args[1].([]clause.Column)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ReleaseRepository_Upsert_Call) Return(err error) *ReleaseRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ReleaseRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.Release, conflictingColumns []clause.Column, updateOnly []string) error) *ReleaseRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
