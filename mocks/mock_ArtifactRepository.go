// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewArtifactRepository creates a new instance of ArtifactRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactRepository {
	mock := &ArtifactRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArtifactRepository is an autogenerated mock type for the ArtifactRepository type
type ArtifactRepository struct {
	mock.Mock
}

type ArtifactRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactRepository) EXPECT() *ArtifactRepository_Expecter {
	return &ArtifactRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Activate(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type ArtifactRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx core.DB
//   - id string
func (_e *ArtifactRepository_Expecter) Activate(tx interface{}, id interface{}) *ArtifactRepository_Activate_Call {
	return &ArtifactRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *ArtifactRepository_Activate_Call) Run(run func(tx core.DB, id string)) *ArtifactRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Activate_Call) Return(err error) *ArtifactRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id string) error) *ArtifactRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) All() ([]models.Artifact, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Artifact, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Artifact); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type ArtifactRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *ArtifactRepository_Expecter) All() *ArtifactRepository_All_Call {
	return &ArtifactRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *ArtifactRepository_All_Call) Run(run func()) *ArtifactRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactRepository_All_Call) Return(artifacts []models.Artifact, err error) *ArtifactRepository_All_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactRepository_All_Call) RunAndReturn(run func() ([]models.Artifact, error)) *ArtifactRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ArtifactRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type ArtifactRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *ArtifactRepository_Expecter) Begin() *ArtifactRepository_Begin_Call {
	return &ArtifactRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *ArtifactRepository_Begin_Call) Run(run func()) *ArtifactRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArtifactRepository_Begin_Call) Return(v core.DB) *ArtifactRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ArtifactRepository_Begin_Call) RunAndReturn(run func() core.DB) *ArtifactRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Create(tx core.DB, t *models.Artifact) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Artifact) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ArtifactRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx core.DB
//   - t *models.Artifact
func (_e *ArtifactRepository_Expecter) Create(tx interface{}, t interface{}) *ArtifactRepository_Create_Call {
	return &ArtifactRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *ArtifactRepository_Create_Call) Run(run func(tx core.DB, t *models.Artifact)) *ArtifactRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.Artifact
		if args[1] != nil {
			arg1 = args[1].(*models.Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Create_Call) Return(err error) *ArtifactRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.Artifact) error) *ArtifactRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) CreateBatch(tx core.DB, ts []models.Artifact) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Artifact) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type ArtifactRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ts []models.Artifact
func (_e *ArtifactRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *ArtifactRepository_CreateBatch_Call {
	return &ArtifactRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *ArtifactRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.Artifact)) *ArtifactRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Artifact
		if args[1] != nil {
			arg1 = args[1].([]models.Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_CreateBatch_Call) Return(err error) *ArtifactRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Artifact) error) *ArtifactRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Delete(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ArtifactRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx core.DB
//   - id string
func (_e *ArtifactRepository_Expecter) Delete(tx interface{}, id interface{}) *ArtifactRepository_Delete_Call {
	return &ArtifactRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *ArtifactRepository_Delete_Call) Run(run func(tx core.DB, id string)) *ArtifactRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Delete_Call) Return(err error) *ArtifactRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id string) error) *ArtifactRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArtifact provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) DeleteArtifact(assetID uuid.UUID, assetVersionName string, artifactName string) error {
	ret := _mock.Called(assetID, assetVersionName, artifactName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, string) error); ok {
		r0 = returnFunc(assetID, assetVersionName, artifactName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_DeleteArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArtifact'
type ArtifactRepository_DeleteArtifact_Call struct {
	*mock.Call
}

// DeleteArtifact is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersionName string
//   - artifactName string
func (_e *ArtifactRepository_Expecter) DeleteArtifact(assetID interface{}, assetVersionName interface{}, artifactName interface{}) *ArtifactRepository_DeleteArtifact_Call {
	return &ArtifactRepository_DeleteArtifact_Call{Call: _e.mock.On("DeleteArtifact", assetID, assetVersionName, artifactName)}
}

func (_c *ArtifactRepository_DeleteArtifact_Call) Run(run func(assetID uuid.UUID, assetVersionName string, artifactName string)) *ArtifactRepository_DeleteArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ArtifactRepository_DeleteArtifact_Call) Return(err error) *ArtifactRepository_DeleteArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_DeleteArtifact_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string, artifactName string) error) *ArtifactRepository_DeleteArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) DeleteBatch(tx core.DB, ids []models.Artifact) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Artifact) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type ArtifactRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ids []models.Artifact
func (_e *ArtifactRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *ArtifactRepository_DeleteBatch_Call {
	return &ArtifactRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *ArtifactRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.Artifact)) *ArtifactRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Artifact
		if args[1] != nil {
			arg1 = args[1].([]models.Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_DeleteBatch_Call) Return(err error) *ArtifactRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.Artifact) error) *ArtifactRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllArtifactAffectedByDependencyVuln provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) GetAllArtifactAffectedByDependencyVuln(tx core.DB, vulnID string) ([]models.Artifact, error) {
	ret := _mock.Called(tx, vulnID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtifactAffectedByDependencyVuln")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) ([]models.Artifact, error)); ok {
		return returnFunc(tx, vulnID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) []models.Artifact); ok {
		r0 = returnFunc(tx, vulnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string) error); ok {
		r1 = returnFunc(tx, vulnID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllArtifactAffectedByDependencyVuln'
type ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call struct {
	*mock.Call
}

// GetAllArtifactAffectedByDependencyVuln is a helper method to define mock.On call
//   - tx core.DB
//   - vulnID string
func (_e *ArtifactRepository_Expecter) GetAllArtifactAffectedByDependencyVuln(tx interface{}, vulnID interface{}) *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call {
	return &ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call{Call: _e.mock.On("GetAllArtifactAffectedByDependencyVuln", tx, vulnID)}
}

func (_c *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call) Run(run func(tx core.DB, vulnID string)) *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call) Return(artifacts []models.Artifact, err error) *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call) RunAndReturn(run func(tx core.DB, vulnID string) ([]models.Artifact, error)) *ArtifactRepository_GetAllArtifactAffectedByDependencyVuln_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetIDAndAssetVersionName provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) GetByAssetIDAndAssetVersionName(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error) {
	ret := _mock.Called(assetID, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetIDAndAssetVersionName")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.Artifact, error)); ok {
		return returnFunc(assetID, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) []models.Artifact); ok {
		r0 = returnFunc(assetID, assetVersionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_GetByAssetIDAndAssetVersionName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetIDAndAssetVersionName'
type ArtifactRepository_GetByAssetIDAndAssetVersionName_Call struct {
	*mock.Call
}

// GetByAssetIDAndAssetVersionName is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersionName string
func (_e *ArtifactRepository_Expecter) GetByAssetIDAndAssetVersionName(assetID interface{}, assetVersionName interface{}) *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call {
	return &ArtifactRepository_GetByAssetIDAndAssetVersionName_Call{Call: _e.mock.On("GetByAssetIDAndAssetVersionName", assetID, assetVersionName)}
}

func (_c *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call) Run(run func(assetID uuid.UUID, assetVersionName string)) *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call) Return(artifacts []models.Artifact, err error) *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error)) *ArtifactRepository_GetByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ArtifactRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type ArtifactRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx core.DB
func (_e *ArtifactRepository_Expecter) GetDB(tx interface{}) *ArtifactRepository_GetDB_Call {
	return &ArtifactRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *ArtifactRepository_GetDB_Call) Run(run func(tx core.DB)) *ArtifactRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactRepository_GetDB_Call) Return(v core.DB) *ArtifactRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ArtifactRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *ArtifactRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) List(ids []string) ([]models.Artifact, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]models.Artifact, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []models.Artifact); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ArtifactRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *ArtifactRepository_Expecter) List(ids interface{}) *ArtifactRepository_List_Call {
	return &ArtifactRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *ArtifactRepository_List_Call) Run(run func(ids []string)) *ArtifactRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactRepository_List_Call) Return(artifacts []models.Artifact, err error) *ArtifactRepository_List_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactRepository_List_Call) RunAndReturn(run func(ids []string) ([]models.Artifact, error)) *ArtifactRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Read(id string) (models.Artifact, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Artifact, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Artifact); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Artifact)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ArtifactRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *ArtifactRepository_Expecter) Read(id interface{}) *ArtifactRepository_Read_Call {
	return &ArtifactRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *ArtifactRepository_Read_Call) Run(run func(id string)) *ArtifactRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Read_Call) Return(artifact models.Artifact, err error) *ArtifactRepository_Read_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *ArtifactRepository_Read_Call) RunAndReturn(run func(id string) (models.Artifact, error)) *ArtifactRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadArtifact provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) ReadArtifact(name string, assetVersionName string, assetID uuid.UUID) (models.Artifact, error) {
	ret := _mock.Called(name, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for ReadArtifact")
	}

	var r0 models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) (models.Artifact, error)); ok {
		return returnFunc(name, assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) models.Artifact); ok {
		r0 = returnFunc(name, assetVersionName, assetID)
	} else {
		r0 = ret.Get(0).(models.Artifact)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, uuid.UUID) error); ok {
		r1 = returnFunc(name, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRepository_ReadArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadArtifact'
type ArtifactRepository_ReadArtifact_Call struct {
	*mock.Call
}

// ReadArtifact is a helper method to define mock.On call
//   - name string
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *ArtifactRepository_Expecter) ReadArtifact(name interface{}, assetVersionName interface{}, assetID interface{}) *ArtifactRepository_ReadArtifact_Call {
	return &ArtifactRepository_ReadArtifact_Call{Call: _e.mock.On("ReadArtifact", name, assetVersionName, assetID)}
}

func (_c *ArtifactRepository_ReadArtifact_Call) Run(run func(name string, assetVersionName string, assetID uuid.UUID)) *ArtifactRepository_ReadArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ArtifactRepository_ReadArtifact_Call) Return(artifact models.Artifact, err error) *ArtifactRepository_ReadArtifact_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *ArtifactRepository_ReadArtifact_Call) RunAndReturn(run func(name string, assetVersionName string, assetID uuid.UUID) (models.Artifact, error)) *ArtifactRepository_ReadArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Save(tx core.DB, t *models.Artifact) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Artifact) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ArtifactRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - t *models.Artifact
func (_e *ArtifactRepository_Expecter) Save(tx interface{}, t interface{}) *ArtifactRepository_Save_Call {
	return &ArtifactRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *ArtifactRepository_Save_Call) Run(run func(tx core.DB, t *models.Artifact)) *ArtifactRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.Artifact
		if args[1] != nil {
			arg1 = args[1].(*models.Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Save_Call) Return(err error) *ArtifactRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.Artifact) error) *ArtifactRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) SaveBatch(tx core.DB, ts []models.Artifact) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Artifact) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type ArtifactRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ts []models.Artifact
func (_e *ArtifactRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *ArtifactRepository_SaveBatch_Call {
	return &ArtifactRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *ArtifactRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.Artifact)) *ArtifactRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.Artifact
		if args[1] != nil {
			arg1 = args[1].([]models.Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactRepository_SaveBatch_Call) Return(err error) *ArtifactRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Artifact) error) *ArtifactRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type ArtifactRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn func(tx core.DB) error
func (_e *ArtifactRepository_Expecter) Transaction(fn interface{}) *ArtifactRepository_Transaction_Call {
	return &ArtifactRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *ArtifactRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *ArtifactRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(tx core.DB) error
		if args[0] != nil {
			arg0 = args[0].(func(tx core.DB) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Transaction_Call) Return(err error) *ArtifactRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *ArtifactRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type ArtifactRepository
func (_mock *ArtifactRepository) Upsert(t *[]*models.Artifact, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.Artifact, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type ArtifactRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t *[]*models.Artifact
//   - conflictingColumns []clause.Column
//   - updateOnly []string
func (_e *ArtifactRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *ArtifactRepository_Upsert_Call {
	return &ArtifactRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *ArtifactRepository_Upsert_Call) Run(run func(t *[]*models.Artifact, conflictingColumns []clause.Column, updateOnly []string)) *ArtifactRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *[]*models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*[]*models.Artifact)
		}
		var arg1 []clause.Column
		if args[1] != nil {
			arg1 = args[1].([]clause.Column)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ArtifactRepository_Upsert_Call) Return(err error) *ArtifactRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.Artifact, conflictingColumns []clause.Column, updateOnly []string) error) *ArtifactRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
