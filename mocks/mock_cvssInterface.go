// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewCvssInterface creates a new instance of CvssInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCvssInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CvssInterface {
	mock := &CvssInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CvssInterface is an autogenerated mock type for the cvssInterface type
type CvssInterface struct {
	mock.Mock
}

type CvssInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CvssInterface) EXPECT() *CvssInterface_Expecter {
	return &CvssInterface_Expecter{mock: &_m.Mock}
}

// EnvironmentalScore provides a mock function for the type CvssInterface
func (_mock *CvssInterface) EnvironmentalScore() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnvironmentalScore")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// CvssInterface_EnvironmentalScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnvironmentalScore'
type CvssInterface_EnvironmentalScore_Call struct {
	*mock.Call
}

// EnvironmentalScore is a helper method to define mock.On call
func (_e *CvssInterface_Expecter) EnvironmentalScore() *CvssInterface_EnvironmentalScore_Call {
	return &CvssInterface_EnvironmentalScore_Call{Call: _e.mock.On("EnvironmentalScore")}
}

func (_c *CvssInterface_EnvironmentalScore_Call) Run(run func()) *CvssInterface_EnvironmentalScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CvssInterface_EnvironmentalScore_Call) Return(f float64) *CvssInterface_EnvironmentalScore_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *CvssInterface_EnvironmentalScore_Call) RunAndReturn(run func() float64) *CvssInterface_EnvironmentalScore_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type CvssInterface
func (_mock *CvssInterface) Get(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CvssInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CvssInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key
func (_e *CvssInterface_Expecter) Get(key interface{}) *CvssInterface_Get_Call {
	return &CvssInterface_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *CvssInterface_Get_Call) Run(run func(key string)) *CvssInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CvssInterface_Get_Call) Return(s string, err error) *CvssInterface_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *CvssInterface_Get_Call) RunAndReturn(run func(key string) (string, error)) *CvssInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type CvssInterface
func (_mock *CvssInterface) Set(key string, value string) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CvssInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CvssInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key
//   - value
func (_e *CvssInterface_Expecter) Set(key interface{}, value interface{}) *CvssInterface_Set_Call {
	return &CvssInterface_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *CvssInterface_Set_Call) Run(run func(key string, value string)) *CvssInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *CvssInterface_Set_Call) Return(err error) *CvssInterface_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CvssInterface_Set_Call) RunAndReturn(run func(key string, value string) error) *CvssInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// TemporalScore provides a mock function for the type CvssInterface
func (_mock *CvssInterface) TemporalScore() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TemporalScore")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// CvssInterface_TemporalScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemporalScore'
type CvssInterface_TemporalScore_Call struct {
	*mock.Call
}

// TemporalScore is a helper method to define mock.On call
func (_e *CvssInterface_Expecter) TemporalScore() *CvssInterface_TemporalScore_Call {
	return &CvssInterface_TemporalScore_Call{Call: _e.mock.On("TemporalScore")}
}

func (_c *CvssInterface_TemporalScore_Call) Run(run func()) *CvssInterface_TemporalScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CvssInterface_TemporalScore_Call) Return(f float64) *CvssInterface_TemporalScore_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *CvssInterface_TemporalScore_Call) RunAndReturn(run func() float64) *CvssInterface_TemporalScore_Call {
	_c.Call.Return(run)
	return _c
}

// Vector provides a mock function for the type CvssInterface
func (_mock *CvssInterface) Vector() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Vector")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// CvssInterface_Vector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Vector'
type CvssInterface_Vector_Call struct {
	*mock.Call
}

// Vector is a helper method to define mock.On call
func (_e *CvssInterface_Expecter) Vector() *CvssInterface_Vector_Call {
	return &CvssInterface_Vector_Call{Call: _e.mock.On("Vector")}
}

func (_c *CvssInterface_Vector_Call) Run(run func()) *CvssInterface_Vector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CvssInterface_Vector_Call) Return(s string) *CvssInterface_Vector_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *CvssInterface_Vector_Call) RunAndReturn(run func() string) *CvssInterface_Vector_Call {
	_c.Call.Return(run)
	return _c
}
