// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewWebhookIntegrationRepository creates a new instance of WebhookIntegrationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookIntegrationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookIntegrationRepository {
	mock := &WebhookIntegrationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WebhookIntegrationRepository is an autogenerated mock type for the WebhookIntegrationRepository type
type WebhookIntegrationRepository struct {
	mock.Mock
}

type WebhookIntegrationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookIntegrationRepository) EXPECT() *WebhookIntegrationRepository_Expecter {
	return &WebhookIntegrationRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WebhookIntegrationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type WebhookIntegrationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *WebhookIntegrationRepository_Expecter) Delete(tx interface{}, id interface{}) *WebhookIntegrationRepository_Delete_Call {
	return &WebhookIntegrationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *WebhookIntegrationRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *WebhookIntegrationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_Delete_Call) Return(err error) *WebhookIntegrationRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WebhookIntegrationRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *WebhookIntegrationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrgIDAndProjectID provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) FindByOrgIDAndProjectID(orgID uuid.UUID, projectID uuid.UUID) ([]models.WebhookIntegration, error) {
	ret := _mock.Called(orgID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrgIDAndProjectID")
	}

	var r0 []models.WebhookIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) ([]models.WebhookIntegration, error)); ok {
		return returnFunc(orgID, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) []models.WebhookIntegration); ok {
		r0 = returnFunc(orgID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(orgID, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrgIDAndProjectID'
type WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call struct {
	*mock.Call
}

// FindByOrgIDAndProjectID is a helper method to define mock.On call
//   - orgID
//   - projectID
func (_e *WebhookIntegrationRepository_Expecter) FindByOrgIDAndProjectID(orgID interface{}, projectID interface{}) *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call {
	return &WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call{Call: _e.mock.On("FindByOrgIDAndProjectID", orgID, projectID)}
}

func (_c *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call) Run(run func(orgID uuid.UUID, projectID uuid.UUID)) *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call) Return(webhookIntegrations []models.WebhookIntegration, err error) *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call {
	_c.Call.Return(webhookIntegrations, err)
	return _c
}

func (_c *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call) RunAndReturn(run func(orgID uuid.UUID, projectID uuid.UUID) ([]models.WebhookIntegration, error)) *WebhookIntegrationRepository_FindByOrgIDAndProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientByIntegrationID provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) GetClientByIntegrationID(integrationID uuid.UUID) (models.WebhookIntegration, error) {
	ret := _mock.Called(integrationID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByIntegrationID")
	}

	var r0 models.WebhookIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.WebhookIntegration, error)); ok {
		return returnFunc(integrationID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.WebhookIntegration); ok {
		r0 = returnFunc(integrationID)
	} else {
		r0 = ret.Get(0).(models.WebhookIntegration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(integrationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WebhookIntegrationRepository_GetClientByIntegrationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByIntegrationID'
type WebhookIntegrationRepository_GetClientByIntegrationID_Call struct {
	*mock.Call
}

// GetClientByIntegrationID is a helper method to define mock.On call
//   - integrationID
func (_e *WebhookIntegrationRepository_Expecter) GetClientByIntegrationID(integrationID interface{}) *WebhookIntegrationRepository_GetClientByIntegrationID_Call {
	return &WebhookIntegrationRepository_GetClientByIntegrationID_Call{Call: _e.mock.On("GetClientByIntegrationID", integrationID)}
}

func (_c *WebhookIntegrationRepository_GetClientByIntegrationID_Call) Run(run func(integrationID uuid.UUID)) *WebhookIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_GetClientByIntegrationID_Call) Return(webhookIntegration models.WebhookIntegration, err error) *WebhookIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Return(webhookIntegration, err)
	return _c
}

func (_c *WebhookIntegrationRepository_GetClientByIntegrationID_Call) RunAndReturn(run func(integrationID uuid.UUID) (models.WebhookIntegration, error)) *WebhookIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectWebhooks provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) GetProjectWebhooks(orgID uuid.UUID, projectID uuid.UUID) ([]models.WebhookIntegration, error) {
	ret := _mock.Called(orgID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectWebhooks")
	}

	var r0 []models.WebhookIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) ([]models.WebhookIntegration, error)); ok {
		return returnFunc(orgID, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) []models.WebhookIntegration); ok {
		r0 = returnFunc(orgID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(orgID, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WebhookIntegrationRepository_GetProjectWebhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectWebhooks'
type WebhookIntegrationRepository_GetProjectWebhooks_Call struct {
	*mock.Call
}

// GetProjectWebhooks is a helper method to define mock.On call
//   - orgID
//   - projectID
func (_e *WebhookIntegrationRepository_Expecter) GetProjectWebhooks(orgID interface{}, projectID interface{}) *WebhookIntegrationRepository_GetProjectWebhooks_Call {
	return &WebhookIntegrationRepository_GetProjectWebhooks_Call{Call: _e.mock.On("GetProjectWebhooks", orgID, projectID)}
}

func (_c *WebhookIntegrationRepository_GetProjectWebhooks_Call) Run(run func(orgID uuid.UUID, projectID uuid.UUID)) *WebhookIntegrationRepository_GetProjectWebhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_GetProjectWebhooks_Call) Return(webhookIntegrations []models.WebhookIntegration, err error) *WebhookIntegrationRepository_GetProjectWebhooks_Call {
	_c.Call.Return(webhookIntegrations, err)
	return _c
}

func (_c *WebhookIntegrationRepository_GetProjectWebhooks_Call) RunAndReturn(run func(orgID uuid.UUID, projectID uuid.UUID) ([]models.WebhookIntegration, error)) *WebhookIntegrationRepository_GetProjectWebhooks_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) Read(id uuid.UUID) (models.WebhookIntegration, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.WebhookIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.WebhookIntegration, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.WebhookIntegration); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.WebhookIntegration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WebhookIntegrationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type WebhookIntegrationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *WebhookIntegrationRepository_Expecter) Read(id interface{}) *WebhookIntegrationRepository_Read_Call {
	return &WebhookIntegrationRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *WebhookIntegrationRepository_Read_Call) Run(run func(id uuid.UUID)) *WebhookIntegrationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_Read_Call) Return(webhookIntegration models.WebhookIntegration, err error) *WebhookIntegrationRepository_Read_Call {
	_c.Call.Return(webhookIntegration, err)
	return _c
}

func (_c *WebhookIntegrationRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.WebhookIntegration, error)) *WebhookIntegrationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type WebhookIntegrationRepository
func (_mock *WebhookIntegrationRepository) Save(tx core.DB, model *models.WebhookIntegration) error {
	ret := _mock.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.WebhookIntegration) error); ok {
		r0 = returnFunc(tx, model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WebhookIntegrationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type WebhookIntegrationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - model
func (_e *WebhookIntegrationRepository_Expecter) Save(tx interface{}, model interface{}) *WebhookIntegrationRepository_Save_Call {
	return &WebhookIntegrationRepository_Save_Call{Call: _e.mock.On("Save", tx, model)}
}

func (_c *WebhookIntegrationRepository_Save_Call) Run(run func(tx core.DB, model *models.WebhookIntegration)) *WebhookIntegrationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.WebhookIntegration))
	})
	return _c
}

func (_c *WebhookIntegrationRepository_Save_Call) Return(err error) *WebhookIntegrationRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WebhookIntegrationRepository_Save_Call) RunAndReturn(run func(tx core.DB, model *models.WebhookIntegration) error) *WebhookIntegrationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
