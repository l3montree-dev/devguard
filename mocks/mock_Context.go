// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"
	"mime/multipart"
	"net/http"
	"net/url"

	"github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// Attachment provides a mock function for the type Context
func (_mock *Context) Attachment(file string, name string) error {
	ret := _mock.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Attachment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(file, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Attachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attachment'
type Context_Attachment_Call struct {
	*mock.Call
}

// Attachment is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *Context_Expecter) Attachment(file interface{}, name interface{}) *Context_Attachment_Call {
	return &Context_Attachment_Call{Call: _e.mock.On("Attachment", file, name)}
}

func (_c *Context_Attachment_Call) Run(run func(file string, name string)) *Context_Attachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_Attachment_Call) Return(err error) *Context_Attachment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Attachment_Call) RunAndReturn(run func(file string, name string) error) *Context_Attachment_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function for the type Context
func (_mock *Context) Bind(i interface{}) error {
	ret := _mock.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type Context_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - i interface{}
func (_e *Context_Expecter) Bind(i interface{}) *Context_Bind_Call {
	return &Context_Bind_Call{Call: _e.mock.On("Bind", i)}
}

func (_c *Context_Bind_Call) Run(run func(i interface{})) *Context_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Bind_Call) Return(err error) *Context_Bind_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Bind_Call) RunAndReturn(run func(i interface{}) error) *Context_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Blob provides a mock function for the type Context
func (_mock *Context) Blob(code int, contentType string, b []byte) error {
	ret := _mock.Called(code, contentType, b)

	if len(ret) == 0 {
		panic("no return value specified for Blob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = returnFunc(code, contentType, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Blob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blob'
type Context_Blob_Call struct {
	*mock.Call
}

// Blob is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - b []byte
func (_e *Context_Expecter) Blob(code interface{}, contentType interface{}, b interface{}) *Context_Blob_Call {
	return &Context_Blob_Call{Call: _e.mock.On("Blob", code, contentType, b)}
}

func (_c *Context_Blob_Call) Run(run func(code int, contentType string, b []byte)) *Context_Blob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_Blob_Call) Return(err error) *Context_Blob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Blob_Call) RunAndReturn(run func(code int, contentType string, b []byte) error) *Context_Blob_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function for the type Context
func (_mock *Context) Cookie(name string) (*http.Cookie, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*http.Cookie, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Context_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type Context_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *Context_Expecter) Cookie(name interface{}) *Context_Cookie_Call {
	return &Context_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *Context_Cookie_Call) Run(run func(name string)) *Context_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Cookie_Call) Return(cookie *http.Cookie, err error) *Context_Cookie_Call {
	_c.Call.Return(cookie, err)
	return _c
}

func (_c *Context_Cookie_Call) RunAndReturn(run func(name string) (*http.Cookie, error)) *Context_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function for the type Context
func (_mock *Context) Cookies() []*http.Cookie {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if returnFunc, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}
	return r0
}

// Context_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type Context_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *Context_Expecter) Cookies() *Context_Cookies_Call {
	return &Context_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *Context_Cookies_Call) Run(run func()) *Context_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Cookies_Call) Return(cookies []*http.Cookie) *Context_Cookies_Call {
	_c.Call.Return(cookies)
	return _c
}

func (_c *Context_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *Context_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function for the type Context
func (_mock *Context) Echo() *echo.Echo {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *echo.Echo
	if returnFunc, ok := ret.Get(0).(func() *echo.Echo); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Echo)
		}
	}
	return r0
}

// Context_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type Context_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
func (_e *Context_Expecter) Echo() *Context_Echo_Call {
	return &Context_Echo_Call{Call: _e.mock.On("Echo")}
}

func (_c *Context_Echo_Call) Run(run func()) *Context_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Echo_Call) Return(echo1 *echo.Echo) *Context_Echo_Call {
	_c.Call.Return(echo1)
	return _c
}

func (_c *Context_Echo_Call) RunAndReturn(run func() *echo.Echo) *Context_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function for the type Context
func (_mock *Context) Error(err error) {
	_mock.Called(err)
	return
}

// Context_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Context_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *Context_Expecter) Error(err interface{}) *Context_Error_Call {
	return &Context_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *Context_Error_Call) Run(run func(err error)) *Context_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Error_Call) Return() *Context_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Error_Call) RunAndReturn(run func(err error)) *Context_Error_Call {
	_c.Run(run)
	return _c
}

// File provides a mock function for the type Context
func (_mock *Context) File(file string) error {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type Context_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - file string
func (_e *Context_Expecter) File(file interface{}) *Context_File_Call {
	return &Context_File_Call{Call: _e.mock.On("File", file)}
}

func (_c *Context_File_Call) Run(run func(file string)) *Context_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_File_Call) Return(err error) *Context_File_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_File_Call) RunAndReturn(run func(file string) error) *Context_File_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function for the type Context
func (_mock *Context) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Context_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type Context_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *Context_Expecter) FormFile(name interface{}) *Context_FormFile_Call {
	return &Context_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *Context_FormFile_Call) Run(run func(name string)) *Context_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_FormFile_Call) Return(fileHeader *multipart.FileHeader, err error) *Context_FormFile_Call {
	_c.Call.Return(fileHeader, err)
	return _c
}

func (_c *Context_FormFile_Call) RunAndReturn(run func(name string) (*multipart.FileHeader, error)) *Context_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormParams provides a mock function for the type Context
func (_mock *Context) FormParams() (url.Values, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FormParams")
	}

	var r0 url.Values
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (url.Values, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() url.Values); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Context_FormParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormParams'
type Context_FormParams_Call struct {
	*mock.Call
}

// FormParams is a helper method to define mock.On call
func (_e *Context_Expecter) FormParams() *Context_FormParams_Call {
	return &Context_FormParams_Call{Call: _e.mock.On("FormParams")}
}

func (_c *Context_FormParams_Call) Run(run func()) *Context_FormParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_FormParams_Call) Return(values url.Values, err error) *Context_FormParams_Call {
	_c.Call.Return(values, err)
	return _c
}

func (_c *Context_FormParams_Call) RunAndReturn(run func() (url.Values, error)) *Context_FormParams_Call {
	_c.Call.Return(run)
	return _c
}

// FormValue provides a mock function for the type Context
func (_mock *Context) FormValue(name string) string {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormValue")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_FormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormValue'
type Context_FormValue_Call struct {
	*mock.Call
}

// FormValue is a helper method to define mock.On call
//   - name string
func (_e *Context_Expecter) FormValue(name interface{}) *Context_FormValue_Call {
	return &Context_FormValue_Call{Call: _e.mock.On("FormValue", name)}
}

func (_c *Context_FormValue_Call) Run(run func(name string)) *Context_FormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_FormValue_Call) Return(s string) *Context_FormValue_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_FormValue_Call) RunAndReturn(run func(name string) string) *Context_FormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Context
func (_mock *Context) Get(key string) interface{} {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// Context_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Context_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) Get(key interface{}) *Context_Get_Call {
	return &Context_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Context_Get_Call) Run(run func(key string)) *Context_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Get_Call) Return(ifaceVal interface{}) *Context_Get_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *Context_Get_Call) RunAndReturn(run func(key string) interface{}) *Context_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HTML provides a mock function for the type Context
func (_mock *Context) HTML(code int, html string) error {
	ret := _mock.Called(code, html)

	if len(ret) == 0 {
		panic("no return value specified for HTML")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(code, html)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_HTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTML'
type Context_HTML_Call struct {
	*mock.Call
}

// HTML is a helper method to define mock.On call
//   - code int
//   - html string
func (_e *Context_Expecter) HTML(code interface{}, html interface{}) *Context_HTML_Call {
	return &Context_HTML_Call{Call: _e.mock.On("HTML", code, html)}
}

func (_c *Context_HTML_Call) Run(run func(code int, html string)) *Context_HTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_HTML_Call) Return(err error) *Context_HTML_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_HTML_Call) RunAndReturn(run func(code int, html string) error) *Context_HTML_Call {
	_c.Call.Return(run)
	return _c
}

// HTMLBlob provides a mock function for the type Context
func (_mock *Context) HTMLBlob(code int, b []byte) error {
	ret := _mock.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for HTMLBlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = returnFunc(code, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_HTMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTMLBlob'
type Context_HTMLBlob_Call struct {
	*mock.Call
}

// HTMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *Context_Expecter) HTMLBlob(code interface{}, b interface{}) *Context_HTMLBlob_Call {
	return &Context_HTMLBlob_Call{Call: _e.mock.On("HTMLBlob", code, b)}
}

func (_c *Context_HTMLBlob_Call) Run(run func(code int, b []byte)) *Context_HTMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_HTMLBlob_Call) Return(err error) *Context_HTMLBlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_HTMLBlob_Call) RunAndReturn(run func(code int, b []byte) error) *Context_HTMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function for the type Context
func (_mock *Context) Handler() echo.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 echo.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}
	return r0
}

// Context_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type Context_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *Context_Expecter) Handler() *Context_Handler_Call {
	return &Context_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *Context_Handler_Call) Run(run func()) *Context_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Handler_Call) Return(handlerFunc echo.HandlerFunc) *Context_Handler_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *Context_Handler_Call) RunAndReturn(run func() echo.HandlerFunc) *Context_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Inline provides a mock function for the type Context
func (_mock *Context) Inline(file string, name string) error {
	ret := _mock.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Inline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(file, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Inline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inline'
type Context_Inline_Call struct {
	*mock.Call
}

// Inline is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *Context_Expecter) Inline(file interface{}, name interface{}) *Context_Inline_Call {
	return &Context_Inline_Call{Call: _e.mock.On("Inline", file, name)}
}

func (_c *Context_Inline_Call) Run(run func(file string, name string)) *Context_Inline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_Inline_Call) Return(err error) *Context_Inline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Inline_Call) RunAndReturn(run func(file string, name string) error) *Context_Inline_Call {
	_c.Call.Return(run)
	return _c
}

// IsTLS provides a mock function for the type Context
func (_mock *Context) IsTLS() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTLS")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Context_IsTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTLS'
type Context_IsTLS_Call struct {
	*mock.Call
}

// IsTLS is a helper method to define mock.On call
func (_e *Context_Expecter) IsTLS() *Context_IsTLS_Call {
	return &Context_IsTLS_Call{Call: _e.mock.On("IsTLS")}
}

func (_c *Context_IsTLS_Call) Run(run func()) *Context_IsTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_IsTLS_Call) Return(b bool) *Context_IsTLS_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Context_IsTLS_Call) RunAndReturn(run func() bool) *Context_IsTLS_Call {
	_c.Call.Return(run)
	return _c
}

// IsWebSocket provides a mock function for the type Context
func (_mock *Context) IsWebSocket() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWebSocket")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Context_IsWebSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWebSocket'
type Context_IsWebSocket_Call struct {
	*mock.Call
}

// IsWebSocket is a helper method to define mock.On call
func (_e *Context_Expecter) IsWebSocket() *Context_IsWebSocket_Call {
	return &Context_IsWebSocket_Call{Call: _e.mock.On("IsWebSocket")}
}

func (_c *Context_IsWebSocket_Call) Run(run func()) *Context_IsWebSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_IsWebSocket_Call) Return(b bool) *Context_IsWebSocket_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Context_IsWebSocket_Call) RunAndReturn(run func() bool) *Context_IsWebSocket_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function for the type Context
func (_mock *Context) JSON(code int, i interface{}) error {
	ret := _mock.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for JSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = returnFunc(code, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type Context_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *Context_Expecter) JSON(code interface{}, i interface{}) *Context_JSON_Call {
	return &Context_JSON_Call{Call: _e.mock.On("JSON", code, i)}
}

func (_c *Context_JSON_Call) Run(run func(code int, i interface{})) *Context_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_JSON_Call) Return(err error) *Context_JSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_JSON_Call) RunAndReturn(run func(code int, i interface{}) error) *Context_JSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONBlob provides a mock function for the type Context
func (_mock *Context) JSONBlob(code int, b []byte) error {
	ret := _mock.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONBlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = returnFunc(code, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_JSONBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONBlob'
type Context_JSONBlob_Call struct {
	*mock.Call
}

// JSONBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *Context_Expecter) JSONBlob(code interface{}, b interface{}) *Context_JSONBlob_Call {
	return &Context_JSONBlob_Call{Call: _e.mock.On("JSONBlob", code, b)}
}

func (_c *Context_JSONBlob_Call) Run(run func(code int, b []byte)) *Context_JSONBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_JSONBlob_Call) Return(err error) *Context_JSONBlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_JSONBlob_Call) RunAndReturn(run func(code int, b []byte) error) *Context_JSONBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONP provides a mock function for the type Context
func (_mock *Context) JSONP(code int, callback string, i interface{}) error {
	ret := _mock.Called(code, callback, i)

	if len(ret) == 0 {
		panic("no return value specified for JSONP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = returnFunc(code, callback, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_JSONP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONP'
type Context_JSONP_Call struct {
	*mock.Call
}

// JSONP is a helper method to define mock.On call
//   - code int
//   - callback string
//   - i interface{}
func (_e *Context_Expecter) JSONP(code interface{}, callback interface{}, i interface{}) *Context_JSONP_Call {
	return &Context_JSONP_Call{Call: _e.mock.On("JSONP", code, callback, i)}
}

func (_c *Context_JSONP_Call) Run(run func(code int, callback string, i interface{})) *Context_JSONP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_JSONP_Call) Return(err error) *Context_JSONP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_JSONP_Call) RunAndReturn(run func(code int, callback string, i interface{}) error) *Context_JSONP_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPBlob provides a mock function for the type Context
func (_mock *Context) JSONPBlob(code int, callback string, b []byte) error {
	ret := _mock.Called(code, callback, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONPBlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = returnFunc(code, callback, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_JSONPBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPBlob'
type Context_JSONPBlob_Call struct {
	*mock.Call
}

// JSONPBlob is a helper method to define mock.On call
//   - code int
//   - callback string
//   - b []byte
func (_e *Context_Expecter) JSONPBlob(code interface{}, callback interface{}, b interface{}) *Context_JSONPBlob_Call {
	return &Context_JSONPBlob_Call{Call: _e.mock.On("JSONPBlob", code, callback, b)}
}

func (_c *Context_JSONPBlob_Call) Run(run func(code int, callback string, b []byte)) *Context_JSONPBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_JSONPBlob_Call) Return(err error) *Context_JSONPBlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_JSONPBlob_Call) RunAndReturn(run func(code int, callback string, b []byte) error) *Context_JSONPBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPretty provides a mock function for the type Context
func (_mock *Context) JSONPretty(code int, i interface{}, indent string) error {
	ret := _mock.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for JSONPretty")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = returnFunc(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_JSONPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPretty'
type Context_JSONPretty_Call struct {
	*mock.Call
}

// JSONPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *Context_Expecter) JSONPretty(code interface{}, i interface{}, indent interface{}) *Context_JSONPretty_Call {
	return &Context_JSONPretty_Call{Call: _e.mock.On("JSONPretty", code, i, indent)}
}

func (_c *Context_JSONPretty_Call) Run(run func(code int, i interface{}, indent string)) *Context_JSONPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_JSONPretty_Call) Return(err error) *Context_JSONPretty_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_JSONPretty_Call) RunAndReturn(run func(code int, i interface{}, indent string) error) *Context_JSONPretty_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function for the type Context
func (_mock *Context) Logger() echo.Logger {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 echo.Logger
	if returnFunc, ok := ret.Get(0).(func() echo.Logger); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.Logger)
		}
	}
	return r0
}

// Context_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type Context_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *Context_Expecter) Logger() *Context_Logger_Call {
	return &Context_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *Context_Logger_Call) Run(run func()) *Context_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Logger_Call) Return(logger echo.Logger) *Context_Logger_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *Context_Logger_Call) RunAndReturn(run func() echo.Logger) *Context_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// MultipartForm provides a mock function for the type Context
func (_mock *Context) MultipartForm() (*multipart.Form, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Context_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type Context_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *Context_Expecter) MultipartForm() *Context_MultipartForm_Call {
	return &Context_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *Context_MultipartForm_Call) Run(run func()) *Context_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_MultipartForm_Call) Return(form *multipart.Form, err error) *Context_MultipartForm_Call {
	_c.Call.Return(form, err)
	return _c
}

func (_c *Context_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *Context_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// NoContent provides a mock function for the type Context
func (_mock *Context) NoContent(code int) error {
	ret := _mock.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for NoContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_NoContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoContent'
type Context_NoContent_Call struct {
	*mock.Call
}

// NoContent is a helper method to define mock.On call
//   - code int
func (_e *Context_Expecter) NoContent(code interface{}) *Context_NoContent_Call {
	return &Context_NoContent_Call{Call: _e.mock.On("NoContent", code)}
}

func (_c *Context_NoContent_Call) Run(run func(code int)) *Context_NoContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_NoContent_Call) Return(err error) *Context_NoContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_NoContent_Call) RunAndReturn(run func(code int) error) *Context_NoContent_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function for the type Context
func (_mock *Context) Param(name string) string {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type Context_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - name string
func (_e *Context_Expecter) Param(name interface{}) *Context_Param_Call {
	return &Context_Param_Call{Call: _e.mock.On("Param", name)}
}

func (_c *Context_Param_Call) Run(run func(name string)) *Context_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Param_Call) Return(s string) *Context_Param_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_Param_Call) RunAndReturn(run func(name string) string) *Context_Param_Call {
	_c.Call.Return(run)
	return _c
}

// ParamNames provides a mock function for the type Context
func (_mock *Context) ParamNames() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamNames")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Context_ParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamNames'
type Context_ParamNames_Call struct {
	*mock.Call
}

// ParamNames is a helper method to define mock.On call
func (_e *Context_Expecter) ParamNames() *Context_ParamNames_Call {
	return &Context_ParamNames_Call{Call: _e.mock.On("ParamNames")}
}

func (_c *Context_ParamNames_Call) Run(run func()) *Context_ParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_ParamNames_Call) Return(strings []string) *Context_ParamNames_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Context_ParamNames_Call) RunAndReturn(run func() []string) *Context_ParamNames_Call {
	_c.Call.Return(run)
	return _c
}

// ParamValues provides a mock function for the type Context
func (_mock *Context) ParamValues() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamValues")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Context_ParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamValues'
type Context_ParamValues_Call struct {
	*mock.Call
}

// ParamValues is a helper method to define mock.On call
func (_e *Context_Expecter) ParamValues() *Context_ParamValues_Call {
	return &Context_ParamValues_Call{Call: _e.mock.On("ParamValues")}
}

func (_c *Context_ParamValues_Call) Run(run func()) *Context_ParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_ParamValues_Call) Return(strings []string) *Context_ParamValues_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Context_ParamValues_Call) RunAndReturn(run func() []string) *Context_ParamValues_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type Context
func (_mock *Context) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type Context_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *Context_Expecter) Path() *Context_Path_Call {
	return &Context_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *Context_Path_Call) Run(run func()) *Context_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Path_Call) Return(s string) *Context_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_Path_Call) RunAndReturn(run func() string) *Context_Path_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParam provides a mock function for the type Context
func (_mock *Context) QueryParam(name string) string {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for QueryParam")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_QueryParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParam'
type Context_QueryParam_Call struct {
	*mock.Call
}

// QueryParam is a helper method to define mock.On call
//   - name string
func (_e *Context_Expecter) QueryParam(name interface{}) *Context_QueryParam_Call {
	return &Context_QueryParam_Call{Call: _e.mock.On("QueryParam", name)}
}

func (_c *Context_QueryParam_Call) Run(run func(name string)) *Context_QueryParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_QueryParam_Call) Return(s string) *Context_QueryParam_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_QueryParam_Call) RunAndReturn(run func(name string) string) *Context_QueryParam_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParams provides a mock function for the type Context
func (_mock *Context) QueryParams() url.Values {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryParams")
	}

	var r0 url.Values
	if returnFunc, ok := ret.Get(0).(func() url.Values); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}
	return r0
}

// Context_QueryParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParams'
type Context_QueryParams_Call struct {
	*mock.Call
}

// QueryParams is a helper method to define mock.On call
func (_e *Context_Expecter) QueryParams() *Context_QueryParams_Call {
	return &Context_QueryParams_Call{Call: _e.mock.On("QueryParams")}
}

func (_c *Context_QueryParams_Call) Run(run func()) *Context_QueryParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_QueryParams_Call) Return(values url.Values) *Context_QueryParams_Call {
	_c.Call.Return(values)
	return _c
}

func (_c *Context_QueryParams_Call) RunAndReturn(run func() url.Values) *Context_QueryParams_Call {
	_c.Call.Return(run)
	return _c
}

// QueryString provides a mock function for the type Context
func (_mock *Context) QueryString() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_QueryString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryString'
type Context_QueryString_Call struct {
	*mock.Call
}

// QueryString is a helper method to define mock.On call
func (_e *Context_Expecter) QueryString() *Context_QueryString_Call {
	return &Context_QueryString_Call{Call: _e.mock.On("QueryString")}
}

func (_c *Context_QueryString_Call) Run(run func()) *Context_QueryString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_QueryString_Call) Return(s string) *Context_QueryString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_QueryString_Call) RunAndReturn(run func() string) *Context_QueryString_Call {
	_c.Call.Return(run)
	return _c
}

// RealIP provides a mock function for the type Context
func (_mock *Context) RealIP() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RealIP")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_RealIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RealIP'
type Context_RealIP_Call struct {
	*mock.Call
}

// RealIP is a helper method to define mock.On call
func (_e *Context_Expecter) RealIP() *Context_RealIP_Call {
	return &Context_RealIP_Call{Call: _e.mock.On("RealIP")}
}

func (_c *Context_RealIP_Call) Run(run func()) *Context_RealIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_RealIP_Call) Return(s string) *Context_RealIP_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_RealIP_Call) RunAndReturn(run func() string) *Context_RealIP_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function for the type Context
func (_mock *Context) Redirect(code int, url1 string) error {
	ret := _mock.Called(code, url1)

	if len(ret) == 0 {
		panic("no return value specified for Redirect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(code, url1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type Context_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - code int
//   - url1 string
func (_e *Context_Expecter) Redirect(code interface{}, url1 interface{}) *Context_Redirect_Call {
	return &Context_Redirect_Call{Call: _e.mock.On("Redirect", code, url1)}
}

func (_c *Context_Redirect_Call) Run(run func(code int, url1 string)) *Context_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_Redirect_Call) Return(err error) *Context_Redirect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Redirect_Call) RunAndReturn(run func(code int, url1 string) error) *Context_Redirect_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function for the type Context
func (_mock *Context) Render(code int, name string, data interface{}) error {
	ret := _mock.Called(code, name, data)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = returnFunc(code, name, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type Context_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - code int
//   - name string
//   - data interface{}
func (_e *Context_Expecter) Render(code interface{}, name interface{}, data interface{}) *Context_Render_Call {
	return &Context_Render_Call{Call: _e.mock.On("Render", code, name, data)}
}

func (_c *Context_Render_Call) Run(run func(code int, name string, data interface{})) *Context_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_Render_Call) Return(err error) *Context_Render_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Render_Call) RunAndReturn(run func(code int, name string, data interface{}) error) *Context_Render_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type Context
func (_mock *Context) Request() *http.Request {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Request
	if returnFunc, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}
	return r0
}

// Context_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type Context_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *Context_Expecter) Request() *Context_Request_Call {
	return &Context_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *Context_Request_Call) Run(run func()) *Context_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Request_Call) Return(request *http.Request) *Context_Request_Call {
	_c.Call.Return(request)
	return _c
}

func (_c *Context_Request_Call) RunAndReturn(run func() *http.Request) *Context_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function for the type Context
func (_mock *Context) Reset(r *http.Request, w http.ResponseWriter) {
	_mock.Called(r, w)
	return
}

// Context_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Context_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *Context_Expecter) Reset(r interface{}, w interface{}) *Context_Reset_Call {
	return &Context_Reset_Call{Call: _e.mock.On("Reset", r, w)}
}

func (_c *Context_Reset_Call) Run(run func(r *http.Request, w http.ResponseWriter)) *Context_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		var arg1 http.ResponseWriter
		if args[1] != nil {
			arg1 = args[1].(http.ResponseWriter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_Reset_Call) Return() *Context_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Reset_Call) RunAndReturn(run func(r *http.Request, w http.ResponseWriter)) *Context_Reset_Call {
	_c.Run(run)
	return _c
}

// Response provides a mock function for the type Context
func (_mock *Context) Response() *echo.Response {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 *echo.Response
	if returnFunc, ok := ret.Get(0).(func() *echo.Response); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Response)
		}
	}
	return r0
}

// Context_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type Context_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *Context_Expecter) Response() *Context_Response_Call {
	return &Context_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *Context_Response_Call) Run(run func()) *Context_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Response_Call) Return(response *echo.Response) *Context_Response_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *Context_Response_Call) RunAndReturn(run func() *echo.Response) *Context_Response_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function for the type Context
func (_mock *Context) Scheme() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Context_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type Context_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *Context_Expecter) Scheme() *Context_Scheme_Call {
	return &Context_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *Context_Scheme_Call) Run(run func()) *Context_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Scheme_Call) Return(s string) *Context_Scheme_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Context_Scheme_Call) RunAndReturn(run func() string) *Context_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type Context
func (_mock *Context) Set(key string, val interface{}) {
	_mock.Called(key, val)
	return
}

// Context_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Context_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - val interface{}
func (_e *Context_Expecter) Set(key interface{}, val interface{}) *Context_Set_Call {
	return &Context_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *Context_Set_Call) Run(run func(key string, val interface{})) *Context_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_Set_Call) Return() *Context_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Set_Call) RunAndReturn(run func(key string, val interface{})) *Context_Set_Call {
	_c.Run(run)
	return _c
}

// SetCookie provides a mock function for the type Context
func (_mock *Context) SetCookie(cookie *http.Cookie) {
	_mock.Called(cookie)
	return
}

// Context_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type Context_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - cookie *http.Cookie
func (_e *Context_Expecter) SetCookie(cookie interface{}) *Context_SetCookie_Call {
	return &Context_SetCookie_Call{Call: _e.mock.On("SetCookie", cookie)}
}

func (_c *Context_SetCookie_Call) Run(run func(cookie *http.Cookie)) *Context_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Cookie
		if args[0] != nil {
			arg0 = args[0].(*http.Cookie)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetCookie_Call) Return() *Context_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetCookie_Call) RunAndReturn(run func(cookie *http.Cookie)) *Context_SetCookie_Call {
	_c.Run(run)
	return _c
}

// SetHandler provides a mock function for the type Context
func (_mock *Context) SetHandler(h echo.HandlerFunc) {
	_mock.Called(h)
	return
}

// Context_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type Context_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - h echo.HandlerFunc
func (_e *Context_Expecter) SetHandler(h interface{}) *Context_SetHandler_Call {
	return &Context_SetHandler_Call{Call: _e.mock.On("SetHandler", h)}
}

func (_c *Context_SetHandler_Call) Run(run func(h echo.HandlerFunc)) *Context_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.HandlerFunc
		if args[0] != nil {
			arg0 = args[0].(echo.HandlerFunc)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetHandler_Call) Return() *Context_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetHandler_Call) RunAndReturn(run func(h echo.HandlerFunc)) *Context_SetHandler_Call {
	_c.Run(run)
	return _c
}

// SetLogger provides a mock function for the type Context
func (_mock *Context) SetLogger(l echo.Logger) {
	_mock.Called(l)
	return
}

// Context_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type Context_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - l echo.Logger
func (_e *Context_Expecter) SetLogger(l interface{}) *Context_SetLogger_Call {
	return &Context_SetLogger_Call{Call: _e.mock.On("SetLogger", l)}
}

func (_c *Context_SetLogger_Call) Run(run func(l echo.Logger)) *Context_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 echo.Logger
		if args[0] != nil {
			arg0 = args[0].(echo.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetLogger_Call) Return() *Context_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetLogger_Call) RunAndReturn(run func(l echo.Logger)) *Context_SetLogger_Call {
	_c.Run(run)
	return _c
}

// SetParamNames provides a mock function for the type Context
func (_mock *Context) SetParamNames(names ...string) {
	if len(names) > 0 {
		_mock.Called(names)
	} else {
		_mock.Called()
	}

	return
}

// Context_SetParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamNames'
type Context_SetParamNames_Call struct {
	*mock.Call
}

// SetParamNames is a helper method to define mock.On call
//   - names ...string
func (_e *Context_Expecter) SetParamNames(names ...interface{}) *Context_SetParamNames_Call {
	return &Context_SetParamNames_Call{Call: _e.mock.On("SetParamNames",
		append([]interface{}{}, names...)...)}
}

func (_c *Context_SetParamNames_Call) Run(run func(names ...string)) *Context_SetParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		var variadicArgs []string
		if len(args) > 0 {
			variadicArgs = args[0].([]string)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Context_SetParamNames_Call) Return() *Context_SetParamNames_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetParamNames_Call) RunAndReturn(run func(names ...string)) *Context_SetParamNames_Call {
	_c.Run(run)
	return _c
}

// SetParamValues provides a mock function for the type Context
func (_mock *Context) SetParamValues(values ...string) {
	if len(values) > 0 {
		_mock.Called(values)
	} else {
		_mock.Called()
	}

	return
}

// Context_SetParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamValues'
type Context_SetParamValues_Call struct {
	*mock.Call
}

// SetParamValues is a helper method to define mock.On call
//   - values ...string
func (_e *Context_Expecter) SetParamValues(values ...interface{}) *Context_SetParamValues_Call {
	return &Context_SetParamValues_Call{Call: _e.mock.On("SetParamValues",
		append([]interface{}{}, values...)...)}
}

func (_c *Context_SetParamValues_Call) Run(run func(values ...string)) *Context_SetParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		var variadicArgs []string
		if len(args) > 0 {
			variadicArgs = args[0].([]string)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Context_SetParamValues_Call) Return() *Context_SetParamValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetParamValues_Call) RunAndReturn(run func(values ...string)) *Context_SetParamValues_Call {
	_c.Run(run)
	return _c
}

// SetPath provides a mock function for the type Context
func (_mock *Context) SetPath(p string) {
	_mock.Called(p)
	return
}

// Context_SetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPath'
type Context_SetPath_Call struct {
	*mock.Call
}

// SetPath is a helper method to define mock.On call
//   - p string
func (_e *Context_Expecter) SetPath(p interface{}) *Context_SetPath_Call {
	return &Context_SetPath_Call{Call: _e.mock.On("SetPath", p)}
}

func (_c *Context_SetPath_Call) Run(run func(p string)) *Context_SetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetPath_Call) Return() *Context_SetPath_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetPath_Call) RunAndReturn(run func(p string)) *Context_SetPath_Call {
	_c.Run(run)
	return _c
}

// SetRequest provides a mock function for the type Context
func (_mock *Context) SetRequest(r *http.Request) {
	_mock.Called(r)
	return
}

// Context_SetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequest'
type Context_SetRequest_Call struct {
	*mock.Call
}

// SetRequest is a helper method to define mock.On call
//   - r *http.Request
func (_e *Context_Expecter) SetRequest(r interface{}) *Context_SetRequest_Call {
	return &Context_SetRequest_Call{Call: _e.mock.On("SetRequest", r)}
}

func (_c *Context_SetRequest_Call) Run(run func(r *http.Request)) *Context_SetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetRequest_Call) Return() *Context_SetRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetRequest_Call) RunAndReturn(run func(r *http.Request)) *Context_SetRequest_Call {
	_c.Run(run)
	return _c
}

// SetResponse provides a mock function for the type Context
func (_mock *Context) SetResponse(r *echo.Response) {
	_mock.Called(r)
	return
}

// Context_SetResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResponse'
type Context_SetResponse_Call struct {
	*mock.Call
}

// SetResponse is a helper method to define mock.On call
//   - r *echo.Response
func (_e *Context_Expecter) SetResponse(r interface{}) *Context_SetResponse_Call {
	return &Context_SetResponse_Call{Call: _e.mock.On("SetResponse", r)}
}

func (_c *Context_SetResponse_Call) Run(run func(r *echo.Response)) *Context_SetResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *echo.Response
		if args[0] != nil {
			arg0 = args[0].(*echo.Response)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_SetResponse_Call) Return() *Context_SetResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_SetResponse_Call) RunAndReturn(run func(r *echo.Response)) *Context_SetResponse_Call {
	_c.Run(run)
	return _c
}

// Stream provides a mock function for the type Context
func (_mock *Context) Stream(code int, contentType string, r io.Reader) error {
	ret := _mock.Called(code, contentType, r)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string, io.Reader) error); ok {
		r0 = returnFunc(code, contentType, r)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type Context_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - r io.Reader
func (_e *Context_Expecter) Stream(code interface{}, contentType interface{}, r interface{}) *Context_Stream_Call {
	return &Context_Stream_Call{Call: _e.mock.On("Stream", code, contentType, r)}
}

func (_c *Context_Stream_Call) Run(run func(code int, contentType string, r io.Reader)) *Context_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_Stream_Call) Return(err error) *Context_Stream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Stream_Call) RunAndReturn(run func(code int, contentType string, r io.Reader) error) *Context_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type Context
func (_mock *Context) String(code int, s string) error {
	ret := _mock.Called(code, s)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = returnFunc(code, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Context_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - code int
//   - s string
func (_e *Context_Expecter) String(code interface{}, s interface{}) *Context_String_Call {
	return &Context_String_Call{Call: _e.mock.On("String", code, s)}
}

func (_c *Context_String_Call) Run(run func(code int, s string)) *Context_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_String_Call) Return(err error) *Context_String_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_String_Call) RunAndReturn(run func(code int, s string) error) *Context_String_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type Context
func (_mock *Context) Validate(i interface{}) error {
	ret := _mock.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Context_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - i interface{}
func (_e *Context_Expecter) Validate(i interface{}) *Context_Validate_Call {
	return &Context_Validate_Call{Call: _e.mock.On("Validate", i)}
}

func (_c *Context_Validate_Call) Run(run func(i interface{})) *Context_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Validate_Call) Return(err error) *Context_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Validate_Call) RunAndReturn(run func(i interface{}) error) *Context_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// XML provides a mock function for the type Context
func (_mock *Context) XML(code int, i interface{}) error {
	ret := _mock.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for XML")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = returnFunc(code, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_XML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XML'
type Context_XML_Call struct {
	*mock.Call
}

// XML is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *Context_Expecter) XML(code interface{}, i interface{}) *Context_XML_Call {
	return &Context_XML_Call{Call: _e.mock.On("XML", code, i)}
}

func (_c *Context_XML_Call) Run(run func(code int, i interface{})) *Context_XML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_XML_Call) Return(err error) *Context_XML_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_XML_Call) RunAndReturn(run func(code int, i interface{}) error) *Context_XML_Call {
	_c.Call.Return(run)
	return _c
}

// XMLBlob provides a mock function for the type Context
func (_mock *Context) XMLBlob(code int, b []byte) error {
	ret := _mock.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for XMLBlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = returnFunc(code, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_XMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLBlob'
type Context_XMLBlob_Call struct {
	*mock.Call
}

// XMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *Context_Expecter) XMLBlob(code interface{}, b interface{}) *Context_XMLBlob_Call {
	return &Context_XMLBlob_Call{Call: _e.mock.On("XMLBlob", code, b)}
}

func (_c *Context_XMLBlob_Call) Run(run func(code int, b []byte)) *Context_XMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Context_XMLBlob_Call) Return(err error) *Context_XMLBlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_XMLBlob_Call) RunAndReturn(run func(code int, b []byte) error) *Context_XMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// XMLPretty provides a mock function for the type Context
func (_mock *Context) XMLPretty(code int, i interface{}, indent string) error {
	ret := _mock.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for XMLPretty")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = returnFunc(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_XMLPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLPretty'
type Context_XMLPretty_Call struct {
	*mock.Call
}

// XMLPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *Context_Expecter) XMLPretty(code interface{}, i interface{}, indent interface{}) *Context_XMLPretty_Call {
	return &Context_XMLPretty_Call{Call: _e.mock.On("XMLPretty", code, i, indent)}
}

func (_c *Context_XMLPretty_Call) Run(run func(code int, i interface{}, indent string)) *Context_XMLPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Context_XMLPretty_Call) Return(err error) *Context_XMLPretty_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_XMLPretty_Call) RunAndReturn(run func(code int, i interface{}, indent string) error) *Context_XMLPretty_Call {
	_c.Call.Return(run)
	return _c
}
