// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	common "github.com/l3montree-dev/devguard/internal/common"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// OrganizationRepository is an autogenerated mock type for the OrganizationRepository type
type OrganizationRepository struct {
	mock.Mock
}

type OrganizationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationRepository) EXPECT() *OrganizationRepository_Expecter {
	return &OrganizationRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *OrganizationRepository) Activate(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type OrganizationRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *OrganizationRepository_Expecter) Activate(tx interface{}, id interface{}) *OrganizationRepository_Activate_Call {
	return &OrganizationRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *OrganizationRepository_Activate_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *OrganizationRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *OrganizationRepository_Activate_Call) Return(_a0 error) *OrganizationRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *OrganizationRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *OrganizationRepository) All() ([]models.Org, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Org, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Org); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Org)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type OrganizationRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *OrganizationRepository_Expecter) All() *OrganizationRepository_All_Call {
	return &OrganizationRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *OrganizationRepository_All_Call) Run(run func()) *OrganizationRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrganizationRepository_All_Call) Return(_a0 []models.Org, _a1 error) *OrganizationRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationRepository_All_Call) RunAndReturn(run func() ([]models.Org, error)) *OrganizationRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *OrganizationRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// OrganizationRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type OrganizationRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *OrganizationRepository_Expecter) Begin() *OrganizationRepository_Begin_Call {
	return &OrganizationRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *OrganizationRepository_Begin_Call) Run(run func()) *OrganizationRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrganizationRepository_Begin_Call) Return(_a0 *gorm.DB) *OrganizationRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *OrganizationRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// ContentTree provides a mock function with given fields: orgID, projects
func (_m *OrganizationRepository) ContentTree(orgID uuid.UUID, projects []string) []common.ContentTreeElement {
	ret := _m.Called(orgID, projects)

	if len(ret) == 0 {
		panic("no return value specified for ContentTree")
	}

	var r0 []common.ContentTreeElement
	if rf, ok := ret.Get(0).(func(uuid.UUID, []string) []common.ContentTreeElement); ok {
		r0 = rf(orgID, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.ContentTreeElement)
		}
	}

	return r0
}

// OrganizationRepository_ContentTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentTree'
type OrganizationRepository_ContentTree_Call struct {
	*mock.Call
}

// ContentTree is a helper method to define mock.On call
//   - orgID uuid.UUID
//   - projects []string
func (_e *OrganizationRepository_Expecter) ContentTree(orgID interface{}, projects interface{}) *OrganizationRepository_ContentTree_Call {
	return &OrganizationRepository_ContentTree_Call{Call: _e.mock.On("ContentTree", orgID, projects)}
}

func (_c *OrganizationRepository_ContentTree_Call) Run(run func(orgID uuid.UUID, projects []string)) *OrganizationRepository_ContentTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].([]string))
	})
	return _c
}

func (_c *OrganizationRepository_ContentTree_Call) Return(_a0 []common.ContentTreeElement) *OrganizationRepository_ContentTree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_ContentTree_Call) RunAndReturn(run func(uuid.UUID, []string) []common.ContentTreeElement) *OrganizationRepository_ContentTree_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *OrganizationRepository) Create(tx *gorm.DB, t *models.Org) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Org) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrganizationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Org
func (_e *OrganizationRepository_Expecter) Create(tx interface{}, t interface{}) *OrganizationRepository_Create_Call {
	return &OrganizationRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *OrganizationRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.Org)) *OrganizationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_Create_Call) Return(_a0 error) *OrganizationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Org) error) *OrganizationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *OrganizationRepository) CreateBatch(tx *gorm.DB, ts []models.Org) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Org) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type OrganizationRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Org
func (_e *OrganizationRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *OrganizationRepository_CreateBatch_Call {
	return &OrganizationRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *OrganizationRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.Org)) *OrganizationRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_CreateBatch_Call) Return(_a0 error) *OrganizationRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Org) error) *OrganizationRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *OrganizationRepository) Delete(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type OrganizationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *OrganizationRepository_Expecter) Delete(tx interface{}, id interface{}) *OrganizationRepository_Delete_Call {
	return &OrganizationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *OrganizationRepository_Delete_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *OrganizationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *OrganizationRepository_Delete_Call) Return(_a0 error) *OrganizationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *OrganizationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function with given fields: tx, ids
func (_m *OrganizationRepository) DeleteBatch(tx *gorm.DB, ids []models.Org) error {
	ret := _m.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Org) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type OrganizationRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ids []models.Org
func (_e *OrganizationRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *OrganizationRepository_DeleteBatch_Call {
	return &OrganizationRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *OrganizationRepository_DeleteBatch_Call) Run(run func(tx *gorm.DB, ids []models.Org)) *OrganizationRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_DeleteBatch_Call) Return(_a0 error) *OrganizationRepository_DeleteBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_DeleteBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Org) error) *OrganizationRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *OrganizationRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// OrganizationRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type OrganizationRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *OrganizationRepository_Expecter) GetDB(tx interface{}) *OrganizationRepository_GetDB_Call {
	return &OrganizationRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *OrganizationRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *OrganizationRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *OrganizationRepository_GetDB_Call) Return(_a0 *gorm.DB) *OrganizationRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *OrganizationRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgByID provides a mock function with given fields: id
func (_m *OrganizationRepository) GetOrgByID(id uuid.UUID) (models.Org, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgByID")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Org, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Org); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_GetOrgByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgByID'
type OrganizationRepository_GetOrgByID_Call struct {
	*mock.Call
}

// GetOrgByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *OrganizationRepository_Expecter) GetOrgByID(id interface{}) *OrganizationRepository_GetOrgByID_Call {
	return &OrganizationRepository_GetOrgByID_Call{Call: _e.mock.On("GetOrgByID", id)}
}

func (_c *OrganizationRepository_GetOrgByID_Call) Run(run func(id uuid.UUID)) *OrganizationRepository_GetOrgByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *OrganizationRepository_GetOrgByID_Call) Return(_a0 models.Org, _a1 error) *OrganizationRepository_GetOrgByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationRepository_GetOrgByID_Call) RunAndReturn(run func(uuid.UUID) (models.Org, error)) *OrganizationRepository_GetOrgByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *OrganizationRepository) List(ids []uuid.UUID) ([]models.Org, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Org, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.Org); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Org)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type OrganizationRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *OrganizationRepository_Expecter) List(ids interface{}) *OrganizationRepository_List_Call {
	return &OrganizationRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *OrganizationRepository_List_Call) Run(run func(ids []uuid.UUID)) *OrganizationRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *OrganizationRepository_List_Call) Return(_a0 []models.Org, _a1 error) *OrganizationRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationRepository_List_Call) RunAndReturn(run func([]uuid.UUID) ([]models.Org, error)) *OrganizationRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *OrganizationRepository) Read(id uuid.UUID) (models.Org, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Org, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Org); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type OrganizationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *OrganizationRepository_Expecter) Read(id interface{}) *OrganizationRepository_Read_Call {
	return &OrganizationRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *OrganizationRepository_Read_Call) Run(run func(id uuid.UUID)) *OrganizationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *OrganizationRepository_Read_Call) Return(_a0 models.Org, _a1 error) *OrganizationRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationRepository_Read_Call) RunAndReturn(run func(uuid.UUID) (models.Org, error)) *OrganizationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function with given fields: slug
func (_m *OrganizationRepository) ReadBySlug(slug string) (models.Org, error) {
	ret := _m.Called(slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Org
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Org, error)); ok {
		return rf(slug)
	}
	if rf, ok := ret.Get(0).(func(string) models.Org); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(models.Org)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type OrganizationRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - slug string
func (_e *OrganizationRepository_Expecter) ReadBySlug(slug interface{}) *OrganizationRepository_ReadBySlug_Call {
	return &OrganizationRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", slug)}
}

func (_c *OrganizationRepository_ReadBySlug_Call) Run(run func(slug string)) *OrganizationRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OrganizationRepository_ReadBySlug_Call) Return(_a0 models.Org, _a1 error) *OrganizationRepository_ReadBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrganizationRepository_ReadBySlug_Call) RunAndReturn(run func(string) (models.Org, error)) *OrganizationRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *OrganizationRepository) Save(tx *gorm.DB, t *models.Org) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Org) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OrganizationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Org
func (_e *OrganizationRepository_Expecter) Save(tx interface{}, t interface{}) *OrganizationRepository_Save_Call {
	return &OrganizationRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *OrganizationRepository_Save_Call) Run(run func(tx *gorm.DB, t *models.Org)) *OrganizationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_Save_Call) Return(_a0 error) *OrganizationRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Org) error) *OrganizationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *OrganizationRepository) SaveBatch(tx *gorm.DB, ts []models.Org) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Org) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type OrganizationRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Org
func (_e *OrganizationRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *OrganizationRepository_SaveBatch_Call {
	return &OrganizationRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *OrganizationRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.Org)) *OrganizationRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_SaveBatch_Call) Return(_a0 error) *OrganizationRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Org) error) *OrganizationRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *OrganizationRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type OrganizationRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *OrganizationRepository_Expecter) Transaction(_a0 interface{}) *OrganizationRepository_Transaction_Call {
	return &OrganizationRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *OrganizationRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *OrganizationRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *OrganizationRepository_Transaction_Call) Return(_a0 error) *OrganizationRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *OrganizationRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, organization
func (_m *OrganizationRepository) Update(tx *gorm.DB, organization *models.Org) error {
	ret := _m.Called(tx, organization)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Org) error); ok {
		r0 = rf(tx, organization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrganizationRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx *gorm.DB
//   - organization *models.Org
func (_e *OrganizationRepository_Expecter) Update(tx interface{}, organization interface{}) *OrganizationRepository_Update_Call {
	return &OrganizationRepository_Update_Call{Call: _e.mock.On("Update", tx, organization)}
}

func (_c *OrganizationRepository_Update_Call) Run(run func(tx *gorm.DB, organization *models.Org)) *OrganizationRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Org))
	})
	return _c
}

func (_c *OrganizationRepository_Update_Call) Return(_a0 error) *OrganizationRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrganizationRepository_Update_Call) RunAndReturn(run func(*gorm.DB, *models.Org) error) *OrganizationRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrganizationRepository creates a new instance of OrganizationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationRepository {
	mock := &OrganizationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
