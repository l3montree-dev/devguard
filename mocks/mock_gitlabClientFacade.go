// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"gitlab.com/gitlab-org/api/client-go"
)

// NewGitlabClientFacade creates a new instance of GitlabClientFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitlabClientFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitlabClientFacade {
	mock := &GitlabClientFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitlabClientFacade is an autogenerated mock type for the gitlabClientFacade type
type GitlabClientFacade struct {
	mock.Mock
}

type GitlabClientFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GitlabClientFacade) EXPECT() *GitlabClientFacade_Expecter {
	return &GitlabClientFacade_Expecter{mock: &_m.Mock}
}

// AddProjectHook provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) AddProjectHook(ctx context.Context, projectId int, opt *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, opt)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectHook")
	}

	var r0 *gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.AddProjectHookOptions) *gitlab.ProjectHook); ok {
		r0 = returnFunc(ctx, projectId, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.AddProjectHookOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.AddProjectHookOptions) error); ok {
		r2 = returnFunc(ctx, projectId, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_AddProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectHook'
type GitlabClientFacade_AddProjectHook_Call struct {
	*mock.Call
}

// AddProjectHook is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - opt
func (_e *GitlabClientFacade_Expecter) AddProjectHook(ctx interface{}, projectId interface{}, opt interface{}) *GitlabClientFacade_AddProjectHook_Call {
	return &GitlabClientFacade_AddProjectHook_Call{Call: _e.mock.On("AddProjectHook", ctx, projectId, opt)}
}

func (_c *GitlabClientFacade_AddProjectHook_Call) Run(run func(ctx context.Context, projectId int, opt *gitlab.AddProjectHookOptions)) *GitlabClientFacade_AddProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.AddProjectHookOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_AddProjectHook_Call) Return(projectHook *gitlab.ProjectHook, response *gitlab.Response, err error) *GitlabClientFacade_AddProjectHook_Call {
	_c.Call.Return(projectHook, response, err)
	return _c
}

func (_c *GitlabClientFacade_AddProjectHook_Call) RunAndReturn(run func(ctx context.Context, projectId int, opt *gitlab.AddProjectHookOptions) (*gitlab.ProjectHook, *gitlab.Response, error)) *GitlabClientFacade_AddProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssue provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) CreateIssue(ctx context.Context, pid int, opt *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error) {
	ret := _mock.Called(ctx, pid, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)); ok {
		return returnFunc(ctx, pid, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateIssueOptions) *gitlab.Issue); ok {
		r0 = returnFunc(ctx, pid, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.CreateIssueOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, pid, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.CreateIssueOptions) error); ok {
		r2 = returnFunc(ctx, pid, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type GitlabClientFacade_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - ctx
//   - pid
//   - opt
func (_e *GitlabClientFacade_Expecter) CreateIssue(ctx interface{}, pid interface{}, opt interface{}) *GitlabClientFacade_CreateIssue_Call {
	return &GitlabClientFacade_CreateIssue_Call{Call: _e.mock.On("CreateIssue", ctx, pid, opt)}
}

func (_c *GitlabClientFacade_CreateIssue_Call) Run(run func(ctx context.Context, pid int, opt *gitlab.CreateIssueOptions)) *GitlabClientFacade_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.CreateIssueOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_CreateIssue_Call) Return(issue *gitlab.Issue, response *gitlab.Response, err error) *GitlabClientFacade_CreateIssue_Call {
	_c.Call.Return(issue, response, err)
	return _c
}

func (_c *GitlabClientFacade_CreateIssue_Call) RunAndReturn(run func(ctx context.Context, pid int, opt *gitlab.CreateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)) *GitlabClientFacade_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueComment provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) CreateIssueComment(ctx context.Context, pid int, issue int, opt *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error) {
	ret := _mock.Called(ctx, pid, issue, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueComment")
	}

	var r0 *gitlab.Note
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error)); ok {
		return returnFunc(ctx, pid, issue, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) *gitlab.Note); ok {
		r0 = returnFunc(ctx, pid, issue, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, pid, issue, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int, *gitlab.CreateIssueNoteOptions) error); ok {
		r2 = returnFunc(ctx, pid, issue, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_CreateIssueComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueComment'
type GitlabClientFacade_CreateIssueComment_Call struct {
	*mock.Call
}

// CreateIssueComment is a helper method to define mock.On call
//   - ctx
//   - pid
//   - issue
//   - opt
func (_e *GitlabClientFacade_Expecter) CreateIssueComment(ctx interface{}, pid interface{}, issue interface{}, opt interface{}) *GitlabClientFacade_CreateIssueComment_Call {
	return &GitlabClientFacade_CreateIssueComment_Call{Call: _e.mock.On("CreateIssueComment", ctx, pid, issue, opt)}
}

func (_c *GitlabClientFacade_CreateIssueComment_Call) Run(run func(ctx context.Context, pid int, issue int, opt *gitlab.CreateIssueNoteOptions)) *GitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*gitlab.CreateIssueNoteOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_CreateIssueComment_Call) Return(note *gitlab.Note, response *gitlab.Response, err error) *GitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Return(note, response, err)
	return _c
}

func (_c *GitlabClientFacade_CreateIssueComment_Call) RunAndReturn(run func(ctx context.Context, pid int, issue int, opt *gitlab.CreateIssueNoteOptions) (*gitlab.Note, *gitlab.Response, error)) *GitlabClientFacade_CreateIssueComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMergeRequest provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) CreateMergeRequest(ctx context.Context, project string, opt *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error) {
	ret := _mock.Called(ctx, project, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateMergeRequest")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(ctx, project, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) *gitlab.MergeRequest); ok {
		r0 = returnFunc(ctx, project, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, project, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, *gitlab.CreateMergeRequestOptions) error); ok {
		r2 = returnFunc(ctx, project, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_CreateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequest'
type GitlabClientFacade_CreateMergeRequest_Call struct {
	*mock.Call
}

// CreateMergeRequest is a helper method to define mock.On call
//   - ctx
//   - project
//   - opt
func (_e *GitlabClientFacade_Expecter) CreateMergeRequest(ctx interface{}, project interface{}, opt interface{}) *GitlabClientFacade_CreateMergeRequest_Call {
	return &GitlabClientFacade_CreateMergeRequest_Call{Call: _e.mock.On("CreateMergeRequest", ctx, project, opt)}
}

func (_c *GitlabClientFacade_CreateMergeRequest_Call) Run(run func(ctx context.Context, project string, opt *gitlab.CreateMergeRequestOptions)) *GitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*gitlab.CreateMergeRequestOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_CreateMergeRequest_Call) Return(mergeRequest *gitlab.MergeRequest, response *gitlab.Response, err error) *GitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Return(mergeRequest, response, err)
	return _c
}

func (_c *GitlabClientFacade_CreateMergeRequest_Call) RunAndReturn(run func(ctx context.Context, project string, opt *gitlab.CreateMergeRequestOptions) (*gitlab.MergeRequest, *gitlab.Response, error)) *GitlabClientFacade_CreateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVariable provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) CreateVariable(ctx context.Context, projectId int, opt *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreateVariable")
	}

	var r0 *gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) *gitlab.ProjectVariable); ok {
		r0 = returnFunc(ctx, projectId, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectVariable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.CreateProjectVariableOptions) error); ok {
		r2 = returnFunc(ctx, projectId, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_CreateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVariable'
type GitlabClientFacade_CreateVariable_Call struct {
	*mock.Call
}

// CreateVariable is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - opt
func (_e *GitlabClientFacade_Expecter) CreateVariable(ctx interface{}, projectId interface{}, opt interface{}) *GitlabClientFacade_CreateVariable_Call {
	return &GitlabClientFacade_CreateVariable_Call{Call: _e.mock.On("CreateVariable", ctx, projectId, opt)}
}

func (_c *GitlabClientFacade_CreateVariable_Call) Run(run func(ctx context.Context, projectId int, opt *gitlab.CreateProjectVariableOptions)) *GitlabClientFacade_CreateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.CreateProjectVariableOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_CreateVariable_Call) Return(projectVariable *gitlab.ProjectVariable, response *gitlab.Response, err error) *GitlabClientFacade_CreateVariable_Call {
	_c.Call.Return(projectVariable, response, err)
	return _c
}

func (_c *GitlabClientFacade_CreateVariable_Call) RunAndReturn(run func(ctx context.Context, projectId int, opt *gitlab.CreateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)) *GitlabClientFacade_CreateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectHook provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) DeleteProjectHook(ctx context.Context, projectId int, hookId int) (*gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, hookId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectHook")
	}

	var r0 *gitlab.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, hookId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *gitlab.Response); ok {
		r0 = returnFunc(ctx, projectId, hookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, projectId, hookId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFacade_DeleteProjectHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectHook'
type GitlabClientFacade_DeleteProjectHook_Call struct {
	*mock.Call
}

// DeleteProjectHook is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - hookId
func (_e *GitlabClientFacade_Expecter) DeleteProjectHook(ctx interface{}, projectId interface{}, hookId interface{}) *GitlabClientFacade_DeleteProjectHook_Call {
	return &GitlabClientFacade_DeleteProjectHook_Call{Call: _e.mock.On("DeleteProjectHook", ctx, projectId, hookId)}
}

func (_c *GitlabClientFacade_DeleteProjectHook_Call) Run(run func(ctx context.Context, projectId int, hookId int)) *GitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_DeleteProjectHook_Call) Return(response *gitlab.Response, err error) *GitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *GitlabClientFacade_DeleteProjectHook_Call) RunAndReturn(run func(ctx context.Context, projectId int, hookId int) (*gitlab.Response, error)) *GitlabClientFacade_DeleteProjectHook_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssue provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) EditIssue(ctx context.Context, pid int, issue int, opt *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error) {
	ret := _mock.Called(ctx, pid, issue, opt)

	if len(ret) == 0 {
		panic("no return value specified for EditIssue")
	}

	var r0 *gitlab.Issue
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)); ok {
		return returnFunc(ctx, pid, issue, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) *gitlab.Issue); ok {
		r0 = returnFunc(ctx, pid, issue, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, pid, issue, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int, *gitlab.UpdateIssueOptions) error); ok {
		r2 = returnFunc(ctx, pid, issue, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_EditIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssue'
type GitlabClientFacade_EditIssue_Call struct {
	*mock.Call
}

// EditIssue is a helper method to define mock.On call
//   - ctx
//   - pid
//   - issue
//   - opt
func (_e *GitlabClientFacade_Expecter) EditIssue(ctx interface{}, pid interface{}, issue interface{}, opt interface{}) *GitlabClientFacade_EditIssue_Call {
	return &GitlabClientFacade_EditIssue_Call{Call: _e.mock.On("EditIssue", ctx, pid, issue, opt)}
}

func (_c *GitlabClientFacade_EditIssue_Call) Run(run func(ctx context.Context, pid int, issue int, opt *gitlab.UpdateIssueOptions)) *GitlabClientFacade_EditIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*gitlab.UpdateIssueOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_EditIssue_Call) Return(issue1 *gitlab.Issue, response *gitlab.Response, err error) *GitlabClientFacade_EditIssue_Call {
	_c.Call.Return(issue1, response, err)
	return _c
}

func (_c *GitlabClientFacade_EditIssue_Call) RunAndReturn(run func(ctx context.Context, pid int, issue int, opt *gitlab.UpdateIssueOptions) (*gitlab.Issue, *gitlab.Response, error)) *GitlabClientFacade_EditIssue_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssueLabel provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) EditIssueLabel(ctx context.Context, pid int, issue int, labels []*gitlab.CreateLabelOptions) (*gitlab.Response, error) {
	ret := _mock.Called(ctx, pid, issue, labels)

	if len(ret) == 0 {
		panic("no return value specified for EditIssueLabel")
	}

	var r0 *gitlab.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) (*gitlab.Response, error)); ok {
		return returnFunc(ctx, pid, issue, labels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) *gitlab.Response); ok {
		r0 = returnFunc(ctx, pid, issue, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, []*gitlab.CreateLabelOptions) error); ok {
		r1 = returnFunc(ctx, pid, issue, labels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFacade_EditIssueLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssueLabel'
type GitlabClientFacade_EditIssueLabel_Call struct {
	*mock.Call
}

// EditIssueLabel is a helper method to define mock.On call
//   - ctx
//   - pid
//   - issue
//   - labels
func (_e *GitlabClientFacade_Expecter) EditIssueLabel(ctx interface{}, pid interface{}, issue interface{}, labels interface{}) *GitlabClientFacade_EditIssueLabel_Call {
	return &GitlabClientFacade_EditIssueLabel_Call{Call: _e.mock.On("EditIssueLabel", ctx, pid, issue, labels)}
}

func (_c *GitlabClientFacade_EditIssueLabel_Call) Run(run func(ctx context.Context, pid int, issue int, labels []*gitlab.CreateLabelOptions)) *GitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].([]*gitlab.CreateLabelOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_EditIssueLabel_Call) Return(response *gitlab.Response, err error) *GitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *GitlabClientFacade_EditIssueLabel_Call) RunAndReturn(run func(ctx context.Context, pid int, issue int, labels []*gitlab.CreateLabelOptions) (*gitlab.Response, error)) *GitlabClientFacade_EditIssueLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientID provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetClientID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// GitlabClientFacade_GetClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientID'
type GitlabClientFacade_GetClientID_Call struct {
	*mock.Call
}

// GetClientID is a helper method to define mock.On call
func (_e *GitlabClientFacade_Expecter) GetClientID() *GitlabClientFacade_GetClientID_Call {
	return &GitlabClientFacade_GetClientID_Call{Call: _e.mock.On("GetClientID")}
}

func (_c *GitlabClientFacade_GetClientID_Call) Run(run func()) *GitlabClientFacade_GetClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitlabClientFacade_GetClientID_Call) Return(s string) *GitlabClientFacade_GetClientID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GitlabClientFacade_GetClientID_Call) RunAndReturn(run func() string) *GitlabClientFacade_GetClientID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetGroup(ctx context.Context, groupId int) (*gitlab.Group, *gitlab.Response, error) {
	ret := _mock.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *gitlab.Group
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*gitlab.Group, *gitlab.Response, error)); ok {
		return returnFunc(ctx, groupId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *gitlab.Group); ok {
		r0 = returnFunc(ctx, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) *gitlab.Response); ok {
		r1 = returnFunc(ctx, groupId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = returnFunc(ctx, groupId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type GitlabClientFacade_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - ctx
//   - groupId
func (_e *GitlabClientFacade_Expecter) GetGroup(ctx interface{}, groupId interface{}) *GitlabClientFacade_GetGroup_Call {
	return &GitlabClientFacade_GetGroup_Call{Call: _e.mock.On("GetGroup", ctx, groupId)}
}

func (_c *GitlabClientFacade_GetGroup_Call) Run(run func(ctx context.Context, groupId int)) *GitlabClientFacade_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_GetGroup_Call) Return(group *gitlab.Group, response *gitlab.Response, err error) *GitlabClientFacade_GetGroup_Call {
	_c.Call.Return(group, response, err)
	return _c
}

func (_c *GitlabClientFacade_GetGroup_Call) RunAndReturn(run func(ctx context.Context, groupId int) (*gitlab.Group, *gitlab.Response, error)) *GitlabClientFacade_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemberInGroup provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetMemberInGroup(ctx context.Context, userId int, groupId int) (*gitlab.GroupMember, *gitlab.Response, error) {
	ret := _mock.Called(ctx, userId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberInGroup")
	}

	var r0 *gitlab.GroupMember
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*gitlab.GroupMember, *gitlab.Response, error)); ok {
		return returnFunc(ctx, userId, groupId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *gitlab.GroupMember); ok {
		r0 = returnFunc(ctx, userId, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.GroupMember)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) *gitlab.Response); ok {
		r1 = returnFunc(ctx, userId, groupId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, userId, groupId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_GetMemberInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemberInGroup'
type GitlabClientFacade_GetMemberInGroup_Call struct {
	*mock.Call
}

// GetMemberInGroup is a helper method to define mock.On call
//   - ctx
//   - userId
//   - groupId
func (_e *GitlabClientFacade_Expecter) GetMemberInGroup(ctx interface{}, userId interface{}, groupId interface{}) *GitlabClientFacade_GetMemberInGroup_Call {
	return &GitlabClientFacade_GetMemberInGroup_Call{Call: _e.mock.On("GetMemberInGroup", ctx, userId, groupId)}
}

func (_c *GitlabClientFacade_GetMemberInGroup_Call) Run(run func(ctx context.Context, userId int, groupId int)) *GitlabClientFacade_GetMemberInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_GetMemberInGroup_Call) Return(groupMember *gitlab.GroupMember, response *gitlab.Response, err error) *GitlabClientFacade_GetMemberInGroup_Call {
	_c.Call.Return(groupMember, response, err)
	return _c
}

func (_c *GitlabClientFacade_GetMemberInGroup_Call) RunAndReturn(run func(ctx context.Context, userId int, groupId int) (*gitlab.GroupMember, *gitlab.Response, error)) *GitlabClientFacade_GetMemberInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemberInProject provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetMemberInProject(ctx context.Context, userId int, projectId int) (*gitlab.ProjectMember, *gitlab.Response, error) {
	ret := _mock.Called(ctx, userId, projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberInProject")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return returnFunc(ctx, userId, projectId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *gitlab.ProjectMember); ok {
		r0 = returnFunc(ctx, userId, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) *gitlab.Response); ok {
		r1 = returnFunc(ctx, userId, projectId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, userId, projectId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_GetMemberInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemberInProject'
type GitlabClientFacade_GetMemberInProject_Call struct {
	*mock.Call
}

// GetMemberInProject is a helper method to define mock.On call
//   - ctx
//   - userId
//   - projectId
func (_e *GitlabClientFacade_Expecter) GetMemberInProject(ctx interface{}, userId interface{}, projectId interface{}) *GitlabClientFacade_GetMemberInProject_Call {
	return &GitlabClientFacade_GetMemberInProject_Call{Call: _e.mock.On("GetMemberInProject", ctx, userId, projectId)}
}

func (_c *GitlabClientFacade_GetMemberInProject_Call) Run(run func(ctx context.Context, userId int, projectId int)) *GitlabClientFacade_GetMemberInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_GetMemberInProject_Call) Return(projectMember *gitlab.ProjectMember, response *gitlab.Response, err error) *GitlabClientFacade_GetMemberInProject_Call {
	_c.Call.Return(projectMember, response, err)
	return _c
}

func (_c *GitlabClientFacade_GetMemberInProject_Call) RunAndReturn(run func(ctx context.Context, userId int, projectId int) (*gitlab.ProjectMember, *gitlab.Response, error)) *GitlabClientFacade_GetMemberInProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetProject(ctx context.Context, projectId int) (*gitlab.Project, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*gitlab.Project, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *gitlab.Project); ok {
		r0 = returnFunc(ctx, projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = returnFunc(ctx, projectId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type GitlabClientFacade_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx
//   - projectId
func (_e *GitlabClientFacade_Expecter) GetProject(ctx interface{}, projectId interface{}) *GitlabClientFacade_GetProject_Call {
	return &GitlabClientFacade_GetProject_Call{Call: _e.mock.On("GetProject", ctx, projectId)}
}

func (_c *GitlabClientFacade_GetProject_Call) Run(run func(ctx context.Context, projectId int)) *GitlabClientFacade_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_GetProject_Call) Return(project *gitlab.Project, response *gitlab.Response, err error) *GitlabClientFacade_GetProject_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *GitlabClientFacade_GetProject_Call) RunAndReturn(run func(ctx context.Context, projectId int) (*gitlab.Project, *gitlab.Response, error)) *GitlabClientFacade_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderID provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) GetProviderID() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderID")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// GitlabClientFacade_GetProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderID'
type GitlabClientFacade_GetProviderID_Call struct {
	*mock.Call
}

// GetProviderID is a helper method to define mock.On call
func (_e *GitlabClientFacade_Expecter) GetProviderID() *GitlabClientFacade_GetProviderID_Call {
	return &GitlabClientFacade_GetProviderID_Call{Call: _e.mock.On("GetProviderID")}
}

func (_c *GitlabClientFacade_GetProviderID_Call) Run(run func()) *GitlabClientFacade_GetProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GitlabClientFacade_GetProviderID_Call) Return(s *string) *GitlabClientFacade_GetProviderID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *GitlabClientFacade_GetProviderID_Call) RunAndReturn(run func() *string) *GitlabClientFacade_GetProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// InviteReporter provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) InviteReporter(ctx context.Context, projectId int, userId int) (*gitlab.ProjectMember, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, userId)

	if len(ret) == 0 {
		panic("no return value specified for InviteReporter")
	}

	var r0 *gitlab.ProjectMember
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*gitlab.ProjectMember, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *gitlab.ProjectMember); ok {
		r0 = returnFunc(ctx, projectId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectMember)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, projectId, userId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_InviteReporter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteReporter'
type GitlabClientFacade_InviteReporter_Call struct {
	*mock.Call
}

// InviteReporter is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - userId
func (_e *GitlabClientFacade_Expecter) InviteReporter(ctx interface{}, projectId interface{}, userId interface{}) *GitlabClientFacade_InviteReporter_Call {
	return &GitlabClientFacade_InviteReporter_Call{Call: _e.mock.On("InviteReporter", ctx, projectId, userId)}
}

func (_c *GitlabClientFacade_InviteReporter_Call) Run(run func(ctx context.Context, projectId int, userId int)) *GitlabClientFacade_InviteReporter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *GitlabClientFacade_InviteReporter_Call) Return(projectMember *gitlab.ProjectMember, response *gitlab.Response, err error) *GitlabClientFacade_InviteReporter_Call {
	_c.Call.Return(projectMember, response, err)
	return _c
}

func (_c *GitlabClientFacade_InviteReporter_Call) RunAndReturn(run func(ctx context.Context, projectId int, userId int) (*gitlab.ProjectMember, *gitlab.Response, error)) *GitlabClientFacade_InviteReporter_Call {
	_c.Call.Return(run)
	return _c
}

// IsProjectMember provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) IsProjectMember(ctx context.Context, projectId int, userId int, options *gitlab.ListProjectMembersOptions) (bool, error) {
	ret := _mock.Called(ctx, projectId, userId, options)

	if len(ret) == 0 {
		panic("no return value specified for IsProjectMember")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.ListProjectMembersOptions) (bool, error)); ok {
		return returnFunc(ctx, projectId, userId, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *gitlab.ListProjectMembersOptions) bool); ok {
		r0 = returnFunc(ctx, projectId, userId, options)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, *gitlab.ListProjectMembersOptions) error); ok {
		r1 = returnFunc(ctx, projectId, userId, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFacade_IsProjectMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProjectMember'
type GitlabClientFacade_IsProjectMember_Call struct {
	*mock.Call
}

// IsProjectMember is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - userId
//   - options
func (_e *GitlabClientFacade_Expecter) IsProjectMember(ctx interface{}, projectId interface{}, userId interface{}, options interface{}) *GitlabClientFacade_IsProjectMember_Call {
	return &GitlabClientFacade_IsProjectMember_Call{Call: _e.mock.On("IsProjectMember", ctx, projectId, userId, options)}
}

func (_c *GitlabClientFacade_IsProjectMember_Call) Run(run func(ctx context.Context, projectId int, userId int, options *gitlab.ListProjectMembersOptions)) *GitlabClientFacade_IsProjectMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*gitlab.ListProjectMembersOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_IsProjectMember_Call) Return(b bool, err error) *GitlabClientFacade_IsProjectMember_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *GitlabClientFacade_IsProjectMember_Call) RunAndReturn(run func(ctx context.Context, projectId int, userId int, options *gitlab.ListProjectMembersOptions) (bool, error)) *GitlabClientFacade_IsProjectMember_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) ListGroups(ctx context.Context, opt *gitlab.ListGroupsOptions) ([]*gitlab.Group, *gitlab.Response, error) {
	ret := _mock.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 []*gitlab.Group
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gitlab.ListGroupsOptions) ([]*gitlab.Group, *gitlab.Response, error)); ok {
		return returnFunc(ctx, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gitlab.ListGroupsOptions) []*gitlab.Group); ok {
		r0 = returnFunc(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *gitlab.ListGroupsOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *gitlab.ListGroupsOptions) error); ok {
		r2 = returnFunc(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type GitlabClientFacade_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx
//   - opt
func (_e *GitlabClientFacade_Expecter) ListGroups(ctx interface{}, opt interface{}) *GitlabClientFacade_ListGroups_Call {
	return &GitlabClientFacade_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, opt)}
}

func (_c *GitlabClientFacade_ListGroups_Call) Run(run func(ctx context.Context, opt *gitlab.ListGroupsOptions)) *GitlabClientFacade_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gitlab.ListGroupsOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_ListGroups_Call) Return(groups []*gitlab.Group, response *gitlab.Response, err error) *GitlabClientFacade_ListGroups_Call {
	_c.Call.Return(groups, response, err)
	return _c
}

func (_c *GitlabClientFacade_ListGroups_Call) RunAndReturn(run func(ctx context.Context, opt *gitlab.ListGroupsOptions) ([]*gitlab.Group, *gitlab.Response, error)) *GitlabClientFacade_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectHooks provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) ListProjectHooks(ctx context.Context, projectId int, options *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, options)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectHooks")
	}

	var r0 []*gitlab.ProjectHook
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectHooksOptions) []*gitlab.ProjectHook); ok {
		r0 = returnFunc(ctx, projectId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.ListProjectHooksOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.ListProjectHooksOptions) error); ok {
		r2 = returnFunc(ctx, projectId, options)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_ListProjectHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectHooks'
type GitlabClientFacade_ListProjectHooks_Call struct {
	*mock.Call
}

// ListProjectHooks is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - options
func (_e *GitlabClientFacade_Expecter) ListProjectHooks(ctx interface{}, projectId interface{}, options interface{}) *GitlabClientFacade_ListProjectHooks_Call {
	return &GitlabClientFacade_ListProjectHooks_Call{Call: _e.mock.On("ListProjectHooks", ctx, projectId, options)}
}

func (_c *GitlabClientFacade_ListProjectHooks_Call) Run(run func(ctx context.Context, projectId int, options *gitlab.ListProjectHooksOptions)) *GitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.ListProjectHooksOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_ListProjectHooks_Call) Return(projectHooks []*gitlab.ProjectHook, response *gitlab.Response, err error) *GitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Return(projectHooks, response, err)
	return _c
}

func (_c *GitlabClientFacade_ListProjectHooks_Call) RunAndReturn(run func(ctx context.Context, projectId int, options *gitlab.ListProjectHooksOptions) ([]*gitlab.ProjectHook, *gitlab.Response, error)) *GitlabClientFacade_ListProjectHooks_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) ListProjects(ctx context.Context, opt *gitlab.ListProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error) {
	ret := _mock.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gitlab.ListProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)); ok {
		return returnFunc(ctx, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gitlab.ListProjectsOptions) []*gitlab.Project); ok {
		r0 = returnFunc(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *gitlab.ListProjectsOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *gitlab.ListProjectsOptions) error); ok {
		r2 = returnFunc(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type GitlabClientFacade_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx
//   - opt
func (_e *GitlabClientFacade_Expecter) ListProjects(ctx interface{}, opt interface{}) *GitlabClientFacade_ListProjects_Call {
	return &GitlabClientFacade_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, opt)}
}

func (_c *GitlabClientFacade_ListProjects_Call) Run(run func(ctx context.Context, opt *gitlab.ListProjectsOptions)) *GitlabClientFacade_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gitlab.ListProjectsOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_ListProjects_Call) Return(projects []*gitlab.Project, response *gitlab.Response, err error) *GitlabClientFacade_ListProjects_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *GitlabClientFacade_ListProjects_Call) RunAndReturn(run func(ctx context.Context, opt *gitlab.ListProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)) *GitlabClientFacade_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectsInGroup provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) ListProjectsInGroup(ctx context.Context, groupId int, opt *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error) {
	ret := _mock.Called(ctx, groupId, opt)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectsInGroup")
	}

	var r0 []*gitlab.Project
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)); ok {
		return returnFunc(ctx, groupId, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListGroupProjectsOptions) []*gitlab.Project); ok {
		r0 = returnFunc(ctx, groupId, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.ListGroupProjectsOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, groupId, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.ListGroupProjectsOptions) error); ok {
		r2 = returnFunc(ctx, groupId, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_ListProjectsInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectsInGroup'
type GitlabClientFacade_ListProjectsInGroup_Call struct {
	*mock.Call
}

// ListProjectsInGroup is a helper method to define mock.On call
//   - ctx
//   - groupId
//   - opt
func (_e *GitlabClientFacade_Expecter) ListProjectsInGroup(ctx interface{}, groupId interface{}, opt interface{}) *GitlabClientFacade_ListProjectsInGroup_Call {
	return &GitlabClientFacade_ListProjectsInGroup_Call{Call: _e.mock.On("ListProjectsInGroup", ctx, groupId, opt)}
}

func (_c *GitlabClientFacade_ListProjectsInGroup_Call) Run(run func(ctx context.Context, groupId int, opt *gitlab.ListGroupProjectsOptions)) *GitlabClientFacade_ListProjectsInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.ListGroupProjectsOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_ListProjectsInGroup_Call) Return(projects []*gitlab.Project, response *gitlab.Response, err error) *GitlabClientFacade_ListProjectsInGroup_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *GitlabClientFacade_ListProjectsInGroup_Call) RunAndReturn(run func(ctx context.Context, groupId int, opt *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error)) *GitlabClientFacade_ListProjectsInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListVariables provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) ListVariables(ctx context.Context, projectId int, options *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, options)

	if len(ret) == 0 {
		panic("no return value specified for ListVariables")
	}

	var r0 []*gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) []*gitlab.ProjectVariable); ok {
		r0 = returnFunc(ctx, projectId, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.ProjectVariable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, *gitlab.ListProjectVariablesOptions) error); ok {
		r2 = returnFunc(ctx, projectId, options)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_ListVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVariables'
type GitlabClientFacade_ListVariables_Call struct {
	*mock.Call
}

// ListVariables is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - options
func (_e *GitlabClientFacade_Expecter) ListVariables(ctx interface{}, projectId interface{}, options interface{}) *GitlabClientFacade_ListVariables_Call {
	return &GitlabClientFacade_ListVariables_Call{Call: _e.mock.On("ListVariables", ctx, projectId, options)}
}

func (_c *GitlabClientFacade_ListVariables_Call) Run(run func(ctx context.Context, projectId int, options *gitlab.ListProjectVariablesOptions)) *GitlabClientFacade_ListVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*gitlab.ListProjectVariablesOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_ListVariables_Call) Return(projectVariables []*gitlab.ProjectVariable, response *gitlab.Response, err error) *GitlabClientFacade_ListVariables_Call {
	_c.Call.Return(projectVariables, response, err)
	return _c
}

func (_c *GitlabClientFacade_ListVariables_Call) RunAndReturn(run func(ctx context.Context, projectId int, options *gitlab.ListProjectVariablesOptions) ([]*gitlab.ProjectVariable, *gitlab.Response, error)) *GitlabClientFacade_ListVariables_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVariable provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) RemoveVariable(ctx context.Context, projectId int, key string) (*gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVariable")
	}

	var r0 *gitlab.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) (*gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) *gitlab.Response); ok {
		r0 = returnFunc(ctx, projectId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = returnFunc(ctx, projectId, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFacade_RemoveVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVariable'
type GitlabClientFacade_RemoveVariable_Call struct {
	*mock.Call
}

// RemoveVariable is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - key
func (_e *GitlabClientFacade_Expecter) RemoveVariable(ctx interface{}, projectId interface{}, key interface{}) *GitlabClientFacade_RemoveVariable_Call {
	return &GitlabClientFacade_RemoveVariable_Call{Call: _e.mock.On("RemoveVariable", ctx, projectId, key)}
}

func (_c *GitlabClientFacade_RemoveVariable_Call) Run(run func(ctx context.Context, projectId int, key string)) *GitlabClientFacade_RemoveVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *GitlabClientFacade_RemoveVariable_Call) Return(response *gitlab.Response, err error) *GitlabClientFacade_RemoveVariable_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *GitlabClientFacade_RemoveVariable_Call) RunAndReturn(run func(ctx context.Context, projectId int, key string) (*gitlab.Response, error)) *GitlabClientFacade_RemoveVariable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVariable provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) UpdateVariable(ctx context.Context, projectId int, key string, opt *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	ret := _mock.Called(ctx, projectId, key, opt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVariable")
	}

	var r0 *gitlab.ProjectVariable
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)); ok {
		return returnFunc(ctx, projectId, key, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) *gitlab.ProjectVariable); ok {
		r0 = returnFunc(ctx, projectId, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.ProjectVariable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) *gitlab.Response); ok {
		r1 = returnFunc(ctx, projectId, key, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, string, *gitlab.UpdateProjectVariableOptions) error); ok {
		r2 = returnFunc(ctx, projectId, key, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_UpdateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVariable'
type GitlabClientFacade_UpdateVariable_Call struct {
	*mock.Call
}

// UpdateVariable is a helper method to define mock.On call
//   - ctx
//   - projectId
//   - key
//   - opt
func (_e *GitlabClientFacade_Expecter) UpdateVariable(ctx interface{}, projectId interface{}, key interface{}, opt interface{}) *GitlabClientFacade_UpdateVariable_Call {
	return &GitlabClientFacade_UpdateVariable_Call{Call: _e.mock.On("UpdateVariable", ctx, projectId, key, opt)}
}

func (_c *GitlabClientFacade_UpdateVariable_Call) Run(run func(ctx context.Context, projectId int, key string, opt *gitlab.UpdateProjectVariableOptions)) *GitlabClientFacade_UpdateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*gitlab.UpdateProjectVariableOptions))
	})
	return _c
}

func (_c *GitlabClientFacade_UpdateVariable_Call) Return(projectVariable *gitlab.ProjectVariable, response *gitlab.Response, err error) *GitlabClientFacade_UpdateVariable_Call {
	_c.Call.Return(projectVariable, response, err)
	return _c
}

func (_c *GitlabClientFacade_UpdateVariable_Call) RunAndReturn(run func(ctx context.Context, projectId int, key string, opt *gitlab.UpdateProjectVariableOptions) (*gitlab.ProjectVariable, *gitlab.Response, error)) *GitlabClientFacade_UpdateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// Whoami provides a mock function for the type GitlabClientFacade
func (_mock *GitlabClientFacade) Whoami(ctx context.Context) (*gitlab.User, *gitlab.Response, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Whoami")
	}

	var r0 *gitlab.User
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*gitlab.User, *gitlab.Response, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *gitlab.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) *gitlab.Response); ok {
		r1 = returnFunc(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GitlabClientFacade_Whoami_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Whoami'
type GitlabClientFacade_Whoami_Call struct {
	*mock.Call
}

// Whoami is a helper method to define mock.On call
//   - ctx
func (_e *GitlabClientFacade_Expecter) Whoami(ctx interface{}) *GitlabClientFacade_Whoami_Call {
	return &GitlabClientFacade_Whoami_Call{Call: _e.mock.On("Whoami", ctx)}
}

func (_c *GitlabClientFacade_Whoami_Call) Run(run func(ctx context.Context)) *GitlabClientFacade_Whoami_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GitlabClientFacade_Whoami_Call) Return(user *gitlab.User, response *gitlab.Response, err error) *GitlabClientFacade_Whoami_Call {
	_c.Call.Return(user, response, err)
	return _c
}

func (_c *GitlabClientFacade_Whoami_Call) RunAndReturn(run func(ctx context.Context) (*gitlab.User, *gitlab.Response, error)) *GitlabClientFacade_Whoami_Call {
	_c.Call.Return(run)
	return _c
}
