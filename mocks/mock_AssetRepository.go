// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewAssetRepository creates a new instance of AssetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetRepository {
	mock := &AssetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AssetRepository is an autogenerated mock type for the AssetRepository type
type AssetRepository struct {
	mock.Mock
}

type AssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetRepository) EXPECT() *AssetRepository_Expecter {
	return &AssetRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Activate(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type AssetRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx
//   - id
func (_e *AssetRepository_Expecter) Activate(tx interface{}, id interface{}) *AssetRepository_Activate_Call {
	return &AssetRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *AssetRepository_Activate_Call) Run(run func(tx core.DB, id uuid.UUID)) *AssetRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_Activate_Call) Return(err error) *AssetRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *AssetRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type AssetRepository
func (_mock *AssetRepository) All() ([]models.Asset, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Asset, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Asset); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type AssetRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *AssetRepository_Expecter) All() *AssetRepository_All_Call {
	return &AssetRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *AssetRepository_All_Call) Run(run func()) *AssetRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AssetRepository_All_Call) Return(assets []models.Asset, err error) *AssetRepository_All_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *AssetRepository_All_Call) RunAndReturn(run func() ([]models.Asset, error)) *AssetRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// AssetRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type AssetRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *AssetRepository_Expecter) Begin() *AssetRepository_Begin_Call {
	return &AssetRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *AssetRepository_Begin_Call) Run(run func()) *AssetRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AssetRepository_Begin_Call) Return(v core.DB) *AssetRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *AssetRepository_Begin_Call) RunAndReturn(run func() core.DB) *AssetRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Create(tx core.DB, t *models.Asset) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Asset) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AssetRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx
//   - t
func (_e *AssetRepository_Expecter) Create(tx interface{}, t interface{}) *AssetRepository_Create_Call {
	return &AssetRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *AssetRepository_Create_Call) Run(run func(tx core.DB, t *models.Asset)) *AssetRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *AssetRepository_Create_Call) Return(err error) *AssetRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.Asset) error) *AssetRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type AssetRepository
func (_mock *AssetRepository) CreateBatch(tx core.DB, ts []models.Asset) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Asset) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type AssetRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *AssetRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *AssetRepository_CreateBatch_Call {
	return &AssetRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *AssetRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.Asset)) *AssetRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Asset))
	})
	return _c
}

func (_c *AssetRepository_CreateBatch_Call) Return(err error) *AssetRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Asset) error) *AssetRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AssetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *AssetRepository_Expecter) Delete(tx interface{}, id interface{}) *AssetRepository_Delete_Call {
	return &AssetRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *AssetRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *AssetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_Delete_Call) Return(err error) *AssetRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *AssetRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type AssetRepository
func (_mock *AssetRepository) DeleteBatch(tx core.DB, ids []models.Asset) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Asset) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type AssetRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx
//   - ids
func (_e *AssetRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *AssetRepository_DeleteBatch_Call {
	return &AssetRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *AssetRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.Asset)) *AssetRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Asset))
	})
	return _c
}

func (_c *AssetRepository_DeleteBatch_Call) Return(err error) *AssetRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.Asset) error) *AssetRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// FindAssetByExternalProviderId provides a mock function for the type AssetRepository
func (_mock *AssetRepository) FindAssetByExternalProviderId(externalEntityProviderID string, externalEntityID string) (*models.Asset, error) {
	ret := _mock.Called(externalEntityProviderID, externalEntityID)

	if len(ret) == 0 {
		panic("no return value specified for FindAssetByExternalProviderId")
	}

	var r0 *models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*models.Asset, error)); ok {
		return returnFunc(externalEntityProviderID, externalEntityID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *models.Asset); ok {
		r0 = returnFunc(externalEntityProviderID, externalEntityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(externalEntityProviderID, externalEntityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_FindAssetByExternalProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAssetByExternalProviderId'
type AssetRepository_FindAssetByExternalProviderId_Call struct {
	*mock.Call
}

// FindAssetByExternalProviderId is a helper method to define mock.On call
//   - externalEntityProviderID
//   - externalEntityID
func (_e *AssetRepository_Expecter) FindAssetByExternalProviderId(externalEntityProviderID interface{}, externalEntityID interface{}) *AssetRepository_FindAssetByExternalProviderId_Call {
	return &AssetRepository_FindAssetByExternalProviderId_Call{Call: _e.mock.On("FindAssetByExternalProviderId", externalEntityProviderID, externalEntityID)}
}

func (_c *AssetRepository_FindAssetByExternalProviderId_Call) Run(run func(externalEntityProviderID string, externalEntityID string)) *AssetRepository_FindAssetByExternalProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AssetRepository_FindAssetByExternalProviderId_Call) Return(asset *models.Asset, err error) *AssetRepository_FindAssetByExternalProviderId_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_FindAssetByExternalProviderId_Call) RunAndReturn(run func(externalEntityProviderID string, externalEntityID string) (*models.Asset, error)) *AssetRepository_FindAssetByExternalProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function for the type AssetRepository
func (_mock *AssetRepository) FindByName(name string) (models.Asset, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Asset, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Asset); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type AssetRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - name
func (_e *AssetRepository_Expecter) FindByName(name interface{}) *AssetRepository_FindByName_Call {
	return &AssetRepository_FindByName_Call{Call: _e.mock.On("FindByName", name)}
}

func (_c *AssetRepository_FindByName_Call) Run(run func(name string)) *AssetRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AssetRepository_FindByName_Call) Return(asset models.Asset, err error) *AssetRepository_FindByName_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_FindByName_Call) RunAndReturn(run func(name string) (models.Asset, error)) *AssetRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreate provides a mock function for the type AssetRepository
func (_mock *AssetRepository) FindOrCreate(tx core.DB, name string) (models.Asset, error) {
	ret := _mock.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreate")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) (models.Asset, error)); ok {
		return returnFunc(tx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) models.Asset); ok {
		r0 = returnFunc(tx, name)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string) error); ok {
		r1 = returnFunc(tx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_FindOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreate'
type AssetRepository_FindOrCreate_Call struct {
	*mock.Call
}

// FindOrCreate is a helper method to define mock.On call
//   - tx
//   - name
func (_e *AssetRepository_Expecter) FindOrCreate(tx interface{}, name interface{}) *AssetRepository_FindOrCreate_Call {
	return &AssetRepository_FindOrCreate_Call{Call: _e.mock.On("FindOrCreate", tx, name)}
}

func (_c *AssetRepository_FindOrCreate_Call) Run(run func(tx core.DB, name string)) *AssetRepository_FindOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *AssetRepository_FindOrCreate_Call) Return(asset models.Asset, err error) *AssetRepository_FindOrCreate_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_FindOrCreate_Call) RunAndReturn(run func(tx core.DB, name string) (models.Asset, error)) *AssetRepository_FindOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssetsFromDB provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetAllAssetsFromDB() ([]models.Asset, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsFromDB")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Asset, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Asset); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetAllAssetsFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsFromDB'
type AssetRepository_GetAllAssetsFromDB_Call struct {
	*mock.Call
}

// GetAllAssetsFromDB is a helper method to define mock.On call
func (_e *AssetRepository_Expecter) GetAllAssetsFromDB() *AssetRepository_GetAllAssetsFromDB_Call {
	return &AssetRepository_GetAllAssetsFromDB_Call{Call: _e.mock.On("GetAllAssetsFromDB")}
}

func (_c *AssetRepository_GetAllAssetsFromDB_Call) Run(run func()) *AssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AssetRepository_GetAllAssetsFromDB_Call) Return(assets []models.Asset, err error) *AssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *AssetRepository_GetAllAssetsFromDB_Call) RunAndReturn(run func() ([]models.Asset, error)) *AssetRepository_GetAllAssetsFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetIDByBadgeSecret provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetAssetIDByBadgeSecret(badgeSecret uuid.UUID) (models.Asset, error) {
	ret := _mock.Called(badgeSecret)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetIDByBadgeSecret")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Asset, error)); ok {
		return returnFunc(badgeSecret)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Asset); ok {
		r0 = returnFunc(badgeSecret)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(badgeSecret)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetAssetIDByBadgeSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetIDByBadgeSecret'
type AssetRepository_GetAssetIDByBadgeSecret_Call struct {
	*mock.Call
}

// GetAssetIDByBadgeSecret is a helper method to define mock.On call
//   - badgeSecret
func (_e *AssetRepository_Expecter) GetAssetIDByBadgeSecret(badgeSecret interface{}) *AssetRepository_GetAssetIDByBadgeSecret_Call {
	return &AssetRepository_GetAssetIDByBadgeSecret_Call{Call: _e.mock.On("GetAssetIDByBadgeSecret", badgeSecret)}
}

func (_c *AssetRepository_GetAssetIDByBadgeSecret_Call) Run(run func(badgeSecret uuid.UUID)) *AssetRepository_GetAssetIDByBadgeSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_GetAssetIDByBadgeSecret_Call) Return(asset models.Asset, err error) *AssetRepository_GetAssetIDByBadgeSecret_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_GetAssetIDByBadgeSecret_Call) RunAndReturn(run func(badgeSecret uuid.UUID) (models.Asset, error)) *AssetRepository_GetAssetIDByBadgeSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetIDBySlug provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetAssetIDBySlug(projectID uuid.UUID, slug string) (uuid.UUID, error) {
	ret := _mock.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetIDBySlug")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) (uuid.UUID, error)); ok {
		return returnFunc(projectID, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) uuid.UUID); ok {
		r0 = returnFunc(projectID, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetAssetIDBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetIDBySlug'
type AssetRepository_GetAssetIDBySlug_Call struct {
	*mock.Call
}

// GetAssetIDBySlug is a helper method to define mock.On call
//   - projectID
//   - slug
func (_e *AssetRepository_Expecter) GetAssetIDBySlug(projectID interface{}, slug interface{}) *AssetRepository_GetAssetIDBySlug_Call {
	return &AssetRepository_GetAssetIDBySlug_Call{Call: _e.mock.On("GetAssetIDBySlug", projectID, slug)}
}

func (_c *AssetRepository_GetAssetIDBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *AssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AssetRepository_GetAssetIDBySlug_Call) Return(uUID uuid.UUID, err error) *AssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *AssetRepository_GetAssetIDBySlug_Call) RunAndReturn(run func(projectID uuid.UUID, slug string) (uuid.UUID, error)) *AssetRepository_GetAssetIDBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOrgID provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetByOrgID(organizationID uuid.UUID) ([]models.Asset, error) {
	ret := _mock.Called(organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrgID")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.Asset, error)); ok {
		return returnFunc(organizationID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.Asset); ok {
		r0 = returnFunc(organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(organizationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrgID'
type AssetRepository_GetByOrgID_Call struct {
	*mock.Call
}

// GetByOrgID is a helper method to define mock.On call
//   - organizationID
func (_e *AssetRepository_Expecter) GetByOrgID(organizationID interface{}) *AssetRepository_GetByOrgID_Call {
	return &AssetRepository_GetByOrgID_Call{Call: _e.mock.On("GetByOrgID", organizationID)}
}

func (_c *AssetRepository_GetByOrgID_Call) Run(run func(organizationID uuid.UUID)) *AssetRepository_GetByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_GetByOrgID_Call) Return(assets []models.Asset, err error) *AssetRepository_GetByOrgID_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *AssetRepository_GetByOrgID_Call) RunAndReturn(run func(organizationID uuid.UUID) ([]models.Asset, error)) *AssetRepository_GetByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProjectID provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetByProjectID(projectID uuid.UUID) ([]models.Asset, error) {
	ret := _mock.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectID")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.Asset, error)); ok {
		return returnFunc(projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.Asset); ok {
		r0 = returnFunc(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProjectID'
type AssetRepository_GetByProjectID_Call struct {
	*mock.Call
}

// GetByProjectID is a helper method to define mock.On call
//   - projectID
func (_e *AssetRepository_Expecter) GetByProjectID(projectID interface{}) *AssetRepository_GetByProjectID_Call {
	return &AssetRepository_GetByProjectID_Call{Call: _e.mock.On("GetByProjectID", projectID)}
}

func (_c *AssetRepository_GetByProjectID_Call) Run(run func(projectID uuid.UUID)) *AssetRepository_GetByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_GetByProjectID_Call) Return(assets []models.Asset, err error) *AssetRepository_GetByProjectID_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *AssetRepository_GetByProjectID_Call) RunAndReturn(run func(projectID uuid.UUID) ([]models.Asset, error)) *AssetRepository_GetByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// AssetRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type AssetRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *AssetRepository_Expecter) GetDB(tx interface{}) *AssetRepository_GetDB_Call {
	return &AssetRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *AssetRepository_GetDB_Call) Run(run func(tx core.DB)) *AssetRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *AssetRepository_GetDB_Call) Return(v core.DB) *AssetRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *AssetRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *AssetRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetFQNByID provides a mock function for the type AssetRepository
func (_mock *AssetRepository) GetFQNByID(id uuid.UUID) (string, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFQNByID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_GetFQNByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFQNByID'
type AssetRepository_GetFQNByID_Call struct {
	*mock.Call
}

// GetFQNByID is a helper method to define mock.On call
//   - id
func (_e *AssetRepository_Expecter) GetFQNByID(id interface{}) *AssetRepository_GetFQNByID_Call {
	return &AssetRepository_GetFQNByID_Call{Call: _e.mock.On("GetFQNByID", id)}
}

func (_c *AssetRepository_GetFQNByID_Call) Run(run func(id uuid.UUID)) *AssetRepository_GetFQNByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_GetFQNByID_Call) Return(s string, err error) *AssetRepository_GetFQNByID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AssetRepository_GetFQNByID_Call) RunAndReturn(run func(id uuid.UUID) (string, error)) *AssetRepository_GetFQNByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type AssetRepository
func (_mock *AssetRepository) List(ids []uuid.UUID) ([]models.Asset, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Asset, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) []models.Asset); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AssetRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids
func (_e *AssetRepository_Expecter) List(ids interface{}) *AssetRepository_List_Call {
	return &AssetRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *AssetRepository_List_Call) Run(run func(ids []uuid.UUID)) *AssetRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_List_Call) Return(assets []models.Asset, err error) *AssetRepository_List_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *AssetRepository_List_Call) RunAndReturn(run func(ids []uuid.UUID) ([]models.Asset, error)) *AssetRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Read(id uuid.UUID) (models.Asset, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Asset, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Asset); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type AssetRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *AssetRepository_Expecter) Read(id interface{}) *AssetRepository_Read_Call {
	return &AssetRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *AssetRepository_Read_Call) Run(run func(id uuid.UUID)) *AssetRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_Read_Call) Return(asset models.Asset, err error) *AssetRepository_Read_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.Asset, error)) *AssetRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function for the type AssetRepository
func (_mock *AssetRepository) ReadBySlug(projectID uuid.UUID, slug string) (models.Asset, error) {
	ret := _mock.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) (models.Asset, error)); ok {
		return returnFunc(projectID, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) models.Asset); ok {
		r0 = returnFunc(projectID, slug)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type AssetRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - projectID
//   - slug
func (_e *AssetRepository_Expecter) ReadBySlug(projectID interface{}, slug interface{}) *AssetRepository_ReadBySlug_Call {
	return &AssetRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", projectID, slug)}
}

func (_c *AssetRepository_ReadBySlug_Call) Run(run func(projectID uuid.UUID, slug string)) *AssetRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AssetRepository_ReadBySlug_Call) Return(asset models.Asset, err error) *AssetRepository_ReadBySlug_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_ReadBySlug_Call) RunAndReturn(run func(projectID uuid.UUID, slug string) (models.Asset, error)) *AssetRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlugUnscoped provides a mock function for the type AssetRepository
func (_mock *AssetRepository) ReadBySlugUnscoped(projectID uuid.UUID, slug string) (models.Asset, error) {
	ret := _mock.Called(projectID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlugUnscoped")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) (models.Asset, error)); ok {
		return returnFunc(projectID, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) models.Asset); ok {
		r0 = returnFunc(projectID, slug)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(projectID, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_ReadBySlugUnscoped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlugUnscoped'
type AssetRepository_ReadBySlugUnscoped_Call struct {
	*mock.Call
}

// ReadBySlugUnscoped is a helper method to define mock.On call
//   - projectID
//   - slug
func (_e *AssetRepository_Expecter) ReadBySlugUnscoped(projectID interface{}, slug interface{}) *AssetRepository_ReadBySlugUnscoped_Call {
	return &AssetRepository_ReadBySlugUnscoped_Call{Call: _e.mock.On("ReadBySlugUnscoped", projectID, slug)}
}

func (_c *AssetRepository_ReadBySlugUnscoped_Call) Run(run func(projectID uuid.UUID, slug string)) *AssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AssetRepository_ReadBySlugUnscoped_Call) Return(asset models.Asset, err error) *AssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_ReadBySlugUnscoped_Call) RunAndReturn(run func(projectID uuid.UUID, slug string) (models.Asset, error)) *AssetRepository_ReadBySlugUnscoped_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWithAssetVersions provides a mock function for the type AssetRepository
func (_mock *AssetRepository) ReadWithAssetVersions(assetID uuid.UUID) (models.Asset, error) {
	ret := _mock.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for ReadWithAssetVersions")
	}

	var r0 models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Asset, error)); ok {
		return returnFunc(assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Asset); ok {
		r0 = returnFunc(assetID)
	} else {
		r0 = ret.Get(0).(models.Asset)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetRepository_ReadWithAssetVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWithAssetVersions'
type AssetRepository_ReadWithAssetVersions_Call struct {
	*mock.Call
}

// ReadWithAssetVersions is a helper method to define mock.On call
//   - assetID
func (_e *AssetRepository_Expecter) ReadWithAssetVersions(assetID interface{}) *AssetRepository_ReadWithAssetVersions_Call {
	return &AssetRepository_ReadWithAssetVersions_Call{Call: _e.mock.On("ReadWithAssetVersions", assetID)}
}

func (_c *AssetRepository_ReadWithAssetVersions_Call) Run(run func(assetID uuid.UUID)) *AssetRepository_ReadWithAssetVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetRepository_ReadWithAssetVersions_Call) Return(asset models.Asset, err error) *AssetRepository_ReadWithAssetVersions_Call {
	_c.Call.Return(asset, err)
	return _c
}

func (_c *AssetRepository_ReadWithAssetVersions_Call) RunAndReturn(run func(assetID uuid.UUID) (models.Asset, error)) *AssetRepository_ReadWithAssetVersions_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Save(tx core.DB, t *models.Asset) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Asset) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AssetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - t
func (_e *AssetRepository_Expecter) Save(tx interface{}, t interface{}) *AssetRepository_Save_Call {
	return &AssetRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *AssetRepository_Save_Call) Run(run func(tx core.DB, t *models.Asset)) *AssetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *AssetRepository_Save_Call) Return(err error) *AssetRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.Asset) error) *AssetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type AssetRepository
func (_mock *AssetRepository) SaveBatch(tx core.DB, ts []models.Asset) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Asset) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type AssetRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *AssetRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *AssetRepository_SaveBatch_Call {
	return &AssetRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *AssetRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.Asset)) *AssetRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Asset))
	})
	return _c
}

func (_c *AssetRepository_SaveBatch_Call) Return(err error) *AssetRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Asset) error) *AssetRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AssetRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *AssetRepository_Expecter) Transaction(fn interface{}) *AssetRepository_Transaction_Call {
	return &AssetRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *AssetRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *AssetRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *AssetRepository_Transaction_Call) Return(err error) *AssetRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *AssetRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Update(tx core.DB, asset *models.Asset) error {
	ret := _mock.Called(tx, asset)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Asset) error); ok {
		r0 = returnFunc(tx, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AssetRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx
//   - asset
func (_e *AssetRepository_Expecter) Update(tx interface{}, asset interface{}) *AssetRepository_Update_Call {
	return &AssetRepository_Update_Call{Call: _e.mock.On("Update", tx, asset)}
}

func (_c *AssetRepository_Update_Call) Run(run func(tx core.DB, asset *models.Asset)) *AssetRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Asset))
	})
	return _c
}

func (_c *AssetRepository_Update_Call) Return(err error) *AssetRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Update_Call) RunAndReturn(run func(tx core.DB, asset *models.Asset) error) *AssetRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type AssetRepository
func (_mock *AssetRepository) Upsert(t *[]*models.Asset, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.Asset, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type AssetRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t
//   - conflictingColumns
//   - updateOnly
func (_e *AssetRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *AssetRepository_Upsert_Call {
	return &AssetRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *AssetRepository_Upsert_Call) Run(run func(t *[]*models.Asset, conflictingColumns []clause.Column, updateOnly []string)) *AssetRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]*models.Asset), args[1].([]clause.Column), args[2].([]string))
	})
	return _c
}

func (_c *AssetRepository_Upsert_Call) Return(err error) *AssetRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.Asset, conflictingColumns []clause.Column, updateOnly []string) error) *AssetRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
