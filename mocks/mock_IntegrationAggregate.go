// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewIntegrationAggregate creates a new instance of IntegrationAggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationAggregate(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationAggregate {
	mock := &IntegrationAggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IntegrationAggregate is an autogenerated mock type for the IntegrationAggregate type
type IntegrationAggregate struct {
	mock.Mock
}

type IntegrationAggregate_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationAggregate) EXPECT() *IntegrationAggregate_Expecter {
	return &IntegrationAggregate_Expecter{mock: &_m.Mock}
}

// CloseIssue provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) CloseIssue(ctx context.Context, state string, repoId string, vuln models.Vuln) error {
	ret := _mock.Called(ctx, state, repoId, vuln)

	if len(ret) == 0 {
		panic("no return value specified for CloseIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, models.Vuln) error); ok {
		r0 = returnFunc(ctx, state, repoId, vuln)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_CloseIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseIssue'
type IntegrationAggregate_CloseIssue_Call struct {
	*mock.Call
}

// CloseIssue is a helper method to define mock.On call
//   - ctx
//   - state
//   - repoId
//   - vuln
func (_e *IntegrationAggregate_Expecter) CloseIssue(ctx interface{}, state interface{}, repoId interface{}, vuln interface{}) *IntegrationAggregate_CloseIssue_Call {
	return &IntegrationAggregate_CloseIssue_Call{Call: _e.mock.On("CloseIssue", ctx, state, repoId, vuln)}
}

func (_c *IntegrationAggregate_CloseIssue_Call) Run(run func(ctx context.Context, state string, repoId string, vuln models.Vuln)) *IntegrationAggregate_CloseIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(models.Vuln))
	})
	return _c
}

func (_c *IntegrationAggregate_CloseIssue_Call) Return(err error) *IntegrationAggregate_CloseIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_CloseIssue_Call) RunAndReturn(run func(ctx context.Context, state string, repoId string, vuln models.Vuln) error) *IntegrationAggregate_CloseIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssue provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) CreateIssue(ctx context.Context, asset models.Asset, assetVersionName string, repoId string, vuln models.Vuln, projectSlug string, orgSlug string, justification string, userID string) error {
	ret := _mock.Called(ctx, asset, assetVersionName, repoId, vuln, projectSlug, orgSlug, justification, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Asset, string, string, models.Vuln, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, asset, assetVersionName, repoId, vuln, projectSlug, orgSlug, justification, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type IntegrationAggregate_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - ctx
//   - asset
//   - assetVersionName
//   - repoId
//   - vuln
//   - projectSlug
//   - orgSlug
//   - justification
//   - userID
func (_e *IntegrationAggregate_Expecter) CreateIssue(ctx interface{}, asset interface{}, assetVersionName interface{}, repoId interface{}, vuln interface{}, projectSlug interface{}, orgSlug interface{}, justification interface{}, userID interface{}) *IntegrationAggregate_CreateIssue_Call {
	return &IntegrationAggregate_CreateIssue_Call{Call: _e.mock.On("CreateIssue", ctx, asset, assetVersionName, repoId, vuln, projectSlug, orgSlug, justification, userID)}
}

func (_c *IntegrationAggregate_CreateIssue_Call) Run(run func(ctx context.Context, asset models.Asset, assetVersionName string, repoId string, vuln models.Vuln, projectSlug string, orgSlug string, justification string, userID string)) *IntegrationAggregate_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Asset), args[2].(string), args[3].(string), args[4].(models.Vuln), args[5].(string), args[6].(string), args[7].(string), args[8].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_CreateIssue_Call) Return(err error) *IntegrationAggregate_CreateIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_CreateIssue_Call) RunAndReturn(run func(ctx context.Context, asset models.Asset, assetVersionName string, repoId string, vuln models.Vuln, projectSlug string, orgSlug string, justification string, userID string) error) *IntegrationAggregate_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) GetID() core.IntegrationID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 core.IntegrationID
	if returnFunc, ok := ret.Get(0).(func() core.IntegrationID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(core.IntegrationID)
	}
	return r0
}

// IntegrationAggregate_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type IntegrationAggregate_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *IntegrationAggregate_Expecter) GetID() *IntegrationAggregate_GetID_Call {
	return &IntegrationAggregate_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *IntegrationAggregate_GetID_Call) Run(run func()) *IntegrationAggregate_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IntegrationAggregate_GetID_Call) Return(integrationID core.IntegrationID) *IntegrationAggregate_GetID_Call {
	_c.Call.Return(integrationID)
	return _c
}

func (_c *IntegrationAggregate_GetID_Call) RunAndReturn(run func() core.IntegrationID) *IntegrationAggregate_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegration provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) GetIntegration(id core.IntegrationID) core.ThirdPartyIntegration {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegration")
	}

	var r0 core.ThirdPartyIntegration
	if returnFunc, ok := ret.Get(0).(func(core.IntegrationID) core.ThirdPartyIntegration); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.ThirdPartyIntegration)
		}
	}
	return r0
}

// IntegrationAggregate_GetIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegration'
type IntegrationAggregate_GetIntegration_Call struct {
	*mock.Call
}

// GetIntegration is a helper method to define mock.On call
//   - id
func (_e *IntegrationAggregate_Expecter) GetIntegration(id interface{}) *IntegrationAggregate_GetIntegration_Call {
	return &IntegrationAggregate_GetIntegration_Call{Call: _e.mock.On("GetIntegration", id)}
}

func (_c *IntegrationAggregate_GetIntegration_Call) Run(run func(id core.IntegrationID)) *IntegrationAggregate_GetIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.IntegrationID))
	})
	return _c
}

func (_c *IntegrationAggregate_GetIntegration_Call) Return(thirdPartyIntegration core.ThirdPartyIntegration) *IntegrationAggregate_GetIntegration_Call {
	_c.Call.Return(thirdPartyIntegration)
	return _c
}

func (_c *IntegrationAggregate_GetIntegration_Call) RunAndReturn(run func(id core.IntegrationID) core.ThirdPartyIntegration) *IntegrationAggregate_GetIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleInGroup provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) GetRoleInGroup(ctx context.Context, userID string, providerID string, groupID string) (string, error) {
	ret := _mock.Called(ctx, userID, providerID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleInGroup")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, userID, providerID, groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, userID, providerID, groupID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, providerID, groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_GetRoleInGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleInGroup'
type IntegrationAggregate_GetRoleInGroup_Call struct {
	*mock.Call
}

// GetRoleInGroup is a helper method to define mock.On call
//   - ctx
//   - userID
//   - providerID
//   - groupID
func (_e *IntegrationAggregate_Expecter) GetRoleInGroup(ctx interface{}, userID interface{}, providerID interface{}, groupID interface{}) *IntegrationAggregate_GetRoleInGroup_Call {
	return &IntegrationAggregate_GetRoleInGroup_Call{Call: _e.mock.On("GetRoleInGroup", ctx, userID, providerID, groupID)}
}

func (_c *IntegrationAggregate_GetRoleInGroup_Call) Run(run func(ctx context.Context, userID string, providerID string, groupID string)) *IntegrationAggregate_GetRoleInGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_GetRoleInGroup_Call) Return(s string, err error) *IntegrationAggregate_GetRoleInGroup_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *IntegrationAggregate_GetRoleInGroup_Call) RunAndReturn(run func(ctx context.Context, userID string, providerID string, groupID string) (string, error)) *IntegrationAggregate_GetRoleInGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleInProject provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) GetRoleInProject(ctx context.Context, userID string, providerID string, projectID string) (string, error) {
	ret := _mock.Called(ctx, userID, providerID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleInProject")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return returnFunc(ctx, userID, providerID, projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = returnFunc(ctx, userID, providerID, projectID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, providerID, projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_GetRoleInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleInProject'
type IntegrationAggregate_GetRoleInProject_Call struct {
	*mock.Call
}

// GetRoleInProject is a helper method to define mock.On call
//   - ctx
//   - userID
//   - providerID
//   - projectID
func (_e *IntegrationAggregate_Expecter) GetRoleInProject(ctx interface{}, userID interface{}, providerID interface{}, projectID interface{}) *IntegrationAggregate_GetRoleInProject_Call {
	return &IntegrationAggregate_GetRoleInProject_Call{Call: _e.mock.On("GetRoleInProject", ctx, userID, providerID, projectID)}
}

func (_c *IntegrationAggregate_GetRoleInProject_Call) Run(run func(ctx context.Context, userID string, providerID string, projectID string)) *IntegrationAggregate_GetRoleInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_GetRoleInProject_Call) Return(s string, err error) *IntegrationAggregate_GetRoleInProject_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *IntegrationAggregate_GetRoleInProject_Call) RunAndReturn(run func(ctx context.Context, userID string, providerID string, projectID string) (string, error)) *IntegrationAggregate_GetRoleInProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) GetUsers(org models.Org) []core.User {
	ret := _mock.Called(org)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []core.User
	if returnFunc, ok := ret.Get(0).(func(models.Org) []core.User); ok {
		r0 = returnFunc(org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.User)
		}
	}
	return r0
}

// IntegrationAggregate_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type IntegrationAggregate_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - org
func (_e *IntegrationAggregate_Expecter) GetUsers(org interface{}) *IntegrationAggregate_GetUsers_Call {
	return &IntegrationAggregate_GetUsers_Call{Call: _e.mock.On("GetUsers", org)}
}

func (_c *IntegrationAggregate_GetUsers_Call) Run(run func(org models.Org)) *IntegrationAggregate_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Org))
	})
	return _c
}

func (_c *IntegrationAggregate_GetUsers_Call) Return(users []core.User) *IntegrationAggregate_GetUsers_Call {
	_c.Call.Return(users)
	return _c
}

func (_c *IntegrationAggregate_GetUsers_Call) RunAndReturn(run func(org models.Org) []core.User) *IntegrationAggregate_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// HandleEvent provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) HandleEvent(event any) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_HandleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvent'
type IntegrationAggregate_HandleEvent_Call struct {
	*mock.Call
}

// HandleEvent is a helper method to define mock.On call
//   - event
func (_e *IntegrationAggregate_Expecter) HandleEvent(event interface{}) *IntegrationAggregate_HandleEvent_Call {
	return &IntegrationAggregate_HandleEvent_Call{Call: _e.mock.On("HandleEvent", event)}
}

func (_c *IntegrationAggregate_HandleEvent_Call) Run(run func(event any)) *IntegrationAggregate_HandleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *IntegrationAggregate_HandleEvent_Call) Return(err error) *IntegrationAggregate_HandleEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_HandleEvent_Call) RunAndReturn(run func(event any) error) *IntegrationAggregate_HandleEvent_Call {
	_c.Call.Return(run)
	return _c
}

// HandleWebhook provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) HandleWebhook(ctx core.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HandleWebhook")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_HandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWebhook'
type IntegrationAggregate_HandleWebhook_Call struct {
	*mock.Call
}

// HandleWebhook is a helper method to define mock.On call
//   - ctx
func (_e *IntegrationAggregate_Expecter) HandleWebhook(ctx interface{}) *IntegrationAggregate_HandleWebhook_Call {
	return &IntegrationAggregate_HandleWebhook_Call{Call: _e.mock.On("HandleWebhook", ctx)}
}

func (_c *IntegrationAggregate_HandleWebhook_Call) Run(run func(ctx core.Context)) *IntegrationAggregate_HandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context))
	})
	return _c
}

func (_c *IntegrationAggregate_HandleWebhook_Call) Return(err error) *IntegrationAggregate_HandleWebhook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_HandleWebhook_Call) RunAndReturn(run func(ctx core.Context) error) *IntegrationAggregate_HandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// HasAccessToExternalEntityProvider provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) HasAccessToExternalEntityProvider(ctx core.Context, externalEntityProviderID string) (bool, error) {
	ret := _mock.Called(ctx, externalEntityProviderID)

	if len(ret) == 0 {
		panic("no return value specified for HasAccessToExternalEntityProvider")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context, string) (bool, error)); ok {
		return returnFunc(ctx, externalEntityProviderID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context, string) bool); ok {
		r0 = returnFunc(ctx, externalEntityProviderID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context, string) error); ok {
		r1 = returnFunc(ctx, externalEntityProviderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_HasAccessToExternalEntityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAccessToExternalEntityProvider'
type IntegrationAggregate_HasAccessToExternalEntityProvider_Call struct {
	*mock.Call
}

// HasAccessToExternalEntityProvider is a helper method to define mock.On call
//   - ctx
//   - externalEntityProviderID
func (_e *IntegrationAggregate_Expecter) HasAccessToExternalEntityProvider(ctx interface{}, externalEntityProviderID interface{}) *IntegrationAggregate_HasAccessToExternalEntityProvider_Call {
	return &IntegrationAggregate_HasAccessToExternalEntityProvider_Call{Call: _e.mock.On("HasAccessToExternalEntityProvider", ctx, externalEntityProviderID)}
}

func (_c *IntegrationAggregate_HasAccessToExternalEntityProvider_Call) Run(run func(ctx core.Context, externalEntityProviderID string)) *IntegrationAggregate_HasAccessToExternalEntityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context), args[1].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_HasAccessToExternalEntityProvider_Call) Return(b bool, err error) *IntegrationAggregate_HasAccessToExternalEntityProvider_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *IntegrationAggregate_HasAccessToExternalEntityProvider_Call) RunAndReturn(run func(ctx core.Context, externalEntityProviderID string) (bool, error)) *IntegrationAggregate_HasAccessToExternalEntityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) ListGroups(ctx core.Context, userID string, providerID string) ([]models.Project, error) {
	ret := _mock.Called(ctx, userID, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 []models.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context, string, string) ([]models.Project, error)); ok {
		return returnFunc(ctx, userID, providerID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context, string, string) []models.Project); ok {
		r0 = returnFunc(ctx, userID, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, providerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type IntegrationAggregate_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx
//   - userID
//   - providerID
func (_e *IntegrationAggregate_Expecter) ListGroups(ctx interface{}, userID interface{}, providerID interface{}) *IntegrationAggregate_ListGroups_Call {
	return &IntegrationAggregate_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, userID, providerID)}
}

func (_c *IntegrationAggregate_ListGroups_Call) Run(run func(ctx core.Context, userID string, providerID string)) *IntegrationAggregate_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_ListGroups_Call) Return(projects []models.Project, err error) *IntegrationAggregate_ListGroups_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *IntegrationAggregate_ListGroups_Call) RunAndReturn(run func(ctx core.Context, userID string, providerID string) ([]models.Project, error)) *IntegrationAggregate_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgs provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) ListOrgs(ctx core.Context) ([]models.Org, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgs")
	}

	var r0 []models.Org
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context) ([]models.Org, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context) []models.Org); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Org)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_ListOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgs'
type IntegrationAggregate_ListOrgs_Call struct {
	*mock.Call
}

// ListOrgs is a helper method to define mock.On call
//   - ctx
func (_e *IntegrationAggregate_Expecter) ListOrgs(ctx interface{}) *IntegrationAggregate_ListOrgs_Call {
	return &IntegrationAggregate_ListOrgs_Call{Call: _e.mock.On("ListOrgs", ctx)}
}

func (_c *IntegrationAggregate_ListOrgs_Call) Run(run func(ctx core.Context)) *IntegrationAggregate_ListOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context))
	})
	return _c
}

func (_c *IntegrationAggregate_ListOrgs_Call) Return(orgs []models.Org, err error) *IntegrationAggregate_ListOrgs_Call {
	_c.Call.Return(orgs, err)
	return _c
}

func (_c *IntegrationAggregate_ListOrgs_Call) RunAndReturn(run func(ctx core.Context) ([]models.Org, error)) *IntegrationAggregate_ListOrgs_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) ListProjects(ctx core.Context, userID string, providerID string, groupID string) ([]models.Asset, error) {
	ret := _mock.Called(ctx, userID, providerID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context, string, string, string) ([]models.Asset, error)); ok {
		return returnFunc(ctx, userID, providerID, groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context, string, string, string) []models.Asset); ok {
		r0 = returnFunc(ctx, userID, providerID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, userID, providerID, groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type IntegrationAggregate_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx
//   - userID
//   - providerID
//   - groupID
func (_e *IntegrationAggregate_Expecter) ListProjects(ctx interface{}, userID interface{}, providerID interface{}, groupID interface{}) *IntegrationAggregate_ListProjects_Call {
	return &IntegrationAggregate_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, userID, providerID, groupID)}
}

func (_c *IntegrationAggregate_ListProjects_Call) Run(run func(ctx core.Context, userID string, providerID string, groupID string)) *IntegrationAggregate_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *IntegrationAggregate_ListProjects_Call) Return(assets []models.Asset, err error) *IntegrationAggregate_ListProjects_Call {
	_c.Call.Return(assets, err)
	return _c
}

func (_c *IntegrationAggregate_ListProjects_Call) RunAndReturn(run func(ctx core.Context, userID string, providerID string, groupID string) ([]models.Asset, error)) *IntegrationAggregate_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) ListRepositories(ctx core.Context) ([]core.Repository, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 []core.Repository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context) ([]core.Repository, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context) []core.Repository); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IntegrationAggregate_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type IntegrationAggregate_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
//   - ctx
func (_e *IntegrationAggregate_Expecter) ListRepositories(ctx interface{}) *IntegrationAggregate_ListRepositories_Call {
	return &IntegrationAggregate_ListRepositories_Call{Call: _e.mock.On("ListRepositories", ctx)}
}

func (_c *IntegrationAggregate_ListRepositories_Call) Run(run func(ctx core.Context)) *IntegrationAggregate_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context))
	})
	return _c
}

func (_c *IntegrationAggregate_ListRepositories_Call) Return(repositorys []core.Repository, err error) *IntegrationAggregate_ListRepositories_Call {
	_c.Call.Return(repositorys, err)
	return _c
}

func (_c *IntegrationAggregate_ListRepositories_Call) RunAndReturn(run func(ctx core.Context) ([]core.Repository, error)) *IntegrationAggregate_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// ReopenIssue provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) ReopenIssue(ctx context.Context, repoId string, vuln models.Vuln) error {
	ret := _mock.Called(ctx, repoId, vuln)

	if len(ret) == 0 {
		panic("no return value specified for ReopenIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, models.Vuln) error); ok {
		r0 = returnFunc(ctx, repoId, vuln)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_ReopenIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReopenIssue'
type IntegrationAggregate_ReopenIssue_Call struct {
	*mock.Call
}

// ReopenIssue is a helper method to define mock.On call
//   - ctx
//   - repoId
//   - vuln
func (_e *IntegrationAggregate_Expecter) ReopenIssue(ctx interface{}, repoId interface{}, vuln interface{}) *IntegrationAggregate_ReopenIssue_Call {
	return &IntegrationAggregate_ReopenIssue_Call{Call: _e.mock.On("ReopenIssue", ctx, repoId, vuln)}
}

func (_c *IntegrationAggregate_ReopenIssue_Call) Run(run func(ctx context.Context, repoId string, vuln models.Vuln)) *IntegrationAggregate_ReopenIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Vuln))
	})
	return _c
}

func (_c *IntegrationAggregate_ReopenIssue_Call) Return(err error) *IntegrationAggregate_ReopenIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_ReopenIssue_Call) RunAndReturn(run func(ctx context.Context, repoId string, vuln models.Vuln) error) *IntegrationAggregate_ReopenIssue_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIssue provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) UpdateIssue(ctx context.Context, asset models.Asset, repoId string, vuln models.Vuln) error {
	ret := _mock.Called(ctx, asset, repoId, vuln)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Asset, string, models.Vuln) error); ok {
		r0 = returnFunc(ctx, asset, repoId, vuln)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IntegrationAggregate_UpdateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIssue'
type IntegrationAggregate_UpdateIssue_Call struct {
	*mock.Call
}

// UpdateIssue is a helper method to define mock.On call
//   - ctx
//   - asset
//   - repoId
//   - vuln
func (_e *IntegrationAggregate_Expecter) UpdateIssue(ctx interface{}, asset interface{}, repoId interface{}, vuln interface{}) *IntegrationAggregate_UpdateIssue_Call {
	return &IntegrationAggregate_UpdateIssue_Call{Call: _e.mock.On("UpdateIssue", ctx, asset, repoId, vuln)}
}

func (_c *IntegrationAggregate_UpdateIssue_Call) Run(run func(ctx context.Context, asset models.Asset, repoId string, vuln models.Vuln)) *IntegrationAggregate_UpdateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Asset), args[2].(string), args[3].(models.Vuln))
	})
	return _c
}

func (_c *IntegrationAggregate_UpdateIssue_Call) Return(err error) *IntegrationAggregate_UpdateIssue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IntegrationAggregate_UpdateIssue_Call) RunAndReturn(run func(ctx context.Context, asset models.Asset, repoId string, vuln models.Vuln) error) *IntegrationAggregate_UpdateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// WantsToHandleWebhook provides a mock function for the type IntegrationAggregate
func (_mock *IntegrationAggregate) WantsToHandleWebhook(ctx core.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WantsToHandleWebhook")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(core.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// IntegrationAggregate_WantsToHandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WantsToHandleWebhook'
type IntegrationAggregate_WantsToHandleWebhook_Call struct {
	*mock.Call
}

// WantsToHandleWebhook is a helper method to define mock.On call
//   - ctx
func (_e *IntegrationAggregate_Expecter) WantsToHandleWebhook(ctx interface{}) *IntegrationAggregate_WantsToHandleWebhook_Call {
	return &IntegrationAggregate_WantsToHandleWebhook_Call{Call: _e.mock.On("WantsToHandleWebhook", ctx)}
}

func (_c *IntegrationAggregate_WantsToHandleWebhook_Call) Run(run func(ctx core.Context)) *IntegrationAggregate_WantsToHandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Context))
	})
	return _c
}

func (_c *IntegrationAggregate_WantsToHandleWebhook_Call) Return(b bool) *IntegrationAggregate_WantsToHandleWebhook_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *IntegrationAggregate_WantsToHandleWebhook_Call) RunAndReturn(run func(ctx core.Context) bool) *IntegrationAggregate_WantsToHandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}
