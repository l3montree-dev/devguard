// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewOrgService creates a new instance of OrgService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgService {
	mock := &OrgService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OrgService is an autogenerated mock type for the OrgService type
type OrgService struct {
	mock.Mock
}

type OrgService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrgService) EXPECT() *OrgService_Expecter {
	return &OrgService_Expecter{mock: &_m.Mock}
}

// CreateExternalEntityOrganization provides a mock function for the type OrgService
func (_mock *OrgService) CreateExternalEntityOrganization(ctx core.Context, externalEntitySlug core.ExternalEntitySlug) (*models.Org, error) {
	ret := _mock.Called(ctx, externalEntitySlug)

	if len(ret) == 0 {
		panic("no return value specified for CreateExternalEntityOrganization")
	}

	var r0 *models.Org
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.Context, core.ExternalEntitySlug) (*models.Org, error)); ok {
		return returnFunc(ctx, externalEntitySlug)
	}
	if returnFunc, ok := ret.Get(0).(func(core.Context, core.ExternalEntitySlug) *models.Org); ok {
		r0 = returnFunc(ctx, externalEntitySlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Org)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.Context, core.ExternalEntitySlug) error); ok {
		r1 = returnFunc(ctx, externalEntitySlug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrgService_CreateExternalEntityOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExternalEntityOrganization'
type OrgService_CreateExternalEntityOrganization_Call struct {
	*mock.Call
}

// CreateExternalEntityOrganization is a helper method to define mock.On call
//   - ctx core.Context
//   - externalEntitySlug core.ExternalEntitySlug
func (_e *OrgService_Expecter) CreateExternalEntityOrganization(ctx interface{}, externalEntitySlug interface{}) *OrgService_CreateExternalEntityOrganization_Call {
	return &OrgService_CreateExternalEntityOrganization_Call{Call: _e.mock.On("CreateExternalEntityOrganization", ctx, externalEntitySlug)}
}

func (_c *OrgService_CreateExternalEntityOrganization_Call) Run(run func(ctx core.Context, externalEntitySlug core.ExternalEntitySlug)) *OrgService_CreateExternalEntityOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Context
		if args[0] != nil {
			arg0 = args[0].(core.Context)
		}
		var arg1 core.ExternalEntitySlug
		if args[1] != nil {
			arg1 = args[1].(core.ExternalEntitySlug)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrgService_CreateExternalEntityOrganization_Call) Return(org *models.Org, err error) *OrgService_CreateExternalEntityOrganization_Call {
	_c.Call.Return(org, err)
	return _c
}

func (_c *OrgService_CreateExternalEntityOrganization_Call) RunAndReturn(run func(ctx core.Context, externalEntitySlug core.ExternalEntitySlug) (*models.Org, error)) *OrgService_CreateExternalEntityOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function for the type OrgService
func (_mock *OrgService) CreateOrganization(ctx core.Context, organization models.Org) error {
	ret := _mock.Called(ctx, organization)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Context, models.Org) error); ok {
		r0 = returnFunc(ctx, organization)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrgService_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type OrgService_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx core.Context
//   - organization models.Org
func (_e *OrgService_Expecter) CreateOrganization(ctx interface{}, organization interface{}) *OrgService_CreateOrganization_Call {
	return &OrgService_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, organization)}
}

func (_c *OrgService_CreateOrganization_Call) Run(run func(ctx core.Context, organization models.Org)) *OrgService_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Context
		if args[0] != nil {
			arg0 = args[0].(core.Context)
		}
		var arg1 models.Org
		if args[1] != nil {
			arg1 = args[1].(models.Org)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrgService_CreateOrganization_Call) Return(err error) *OrgService_CreateOrganization_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrgService_CreateOrganization_Call) RunAndReturn(run func(ctx core.Context, organization models.Org) error) *OrgService_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function for the type OrgService
func (_mock *OrgService) ReadBySlug(slug string) (*models.Org, error) {
	ret := _mock.Called(slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 *models.Org
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.Org, error)); ok {
		return returnFunc(slug)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.Org); ok {
		r0 = returnFunc(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Org)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrgService_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type OrgService_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - slug string
func (_e *OrgService_Expecter) ReadBySlug(slug interface{}) *OrgService_ReadBySlug_Call {
	return &OrgService_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", slug)}
}

func (_c *OrgService_ReadBySlug_Call) Run(run func(slug string)) *OrgService_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrgService_ReadBySlug_Call) Return(org *models.Org, err error) *OrgService_ReadBySlug_Call {
	_c.Call.Return(org, err)
	return _c
}

func (_c *OrgService_ReadBySlug_Call) RunAndReturn(run func(slug string) (*models.Org, error)) *OrgService_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}
