// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewComponentService creates a new instance of ComponentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentService {
	mock := &ComponentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ComponentService is an autogenerated mock type for the ComponentService type
type ComponentService struct {
	mock.Mock
}

type ComponentService_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentService) EXPECT() *ComponentService_Expecter {
	return &ComponentService_Expecter{mock: &_m.Mock}
}

// GetAndSaveLicenseInformation provides a mock function for the type ComponentService
func (_mock *ComponentService) GetAndSaveLicenseInformation(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.Component, error) {
	ret := _mock.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAndSaveLicenseInformation")
	}

	var r0 []models.Component
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.Component, error)); ok {
		return returnFunc(assetVersionName, assetID, scannerID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.Component); ok {
		r0 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ComponentService_GetAndSaveLicenseInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAndSaveLicenseInformation'
type ComponentService_GetAndSaveLicenseInformation_Call struct {
	*mock.Call
}

// GetAndSaveLicenseInformation is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *ComponentService_Expecter) GetAndSaveLicenseInformation(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *ComponentService_GetAndSaveLicenseInformation_Call {
	return &ComponentService_GetAndSaveLicenseInformation_Call{Call: _e.mock.On("GetAndSaveLicenseInformation", assetVersionName, assetID, scannerID)}
}

func (_c *ComponentService_GetAndSaveLicenseInformation_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *ComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ComponentService_GetAndSaveLicenseInformation_Call) Return(components []models.Component, err error) *ComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Return(components, err)
	return _c
}

func (_c *ComponentService_GetAndSaveLicenseInformation_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.Component, error)) *ComponentService_GetAndSaveLicenseInformation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicense provides a mock function for the type ComponentService
func (_mock *ComponentService) GetLicense(component models.Component) (models.Component, error) {
	ret := _mock.Called(component)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 models.Component
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.Component) (models.Component, error)); ok {
		return returnFunc(component)
	}
	if returnFunc, ok := ret.Get(0).(func(models.Component) models.Component); ok {
		r0 = returnFunc(component)
	} else {
		r0 = ret.Get(0).(models.Component)
	}
	if returnFunc, ok := ret.Get(1).(func(models.Component) error); ok {
		r1 = returnFunc(component)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ComponentService_GetLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicense'
type ComponentService_GetLicense_Call struct {
	*mock.Call
}

// GetLicense is a helper method to define mock.On call
//   - component models.Component
func (_e *ComponentService_Expecter) GetLicense(component interface{}) *ComponentService_GetLicense_Call {
	return &ComponentService_GetLicense_Call{Call: _e.mock.On("GetLicense", component)}
}

func (_c *ComponentService_GetLicense_Call) Run(run func(component models.Component)) *ComponentService_GetLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Component
		if args[0] != nil {
			arg0 = args[0].(models.Component)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ComponentService_GetLicense_Call) Return(component1 models.Component, err error) *ComponentService_GetLicense_Call {
	_c.Call.Return(component1, err)
	return _c
}

func (_c *ComponentService_GetLicense_Call) RunAndReturn(run func(component models.Component) (models.Component, error)) *ComponentService_GetLicense_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentProjectInformation provides a mock function for the type ComponentService
func (_mock *ComponentService) RefreshComponentProjectInformation(project models.ComponentProject) {
	_mock.Called(project)
	return
}

// ComponentService_RefreshComponentProjectInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentProjectInformation'
type ComponentService_RefreshComponentProjectInformation_Call struct {
	*mock.Call
}

// RefreshComponentProjectInformation is a helper method to define mock.On call
//   - project models.ComponentProject
func (_e *ComponentService_Expecter) RefreshComponentProjectInformation(project interface{}) *ComponentService_RefreshComponentProjectInformation_Call {
	return &ComponentService_RefreshComponentProjectInformation_Call{Call: _e.mock.On("RefreshComponentProjectInformation", project)}
}

func (_c *ComponentService_RefreshComponentProjectInformation_Call) Run(run func(project models.ComponentProject)) *ComponentService_RefreshComponentProjectInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.ComponentProject
		if args[0] != nil {
			arg0 = args[0].(models.ComponentProject)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ComponentService_RefreshComponentProjectInformation_Call) Return() *ComponentService_RefreshComponentProjectInformation_Call {
	_c.Call.Return()
	return _c
}

func (_c *ComponentService_RefreshComponentProjectInformation_Call) RunAndReturn(run func(project models.ComponentProject)) *ComponentService_RefreshComponentProjectInformation_Call {
	_c.Run(run)
	return _c
}
