// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Expecter struct {
	mock *mock.Mock
}

func (_m *Node) EXPECT() *Node_Expecter {
	return &Node_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function for the type Node
func (_mock *Node) GetID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Node_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type Node_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *Node_Expecter) GetID() *Node_GetID_Call {
	return &Node_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *Node_GetID_Call) Run(run func()) *Node_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetID_Call) Return(s string) *Node_GetID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Node_GetID_Call) RunAndReturn(run func() string) *Node_GetID_Call {
	_c.Call.Return(run)
	return _c
}
