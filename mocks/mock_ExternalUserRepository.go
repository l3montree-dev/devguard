// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewExternalUserRepository creates a new instance of ExternalUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExternalUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExternalUserRepository {
	mock := &ExternalUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExternalUserRepository is an autogenerated mock type for the ExternalUserRepository type
type ExternalUserRepository struct {
	mock.Mock
}

type ExternalUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExternalUserRepository) EXPECT() *ExternalUserRepository_Expecter {
	return &ExternalUserRepository_Expecter{mock: &_m.Mock}
}

// FindByOrgID provides a mock function for the type ExternalUserRepository
func (_mock *ExternalUserRepository) FindByOrgID(tx core.DB, orgID uuid.UUID) ([]models.ExternalUser, error) {
	ret := _mock.Called(tx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrgID")
	}

	var r0 []models.ExternalUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) ([]models.ExternalUser, error)); ok {
		return returnFunc(tx, orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) []models.ExternalUser); ok {
		r0 = returnFunc(tx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExternalUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID) error); ok {
		r1 = returnFunc(tx, orgID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExternalUserRepository_FindByOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrgID'
type ExternalUserRepository_FindByOrgID_Call struct {
	*mock.Call
}

// FindByOrgID is a helper method to define mock.On call
//   - tx
//   - orgID
func (_e *ExternalUserRepository_Expecter) FindByOrgID(tx interface{}, orgID interface{}) *ExternalUserRepository_FindByOrgID_Call {
	return &ExternalUserRepository_FindByOrgID_Call{Call: _e.mock.On("FindByOrgID", tx, orgID)}
}

func (_c *ExternalUserRepository_FindByOrgID_Call) Run(run func(tx core.DB, orgID uuid.UUID)) *ExternalUserRepository_FindByOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExternalUserRepository_FindByOrgID_Call) Return(externalUsers []models.ExternalUser, err error) *ExternalUserRepository_FindByOrgID_Call {
	_c.Call.Return(externalUsers, err)
	return _c
}

func (_c *ExternalUserRepository_FindByOrgID_Call) RunAndReturn(run func(tx core.DB, orgID uuid.UUID) ([]models.ExternalUser, error)) *ExternalUserRepository_FindByOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type ExternalUserRepository
func (_mock *ExternalUserRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ExternalUserRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type ExternalUserRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *ExternalUserRepository_Expecter) GetDB(tx interface{}) *ExternalUserRepository_GetDB_Call {
	return &ExternalUserRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *ExternalUserRepository_GetDB_Call) Run(run func(tx core.DB)) *ExternalUserRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *ExternalUserRepository_GetDB_Call) Return(v core.DB) *ExternalUserRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ExternalUserRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *ExternalUserRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type ExternalUserRepository
func (_mock *ExternalUserRepository) Save(db core.DB, user *models.ExternalUser) error {
	ret := _mock.Called(db, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.ExternalUser) error); ok {
		r0 = returnFunc(db, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExternalUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ExternalUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db
//   - user
func (_e *ExternalUserRepository_Expecter) Save(db interface{}, user interface{}) *ExternalUserRepository_Save_Call {
	return &ExternalUserRepository_Save_Call{Call: _e.mock.On("Save", db, user)}
}

func (_c *ExternalUserRepository_Save_Call) Run(run func(db core.DB, user *models.ExternalUser)) *ExternalUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.ExternalUser))
	})
	return _c
}

func (_c *ExternalUserRepository_Save_Call) Return(err error) *ExternalUserRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExternalUserRepository_Save_Call) RunAndReturn(run func(db core.DB, user *models.ExternalUser) error) *ExternalUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
