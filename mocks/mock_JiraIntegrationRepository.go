// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewJiraIntegrationRepository creates a new instance of JiraIntegrationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJiraIntegrationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *JiraIntegrationRepository {
	mock := &JiraIntegrationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JiraIntegrationRepository is an autogenerated mock type for the JiraIntegrationRepository type
type JiraIntegrationRepository struct {
	mock.Mock
}

type JiraIntegrationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *JiraIntegrationRepository) EXPECT() *JiraIntegrationRepository_Expecter {
	return &JiraIntegrationRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type JiraIntegrationRepository
func (_mock *JiraIntegrationRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JiraIntegrationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type JiraIntegrationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx core.DB
//   - id uuid.UUID
func (_e *JiraIntegrationRepository_Expecter) Delete(tx interface{}, id interface{}) *JiraIntegrationRepository_Delete_Call {
	return &JiraIntegrationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *JiraIntegrationRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *JiraIntegrationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JiraIntegrationRepository_Delete_Call) Return(err error) *JiraIntegrationRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JiraIntegrationRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *JiraIntegrationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrganizationID provides a mock function for the type JiraIntegrationRepository
func (_mock *JiraIntegrationRepository) FindByOrganizationID(orgID uuid.UUID) ([]models.JiraIntegration, error) {
	ret := _mock.Called(orgID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrganizationID")
	}

	var r0 []models.JiraIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.JiraIntegration, error)); ok {
		return returnFunc(orgID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.JiraIntegration); ok {
		r0 = returnFunc(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JiraIntegration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(orgID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JiraIntegrationRepository_FindByOrganizationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrganizationID'
type JiraIntegrationRepository_FindByOrganizationID_Call struct {
	*mock.Call
}

// FindByOrganizationID is a helper method to define mock.On call
//   - orgID uuid.UUID
func (_e *JiraIntegrationRepository_Expecter) FindByOrganizationID(orgID interface{}) *JiraIntegrationRepository_FindByOrganizationID_Call {
	return &JiraIntegrationRepository_FindByOrganizationID_Call{Call: _e.mock.On("FindByOrganizationID", orgID)}
}

func (_c *JiraIntegrationRepository_FindByOrganizationID_Call) Run(run func(orgID uuid.UUID)) *JiraIntegrationRepository_FindByOrganizationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JiraIntegrationRepository_FindByOrganizationID_Call) Return(jiraIntegrations []models.JiraIntegration, err error) *JiraIntegrationRepository_FindByOrganizationID_Call {
	_c.Call.Return(jiraIntegrations, err)
	return _c
}

func (_c *JiraIntegrationRepository_FindByOrganizationID_Call) RunAndReturn(run func(orgID uuid.UUID) ([]models.JiraIntegration, error)) *JiraIntegrationRepository_FindByOrganizationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientByIntegrationID provides a mock function for the type JiraIntegrationRepository
func (_mock *JiraIntegrationRepository) GetClientByIntegrationID(integrationID uuid.UUID) (models.JiraIntegration, error) {
	ret := _mock.Called(integrationID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByIntegrationID")
	}

	var r0 models.JiraIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.JiraIntegration, error)); ok {
		return returnFunc(integrationID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.JiraIntegration); ok {
		r0 = returnFunc(integrationID)
	} else {
		r0 = ret.Get(0).(models.JiraIntegration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(integrationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JiraIntegrationRepository_GetClientByIntegrationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByIntegrationID'
type JiraIntegrationRepository_GetClientByIntegrationID_Call struct {
	*mock.Call
}

// GetClientByIntegrationID is a helper method to define mock.On call
//   - integrationID uuid.UUID
func (_e *JiraIntegrationRepository_Expecter) GetClientByIntegrationID(integrationID interface{}) *JiraIntegrationRepository_GetClientByIntegrationID_Call {
	return &JiraIntegrationRepository_GetClientByIntegrationID_Call{Call: _e.mock.On("GetClientByIntegrationID", integrationID)}
}

func (_c *JiraIntegrationRepository_GetClientByIntegrationID_Call) Run(run func(integrationID uuid.UUID)) *JiraIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JiraIntegrationRepository_GetClientByIntegrationID_Call) Return(jiraIntegration models.JiraIntegration, err error) *JiraIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Return(jiraIntegration, err)
	return _c
}

func (_c *JiraIntegrationRepository_GetClientByIntegrationID_Call) RunAndReturn(run func(integrationID uuid.UUID) (models.JiraIntegration, error)) *JiraIntegrationRepository_GetClientByIntegrationID_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type JiraIntegrationRepository
func (_mock *JiraIntegrationRepository) Read(id uuid.UUID) (models.JiraIntegration, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.JiraIntegration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.JiraIntegration, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.JiraIntegration); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.JiraIntegration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JiraIntegrationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type JiraIntegrationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *JiraIntegrationRepository_Expecter) Read(id interface{}) *JiraIntegrationRepository_Read_Call {
	return &JiraIntegrationRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *JiraIntegrationRepository_Read_Call) Run(run func(id uuid.UUID)) *JiraIntegrationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JiraIntegrationRepository_Read_Call) Return(jiraIntegration models.JiraIntegration, err error) *JiraIntegrationRepository_Read_Call {
	_c.Call.Return(jiraIntegration, err)
	return _c
}

func (_c *JiraIntegrationRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.JiraIntegration, error)) *JiraIntegrationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type JiraIntegrationRepository
func (_mock *JiraIntegrationRepository) Save(tx core.DB, model *models.JiraIntegration) error {
	ret := _mock.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.JiraIntegration) error); ok {
		r0 = returnFunc(tx, model)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JiraIntegrationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type JiraIntegrationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - model *models.JiraIntegration
func (_e *JiraIntegrationRepository_Expecter) Save(tx interface{}, model interface{}) *JiraIntegrationRepository_Save_Call {
	return &JiraIntegrationRepository_Save_Call{Call: _e.mock.On("Save", tx, model)}
}

func (_c *JiraIntegrationRepository_Save_Call) Run(run func(tx core.DB, model *models.JiraIntegration)) *JiraIntegrationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.JiraIntegration
		if args[1] != nil {
			arg1 = args[1].(*models.JiraIntegration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JiraIntegrationRepository_Save_Call) Return(err error) *JiraIntegrationRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JiraIntegrationRepository_Save_Call) RunAndReturn(run func(tx core.DB, model *models.JiraIntegration) error) *JiraIntegrationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
