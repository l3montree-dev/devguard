// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewCweRepository creates a new instance of CweRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCweRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CweRepository {
	mock := &CweRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CweRepository is an autogenerated mock type for the CweRepository type
type CweRepository struct {
	mock.Mock
}

type CweRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CweRepository) EXPECT() *CweRepository_Expecter {
	return &CweRepository_Expecter{mock: &_m.Mock}
}

// GetAllCWEsID provides a mock function for the type CweRepository
func (_mock *CweRepository) GetAllCWEsID() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCWEsID")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CweRepository_GetAllCWEsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCWEsID'
type CweRepository_GetAllCWEsID_Call struct {
	*mock.Call
}

// GetAllCWEsID is a helper method to define mock.On call
func (_e *CweRepository_Expecter) GetAllCWEsID() *CweRepository_GetAllCWEsID_Call {
	return &CweRepository_GetAllCWEsID_Call{Call: _e.mock.On("GetAllCWEsID")}
}

func (_c *CweRepository_GetAllCWEsID_Call) Run(run func()) *CweRepository_GetAllCWEsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CweRepository_GetAllCWEsID_Call) Return(strings []string, err error) *CweRepository_GetAllCWEsID_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *CweRepository_GetAllCWEsID_Call) RunAndReturn(run func() ([]string, error)) *CweRepository_GetAllCWEsID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type CweRepository
func (_mock *CweRepository) SaveBatch(tx core.DB, cwes []models.CWE) error {
	ret := _mock.Called(tx, cwes)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.CWE) error); ok {
		r0 = returnFunc(tx, cwes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CweRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type CweRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - cwes
func (_e *CweRepository_Expecter) SaveBatch(tx interface{}, cwes interface{}) *CweRepository_SaveBatch_Call {
	return &CweRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, cwes)}
}

func (_c *CweRepository_SaveBatch_Call) Run(run func(tx core.DB, cwes []models.CWE)) *CweRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.CWE))
	})
	return _c
}

func (_c *CweRepository_SaveBatch_Call) Return(err error) *CweRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CweRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, cwes []models.CWE) error) *CweRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}
