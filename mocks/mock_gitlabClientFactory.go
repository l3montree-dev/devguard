// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewGitlabClientFactory creates a new instance of GitlabClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitlabClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitlabClientFactory {
	mock := &GitlabClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitlabClientFactory is an autogenerated mock type for the GitlabClientFactory type
type GitlabClientFactory struct {
	mock.Mock
}

type GitlabClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *GitlabClientFactory) EXPECT() *GitlabClientFactory_Expecter {
	return &GitlabClientFactory_Expecter{mock: &_m.Mock}
}

// FromAccessToken provides a mock function for the type GitlabClientFactory
func (_mock *GitlabClientFactory) FromAccessToken(accessToken string, baseUrl string) (core.GitlabClientFacade, error) {
	ret := _mock.Called(accessToken, baseUrl)

	if len(ret) == 0 {
		panic("no return value specified for FromAccessToken")
	}

	var r0 core.GitlabClientFacade
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (core.GitlabClientFacade, error)); ok {
		return returnFunc(accessToken, baseUrl)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) core.GitlabClientFacade); ok {
		r0 = returnFunc(accessToken, baseUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.GitlabClientFacade)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(accessToken, baseUrl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFactory_FromAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromAccessToken'
type GitlabClientFactory_FromAccessToken_Call struct {
	*mock.Call
}

// FromAccessToken is a helper method to define mock.On call
//   - accessToken
//   - baseUrl
func (_e *GitlabClientFactory_Expecter) FromAccessToken(accessToken interface{}, baseUrl interface{}) *GitlabClientFactory_FromAccessToken_Call {
	return &GitlabClientFactory_FromAccessToken_Call{Call: _e.mock.On("FromAccessToken", accessToken, baseUrl)}
}

func (_c *GitlabClientFactory_FromAccessToken_Call) Run(run func(accessToken string, baseUrl string)) *GitlabClientFactory_FromAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *GitlabClientFactory_FromAccessToken_Call) Return(gitlabClientFacade core.GitlabClientFacade, err error) *GitlabClientFactory_FromAccessToken_Call {
	_c.Call.Return(gitlabClientFacade, err)
	return _c
}

func (_c *GitlabClientFactory_FromAccessToken_Call) RunAndReturn(run func(accessToken string, baseUrl string) (core.GitlabClientFacade, error)) *GitlabClientFactory_FromAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// FromIntegration provides a mock function for the type GitlabClientFactory
func (_mock *GitlabClientFactory) FromIntegration(integration models.GitLabIntegration) (core.GitlabClientFacade, error) {
	ret := _mock.Called(integration)

	if len(ret) == 0 {
		panic("no return value specified for FromIntegration")
	}

	var r0 core.GitlabClientFacade
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.GitLabIntegration) (core.GitlabClientFacade, error)); ok {
		return returnFunc(integration)
	}
	if returnFunc, ok := ret.Get(0).(func(models.GitLabIntegration) core.GitlabClientFacade); ok {
		r0 = returnFunc(integration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.GitlabClientFacade)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(models.GitLabIntegration) error); ok {
		r1 = returnFunc(integration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFactory_FromIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromIntegration'
type GitlabClientFactory_FromIntegration_Call struct {
	*mock.Call
}

// FromIntegration is a helper method to define mock.On call
//   - integration
func (_e *GitlabClientFactory_Expecter) FromIntegration(integration interface{}) *GitlabClientFactory_FromIntegration_Call {
	return &GitlabClientFactory_FromIntegration_Call{Call: _e.mock.On("FromIntegration", integration)}
}

func (_c *GitlabClientFactory_FromIntegration_Call) Run(run func(integration models.GitLabIntegration)) *GitlabClientFactory_FromIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.GitLabIntegration))
	})
	return _c
}

func (_c *GitlabClientFactory_FromIntegration_Call) Return(gitlabClientFacade core.GitlabClientFacade, err error) *GitlabClientFactory_FromIntegration_Call {
	_c.Call.Return(gitlabClientFacade, err)
	return _c
}

func (_c *GitlabClientFactory_FromIntegration_Call) RunAndReturn(run func(integration models.GitLabIntegration) (core.GitlabClientFacade, error)) *GitlabClientFactory_FromIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// FromIntegrationUUID provides a mock function for the type GitlabClientFactory
func (_mock *GitlabClientFactory) FromIntegrationUUID(id uuid.UUID) (core.GitlabClientFacade, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FromIntegrationUUID")
	}

	var r0 core.GitlabClientFacade
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (core.GitlabClientFacade, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) core.GitlabClientFacade); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.GitlabClientFacade)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFactory_FromIntegrationUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromIntegrationUUID'
type GitlabClientFactory_FromIntegrationUUID_Call struct {
	*mock.Call
}

// FromIntegrationUUID is a helper method to define mock.On call
//   - id
func (_e *GitlabClientFactory_Expecter) FromIntegrationUUID(id interface{}) *GitlabClientFactory_FromIntegrationUUID_Call {
	return &GitlabClientFactory_FromIntegrationUUID_Call{Call: _e.mock.On("FromIntegrationUUID", id)}
}

func (_c *GitlabClientFactory_FromIntegrationUUID_Call) Run(run func(id uuid.UUID)) *GitlabClientFactory_FromIntegrationUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *GitlabClientFactory_FromIntegrationUUID_Call) Return(gitlabClientFacade core.GitlabClientFacade, err error) *GitlabClientFactory_FromIntegrationUUID_Call {
	_c.Call.Return(gitlabClientFacade, err)
	return _c
}

func (_c *GitlabClientFactory_FromIntegrationUUID_Call) RunAndReturn(run func(id uuid.UUID) (core.GitlabClientFacade, error)) *GitlabClientFactory_FromIntegrationUUID_Call {
	_c.Call.Return(run)
	return _c
}

// FromOauth2Token provides a mock function for the type GitlabClientFactory
func (_mock *GitlabClientFactory) FromOauth2Token(token models.GitLabOauth2Token, enableClientCache bool) (core.GitlabClientFacade, error) {
	ret := _mock.Called(token, enableClientCache)

	if len(ret) == 0 {
		panic("no return value specified for FromOauth2Token")
	}

	var r0 core.GitlabClientFacade
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.GitLabOauth2Token, bool) (core.GitlabClientFacade, error)); ok {
		return returnFunc(token, enableClientCache)
	}
	if returnFunc, ok := ret.Get(0).(func(models.GitLabOauth2Token, bool) core.GitlabClientFacade); ok {
		r0 = returnFunc(token, enableClientCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.GitlabClientFacade)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(models.GitLabOauth2Token, bool) error); ok {
		r1 = returnFunc(token, enableClientCache)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitlabClientFactory_FromOauth2Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromOauth2Token'
type GitlabClientFactory_FromOauth2Token_Call struct {
	*mock.Call
}

// FromOauth2Token is a helper method to define mock.On call
//   - token
//   - enableClientCache
func (_e *GitlabClientFactory_Expecter) FromOauth2Token(token interface{}, enableClientCache interface{}) *GitlabClientFactory_FromOauth2Token_Call {
	return &GitlabClientFactory_FromOauth2Token_Call{Call: _e.mock.On("FromOauth2Token", token, enableClientCache)}
}

func (_c *GitlabClientFactory_FromOauth2Token_Call) Run(run func(token models.GitLabOauth2Token, enableClientCache bool)) *GitlabClientFactory_FromOauth2Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.GitLabOauth2Token), args[1].(bool))
	})
	return _c
}

func (_c *GitlabClientFactory_FromOauth2Token_Call) Return(gitlabClientFacade core.GitlabClientFacade, err error) *GitlabClientFactory_FromOauth2Token_Call {
	_c.Call.Return(gitlabClientFacade, err)
	return _c
}

func (_c *GitlabClientFactory_FromOauth2Token_Call) RunAndReturn(run func(token models.GitLabOauth2Token, enableClientCache bool) (core.GitlabClientFacade, error)) *GitlabClientFactory_FromOauth2Token_Call {
	_c.Call.Return(run)
	return _c
}
