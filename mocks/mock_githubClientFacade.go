// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/go-github/v62/github"
	mock "github.com/stretchr/testify/mock"
)

// NewGithubClientFacade creates a new instance of GithubClientFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGithubClientFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *GithubClientFacade {
	mock := &GithubClientFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GithubClientFacade is an autogenerated mock type for the githubClientFacade type
type GithubClientFacade struct {
	mock.Mock
}

type GithubClientFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GithubClientFacade) EXPECT() *GithubClientFacade_Expecter {
	return &GithubClientFacade_Expecter{mock: &_m.Mock}
}

// CreateIssue provides a mock function for the type GithubClientFacade
func (_mock *GithubClientFacade) CreateIssue(ctx context.Context, owner string, repo string, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, issue)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *github.Issue
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.IssueRequest) (*github.Issue, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, issue)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *github.IssueRequest) *github.Issue); ok {
		r0 = returnFunc(ctx, owner, repo, issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *github.IssueRequest) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, *github.IssueRequest) error); ok {
		r2 = returnFunc(ctx, owner, repo, issue)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GithubClientFacade_CreateIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssue'
type GithubClientFacade_CreateIssue_Call struct {
	*mock.Call
}

// CreateIssue is a helper method to define mock.On call
//   - ctx
//   - owner
//   - repo
//   - issue
func (_e *GithubClientFacade_Expecter) CreateIssue(ctx interface{}, owner interface{}, repo interface{}, issue interface{}) *GithubClientFacade_CreateIssue_Call {
	return &GithubClientFacade_CreateIssue_Call{Call: _e.mock.On("CreateIssue", ctx, owner, repo, issue)}
}

func (_c *GithubClientFacade_CreateIssue_Call) Run(run func(ctx context.Context, owner string, repo string, issue *github.IssueRequest)) *GithubClientFacade_CreateIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.IssueRequest))
	})
	return _c
}

func (_c *GithubClientFacade_CreateIssue_Call) Return(issue1 *github.Issue, response *github.Response, err error) *GithubClientFacade_CreateIssue_Call {
	_c.Call.Return(issue1, response, err)
	return _c
}

func (_c *GithubClientFacade_CreateIssue_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, issue *github.IssueRequest) (*github.Issue, *github.Response, error)) *GithubClientFacade_CreateIssue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueComment provides a mock function for the type GithubClientFacade
func (_mock *GithubClientFacade) CreateIssueComment(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueComment")
	}

	var r0 *github.IssueComment
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) (*github.IssueComment, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueComment) *github.IssueComment); ok {
		r0 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueComment) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueComment) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, comment)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GithubClientFacade_CreateIssueComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueComment'
type GithubClientFacade_CreateIssueComment_Call struct {
	*mock.Call
}

// CreateIssueComment is a helper method to define mock.On call
//   - ctx
//   - owner
//   - repo
//   - number
//   - comment
func (_e *GithubClientFacade_Expecter) CreateIssueComment(ctx interface{}, owner interface{}, repo interface{}, number interface{}, comment interface{}) *GithubClientFacade_CreateIssueComment_Call {
	return &GithubClientFacade_CreateIssueComment_Call{Call: _e.mock.On("CreateIssueComment", ctx, owner, repo, number, comment)}
}

func (_c *GithubClientFacade_CreateIssueComment_Call) Run(run func(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment)) *GithubClientFacade_CreateIssueComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*github.IssueComment))
	})
	return _c
}

func (_c *GithubClientFacade_CreateIssueComment_Call) Return(issueComment *github.IssueComment, response *github.Response, err error) *GithubClientFacade_CreateIssueComment_Call {
	_c.Call.Return(issueComment, response, err)
	return _c
}

func (_c *GithubClientFacade_CreateIssueComment_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error)) *GithubClientFacade_CreateIssueComment_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssue provides a mock function for the type GithubClientFacade
func (_mock *GithubClientFacade) EditIssue(ctx context.Context, owner string, repo string, number int, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, number, issue)

	if len(ret) == 0 {
		panic("no return value specified for EditIssue")
	}

	var r0 *github.Issue
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueRequest) (*github.Issue, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, number, issue)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *github.IssueRequest) *github.Issue); ok {
		r0 = returnFunc(ctx, owner, repo, number, issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int, *github.IssueRequest) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, number, issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, int, *github.IssueRequest) error); ok {
		r2 = returnFunc(ctx, owner, repo, number, issue)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GithubClientFacade_EditIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssue'
type GithubClientFacade_EditIssue_Call struct {
	*mock.Call
}

// EditIssue is a helper method to define mock.On call
//   - ctx
//   - owner
//   - repo
//   - number
//   - issue
func (_e *GithubClientFacade_Expecter) EditIssue(ctx interface{}, owner interface{}, repo interface{}, number interface{}, issue interface{}) *GithubClientFacade_EditIssue_Call {
	return &GithubClientFacade_EditIssue_Call{Call: _e.mock.On("EditIssue", ctx, owner, repo, number, issue)}
}

func (_c *GithubClientFacade_EditIssue_Call) Run(run func(ctx context.Context, owner string, repo string, number int, issue *github.IssueRequest)) *GithubClientFacade_EditIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int), args[4].(*github.IssueRequest))
	})
	return _c
}

func (_c *GithubClientFacade_EditIssue_Call) Return(issue1 *github.Issue, response *github.Response, err error) *GithubClientFacade_EditIssue_Call {
	_c.Call.Return(issue1, response, err)
	return _c
}

func (_c *GithubClientFacade_EditIssue_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, number int, issue *github.IssueRequest) (*github.Issue, *github.Response, error)) *GithubClientFacade_EditIssue_Call {
	_c.Call.Return(run)
	return _c
}

// EditIssueLabel provides a mock function for the type GithubClientFacade
func (_mock *GithubClientFacade) EditIssueLabel(ctx context.Context, owner string, repo string, name string, label *github.Label) (*github.Label, *github.Response, error) {
	ret := _mock.Called(ctx, owner, repo, name, label)

	if len(ret) == 0 {
		panic("no return value specified for EditIssueLabel")
	}

	var r0 *github.Label
	var r1 *github.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *github.Label) (*github.Label, *github.Response, error)); ok {
		return returnFunc(ctx, owner, repo, name, label)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, *github.Label) *github.Label); ok {
		r0 = returnFunc(ctx, owner, repo, name, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, *github.Label) *github.Response); ok {
		r1 = returnFunc(ctx, owner, repo, name, label)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, string, *github.Label) error); ok {
		r2 = returnFunc(ctx, owner, repo, name, label)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// GithubClientFacade_EditIssueLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditIssueLabel'
type GithubClientFacade_EditIssueLabel_Call struct {
	*mock.Call
}

// EditIssueLabel is a helper method to define mock.On call
//   - ctx
//   - owner
//   - repo
//   - name
//   - label
func (_e *GithubClientFacade_Expecter) EditIssueLabel(ctx interface{}, owner interface{}, repo interface{}, name interface{}, label interface{}) *GithubClientFacade_EditIssueLabel_Call {
	return &GithubClientFacade_EditIssueLabel_Call{Call: _e.mock.On("EditIssueLabel", ctx, owner, repo, name, label)}
}

func (_c *GithubClientFacade_EditIssueLabel_Call) Run(run func(ctx context.Context, owner string, repo string, name string, label *github.Label)) *GithubClientFacade_EditIssueLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*github.Label))
	})
	return _c
}

func (_c *GithubClientFacade_EditIssueLabel_Call) Return(label1 *github.Label, response *github.Response, err error) *GithubClientFacade_EditIssueLabel_Call {
	_c.Call.Return(label1, response, err)
	return _c
}

func (_c *GithubClientFacade_EditIssueLabel_Call) RunAndReturn(run func(ctx context.Context, owner string, repo string, name string, label *github.Label) (*github.Label, *github.Response, error)) *GithubClientFacade_EditIssueLabel_Call {
	_c.Call.Return(run)
	return _c
}

// IsCollaboratorInRepository provides a mock function for the type GithubClientFacade
func (_mock *GithubClientFacade) IsCollaboratorInRepository(ctx context.Context, owner string, repoId string, userId int64, opts *github.ListCollaboratorsOptions) (bool, error) {
	ret := _mock.Called(ctx, owner, repoId, userId, opts)

	if len(ret) == 0 {
		panic("no return value specified for IsCollaboratorInRepository")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.ListCollaboratorsOptions) (bool, error)); ok {
		return returnFunc(ctx, owner, repoId, userId, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int64, *github.ListCollaboratorsOptions) bool); ok {
		r0 = returnFunc(ctx, owner, repoId, userId, opts)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, int64, *github.ListCollaboratorsOptions) error); ok {
		r1 = returnFunc(ctx, owner, repoId, userId, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GithubClientFacade_IsCollaboratorInRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCollaboratorInRepository'
type GithubClientFacade_IsCollaboratorInRepository_Call struct {
	*mock.Call
}

// IsCollaboratorInRepository is a helper method to define mock.On call
//   - ctx
//   - owner
//   - repoId
//   - userId
//   - opts
func (_e *GithubClientFacade_Expecter) IsCollaboratorInRepository(ctx interface{}, owner interface{}, repoId interface{}, userId interface{}, opts interface{}) *GithubClientFacade_IsCollaboratorInRepository_Call {
	return &GithubClientFacade_IsCollaboratorInRepository_Call{Call: _e.mock.On("IsCollaboratorInRepository", ctx, owner, repoId, userId, opts)}
}

func (_c *GithubClientFacade_IsCollaboratorInRepository_Call) Run(run func(ctx context.Context, owner string, repoId string, userId int64, opts *github.ListCollaboratorsOptions)) *GithubClientFacade_IsCollaboratorInRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(*github.ListCollaboratorsOptions))
	})
	return _c
}

func (_c *GithubClientFacade_IsCollaboratorInRepository_Call) Return(b bool, err error) *GithubClientFacade_IsCollaboratorInRepository_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *GithubClientFacade_IsCollaboratorInRepository_Call) RunAndReturn(run func(ctx context.Context, owner string, repoId string, userId int64, opts *github.ListCollaboratorsOptions) (bool, error)) *GithubClientFacade_IsCollaboratorInRepository_Call {
	_c.Call.Return(run)
	return _c
}
