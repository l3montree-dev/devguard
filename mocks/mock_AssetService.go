// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAssetService creates a new instance of AssetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetService {
	mock := &AssetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AssetService is an autogenerated mock type for the AssetService type
type AssetService struct {
	mock.Mock
}

type AssetService_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetService) EXPECT() *AssetService_Expecter {
	return &AssetService_Expecter{mock: &_m.Mock}
}

// CreateAsset provides a mock function for the type AssetService
func (_mock *AssetService) CreateAsset(asset models.Asset) (*models.Asset, error) {
	ret := _mock.Called(asset)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *models.Asset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.Asset) (*models.Asset, error)); ok {
		return returnFunc(asset)
	}
	if returnFunc, ok := ret.Get(0).(func(models.Asset) *models.Asset); ok {
		r0 = returnFunc(asset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Asset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(models.Asset) error); ok {
		r1 = returnFunc(asset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetService_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type AssetService_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - asset
func (_e *AssetService_Expecter) CreateAsset(asset interface{}) *AssetService_CreateAsset_Call {
	return &AssetService_CreateAsset_Call{Call: _e.mock.On("CreateAsset", asset)}
}

func (_c *AssetService_CreateAsset_Call) Run(run func(asset models.Asset)) *AssetService_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset))
	})
	return _c
}

func (_c *AssetService_CreateAsset_Call) Return(asset1 *models.Asset, err error) *AssetService_CreateAsset_Call {
	_c.Call.Return(asset1, err)
	return _c
}

func (_c *AssetService_CreateAsset_Call) RunAndReturn(run func(asset models.Asset) (*models.Asset, error)) *AssetService_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetCVSSBadgeSVG provides a mock function for the type AssetService
func (_mock *AssetService) GetCVSSBadgeSVG(CVSS models.AssetRiskDistribution) string {
	ret := _mock.Called(CVSS)

	if len(ret) == 0 {
		panic("no return value specified for GetCVSSBadgeSVG")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(models.AssetRiskDistribution) string); ok {
		r0 = returnFunc(CVSS)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// AssetService_GetCVSSBadgeSVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCVSSBadgeSVG'
type AssetService_GetCVSSBadgeSVG_Call struct {
	*mock.Call
}

// GetCVSSBadgeSVG is a helper method to define mock.On call
//   - CVSS
func (_e *AssetService_Expecter) GetCVSSBadgeSVG(CVSS interface{}) *AssetService_GetCVSSBadgeSVG_Call {
	return &AssetService_GetCVSSBadgeSVG_Call{Call: _e.mock.On("GetCVSSBadgeSVG", CVSS)}
}

func (_c *AssetService_GetCVSSBadgeSVG_Call) Run(run func(CVSS models.AssetRiskDistribution)) *AssetService_GetCVSSBadgeSVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.AssetRiskDistribution))
	})
	return _c
}

func (_c *AssetService_GetCVSSBadgeSVG_Call) Return(s string) *AssetService_GetCVSSBadgeSVG_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *AssetService_GetCVSSBadgeSVG_Call) RunAndReturn(run func(CVSS models.AssetRiskDistribution) string) *AssetService_GetCVSSBadgeSVG_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssetRequirements provides a mock function for the type AssetService
func (_mock *AssetService) UpdateAssetRequirements(asset models.Asset, responsible string, justification string) error {
	ret := _mock.Called(asset, responsible, justification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRequirements")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Asset, string, string) error); ok {
		r0 = returnFunc(asset, responsible, justification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetService_UpdateAssetRequirements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRequirements'
type AssetService_UpdateAssetRequirements_Call struct {
	*mock.Call
}

// UpdateAssetRequirements is a helper method to define mock.On call
//   - asset
//   - responsible
//   - justification
func (_e *AssetService_Expecter) UpdateAssetRequirements(asset interface{}, responsible interface{}, justification interface{}) *AssetService_UpdateAssetRequirements_Call {
	return &AssetService_UpdateAssetRequirements_Call{Call: _e.mock.On("UpdateAssetRequirements", asset, responsible, justification)}
}

func (_c *AssetService_UpdateAssetRequirements_Call) Run(run func(asset models.Asset, responsible string, justification string)) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Asset), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AssetService_UpdateAssetRequirements_Call) Return(err error) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetService_UpdateAssetRequirements_Call) RunAndReturn(run func(asset models.Asset, responsible string, justification string) error) *AssetService_UpdateAssetRequirements_Call {
	_c.Call.Return(run)
	return _c
}
