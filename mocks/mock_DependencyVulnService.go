// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewDependencyVulnService creates a new instance of DependencyVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencyVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DependencyVulnService {
	mock := &DependencyVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DependencyVulnService is an autogenerated mock type for the DependencyVulnService type
type DependencyVulnService struct {
	mock.Mock
}

type DependencyVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *DependencyVulnService) EXPECT() *DependencyVulnService_Expecter {
	return &DependencyVulnService_Expecter{mock: &_m.Mock}
}

// RecalculateRawRiskAssessment provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) RecalculateRawRiskAssessment(tx core.DB, responsible string, dependencyVulns []models.DependencyVuln, justification string, asset models.Asset) error {
	ret := _mock.Called(tx, responsible, dependencyVulns, justification, asset)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateRawRiskAssessment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.DependencyVuln, string, models.Asset) error); ok {
		r0 = returnFunc(tx, responsible, dependencyVulns, justification, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_RecalculateRawRiskAssessment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecalculateRawRiskAssessment'
type DependencyVulnService_RecalculateRawRiskAssessment_Call struct {
	*mock.Call
}

// RecalculateRawRiskAssessment is a helper method to define mock.On call
//   - tx core.DB
//   - responsible string
//   - dependencyVulns []models.DependencyVuln
//   - justification string
//   - asset models.Asset
func (_e *DependencyVulnService_Expecter) RecalculateRawRiskAssessment(tx interface{}, responsible interface{}, dependencyVulns interface{}, justification interface{}, asset interface{}) *DependencyVulnService_RecalculateRawRiskAssessment_Call {
	return &DependencyVulnService_RecalculateRawRiskAssessment_Call{Call: _e.mock.On("RecalculateRawRiskAssessment", tx, responsible, dependencyVulns, justification, asset)}
}

func (_c *DependencyVulnService_RecalculateRawRiskAssessment_Call) Run(run func(tx core.DB, responsible string, dependencyVulns []models.DependencyVuln, justification string, asset models.Asset)) *DependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []models.DependencyVuln
		if args[2] != nil {
			arg2 = args[2].([]models.DependencyVuln)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 models.Asset
		if args[4] != nil {
			arg4 = args[4].(models.Asset)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *DependencyVulnService_RecalculateRawRiskAssessment_Call) Return(err error) *DependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_RecalculateRawRiskAssessment_Call) RunAndReturn(run func(tx core.DB, responsible string, dependencyVulns []models.DependencyVuln, justification string, asset models.Asset) error) *DependencyVulnService_RecalculateRawRiskAssessment_Call {
	_c.Call.Return(run)
	return _c
}

// SyncAllIssues provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) SyncAllIssues(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion) error {
	ret := _mock.Called(org, project, asset, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for SyncAllIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Org, models.Project, models.Asset, models.AssetVersion) error); ok {
		r0 = returnFunc(org, project, asset, assetVersion)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_SyncAllIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAllIssues'
type DependencyVulnService_SyncAllIssues_Call struct {
	*mock.Call
}

// SyncAllIssues is a helper method to define mock.On call
//   - org models.Org
//   - project models.Project
//   - asset models.Asset
//   - assetVersion models.AssetVersion
func (_e *DependencyVulnService_Expecter) SyncAllIssues(org interface{}, project interface{}, asset interface{}, assetVersion interface{}) *DependencyVulnService_SyncAllIssues_Call {
	return &DependencyVulnService_SyncAllIssues_Call{Call: _e.mock.On("SyncAllIssues", org, project, asset, assetVersion)}
}

func (_c *DependencyVulnService_SyncAllIssues_Call) Run(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion)) *DependencyVulnService_SyncAllIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Org
		if args[0] != nil {
			arg0 = args[0].(models.Org)
		}
		var arg1 models.Project
		if args[1] != nil {
			arg1 = args[1].(models.Project)
		}
		var arg2 models.Asset
		if args[2] != nil {
			arg2 = args[2].(models.Asset)
		}
		var arg3 models.AssetVersion
		if args[3] != nil {
			arg3 = args[3].(models.AssetVersion)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *DependencyVulnService_SyncAllIssues_Call) Return(err error) *DependencyVulnService_SyncAllIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_SyncAllIssues_Call) RunAndReturn(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion) error) *DependencyVulnService_SyncAllIssues_Call {
	_c.Call.Return(run)
	return _c
}

// SyncIssues provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) SyncIssues(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.DependencyVuln) error {
	ret := _mock.Called(org, project, asset, assetVersion, vulnList)

	if len(ret) == 0 {
		panic("no return value specified for SyncIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Org, models.Project, models.Asset, models.AssetVersion, []models.DependencyVuln) error); ok {
		r0 = returnFunc(org, project, asset, assetVersion, vulnList)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_SyncIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncIssues'
type DependencyVulnService_SyncIssues_Call struct {
	*mock.Call
}

// SyncIssues is a helper method to define mock.On call
//   - org models.Org
//   - project models.Project
//   - asset models.Asset
//   - assetVersion models.AssetVersion
//   - vulnList []models.DependencyVuln
func (_e *DependencyVulnService_Expecter) SyncIssues(org interface{}, project interface{}, asset interface{}, assetVersion interface{}, vulnList interface{}) *DependencyVulnService_SyncIssues_Call {
	return &DependencyVulnService_SyncIssues_Call{Call: _e.mock.On("SyncIssues", org, project, asset, assetVersion, vulnList)}
}

func (_c *DependencyVulnService_SyncIssues_Call) Run(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.DependencyVuln)) *DependencyVulnService_SyncIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Org
		if args[0] != nil {
			arg0 = args[0].(models.Org)
		}
		var arg1 models.Project
		if args[1] != nil {
			arg1 = args[1].(models.Project)
		}
		var arg2 models.Asset
		if args[2] != nil {
			arg2 = args[2].(models.Asset)
		}
		var arg3 models.AssetVersion
		if args[3] != nil {
			arg3 = args[3].(models.AssetVersion)
		}
		var arg4 []models.DependencyVuln
		if args[4] != nil {
			arg4 = args[4].([]models.DependencyVuln)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *DependencyVulnService_SyncIssues_Call) Return(err error) *DependencyVulnService_SyncIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_SyncIssues_Call) RunAndReturn(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.DependencyVuln) error) *DependencyVulnService_SyncIssues_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDependencyVulnState provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UpdateDependencyVulnState(tx core.DB, assetID uuid.UUID, userID string, dependencyVuln *models.DependencyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, assetVersionName string) (models.VulnEvent, error) {
	ret := _mock.Called(tx, assetID, userID, dependencyVuln, statusType, justification, mechanicalJustification, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDependencyVulnState")
	}

	var r0 models.VulnEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string, *models.DependencyVuln, string, string, models.MechanicalJustificationType, string) (models.VulnEvent, error)); ok {
		return returnFunc(tx, assetID, userID, dependencyVuln, statusType, justification, mechanicalJustification, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string, *models.DependencyVuln, string, string, models.MechanicalJustificationType, string) models.VulnEvent); ok {
		r0 = returnFunc(tx, assetID, userID, dependencyVuln, statusType, justification, mechanicalJustification, assetVersionName)
	} else {
		r0 = ret.Get(0).(models.VulnEvent)
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, string, *models.DependencyVuln, string, string, models.MechanicalJustificationType, string) error); ok {
		r1 = returnFunc(tx, assetID, userID, dependencyVuln, statusType, justification, mechanicalJustification, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnService_UpdateDependencyVulnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDependencyVulnState'
type DependencyVulnService_UpdateDependencyVulnState_Call struct {
	*mock.Call
}

// UpdateDependencyVulnState is a helper method to define mock.On call
//   - tx core.DB
//   - assetID uuid.UUID
//   - userID string
//   - dependencyVuln *models.DependencyVuln
//   - statusType string
//   - justification string
//   - mechanicalJustification models.MechanicalJustificationType
//   - assetVersionName string
func (_e *DependencyVulnService_Expecter) UpdateDependencyVulnState(tx interface{}, assetID interface{}, userID interface{}, dependencyVuln interface{}, statusType interface{}, justification interface{}, mechanicalJustification interface{}, assetVersionName interface{}) *DependencyVulnService_UpdateDependencyVulnState_Call {
	return &DependencyVulnService_UpdateDependencyVulnState_Call{Call: _e.mock.On("UpdateDependencyVulnState", tx, assetID, userID, dependencyVuln, statusType, justification, mechanicalJustification, assetVersionName)}
}

func (_c *DependencyVulnService_UpdateDependencyVulnState_Call) Run(run func(tx core.DB, assetID uuid.UUID, userID string, dependencyVuln *models.DependencyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, assetVersionName string)) *DependencyVulnService_UpdateDependencyVulnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *models.DependencyVuln
		if args[3] != nil {
			arg3 = args[3].(*models.DependencyVuln)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 models.MechanicalJustificationType
		if args[6] != nil {
			arg6 = args[6].(models.MechanicalJustificationType)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UpdateDependencyVulnState_Call) Return(vulnEvent models.VulnEvent, err error) *DependencyVulnService_UpdateDependencyVulnState_Call {
	_c.Call.Return(vulnEvent, err)
	return _c
}

func (_c *DependencyVulnService_UpdateDependencyVulnState_Call) RunAndReturn(run func(tx core.DB, assetID uuid.UUID, userID string, dependencyVuln *models.DependencyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, assetVersionName string) (models.VulnEvent, error)) *DependencyVulnService_UpdateDependencyVulnState_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedDependencyVulnWithAnotherScanner provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UserDetectedDependencyVulnWithAnotherScanner(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string) error {
	ret := _mock.Called(tx, vulnerabilities, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedDependencyVulnWithAnotherScanner")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.DependencyVuln, string) error); ok {
		r0 = returnFunc(tx, vulnerabilities, scannerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedDependencyVulnWithAnotherScanner'
type DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call struct {
	*mock.Call
}

// UserDetectedDependencyVulnWithAnotherScanner is a helper method to define mock.On call
//   - tx core.DB
//   - vulnerabilities []models.DependencyVuln
//   - scannerID string
func (_e *DependencyVulnService_Expecter) UserDetectedDependencyVulnWithAnotherScanner(tx interface{}, vulnerabilities interface{}, scannerID interface{}) *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call {
	return &DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call{Call: _e.mock.On("UserDetectedDependencyVulnWithAnotherScanner", tx, vulnerabilities, scannerID)}
}

func (_c *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call) Run(run func(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string)) *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.DependencyVuln
		if args[1] != nil {
			arg1 = args[1].([]models.DependencyVuln)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call) Return(err error) *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call) RunAndReturn(run func(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string) error) *DependencyVulnService_UserDetectedDependencyVulnWithAnotherScanner_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedDependencyVulns provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UserDetectedDependencyVulns(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset) error {
	ret := _mock.Called(tx, scannerID, dependencyVulns, assetVersion, asset)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedDependencyVulns")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.DependencyVuln, models.AssetVersion, models.Asset) error); ok {
		r0 = returnFunc(tx, scannerID, dependencyVulns, assetVersion, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_UserDetectedDependencyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedDependencyVulns'
type DependencyVulnService_UserDetectedDependencyVulns_Call struct {
	*mock.Call
}

// UserDetectedDependencyVulns is a helper method to define mock.On call
//   - tx core.DB
//   - scannerID string
//   - dependencyVulns []models.DependencyVuln
//   - assetVersion models.AssetVersion
//   - asset models.Asset
func (_e *DependencyVulnService_Expecter) UserDetectedDependencyVulns(tx interface{}, scannerID interface{}, dependencyVulns interface{}, assetVersion interface{}, asset interface{}) *DependencyVulnService_UserDetectedDependencyVulns_Call {
	return &DependencyVulnService_UserDetectedDependencyVulns_Call{Call: _e.mock.On("UserDetectedDependencyVulns", tx, scannerID, dependencyVulns, assetVersion, asset)}
}

func (_c *DependencyVulnService_UserDetectedDependencyVulns_Call) Run(run func(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset)) *DependencyVulnService_UserDetectedDependencyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []models.DependencyVuln
		if args[2] != nil {
			arg2 = args[2].([]models.DependencyVuln)
		}
		var arg3 models.AssetVersion
		if args[3] != nil {
			arg3 = args[3].(models.AssetVersion)
		}
		var arg4 models.Asset
		if args[4] != nil {
			arg4 = args[4].(models.Asset)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UserDetectedDependencyVulns_Call) Return(err error) *DependencyVulnService_UserDetectedDependencyVulns_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_UserDetectedDependencyVulns_Call) RunAndReturn(run func(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset) error) *DependencyVulnService_UserDetectedDependencyVulns_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedExistingVulnOnDifferentBranch provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UserDetectedExistingVulnOnDifferentBranch(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset) error {
	ret := _mock.Called(tx, scannerID, dependencyVulns, alreadyExistingEvents, assetVersion, asset)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedExistingVulnOnDifferentBranch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.DependencyVuln, [][]models.VulnEvent, models.AssetVersion, models.Asset) error); ok {
		r0 = returnFunc(tx, scannerID, dependencyVulns, alreadyExistingEvents, assetVersion, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedExistingVulnOnDifferentBranch'
type DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call struct {
	*mock.Call
}

// UserDetectedExistingVulnOnDifferentBranch is a helper method to define mock.On call
//   - tx core.DB
//   - scannerID string
//   - dependencyVulns []models.DependencyVuln
//   - alreadyExistingEvents [][]models.VulnEvent
//   - assetVersion models.AssetVersion
//   - asset models.Asset
func (_e *DependencyVulnService_Expecter) UserDetectedExistingVulnOnDifferentBranch(tx interface{}, scannerID interface{}, dependencyVulns interface{}, alreadyExistingEvents interface{}, assetVersion interface{}, asset interface{}) *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call {
	return &DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call{Call: _e.mock.On("UserDetectedExistingVulnOnDifferentBranch", tx, scannerID, dependencyVulns, alreadyExistingEvents, assetVersion, asset)}
}

func (_c *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call) Run(run func(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset)) *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []models.DependencyVuln
		if args[2] != nil {
			arg2 = args[2].([]models.DependencyVuln)
		}
		var arg3 [][]models.VulnEvent
		if args[3] != nil {
			arg3 = args[3].([][]models.VulnEvent)
		}
		var arg4 models.AssetVersion
		if args[4] != nil {
			arg4 = args[4].(models.AssetVersion)
		}
		var arg5 models.Asset
		if args[5] != nil {
			arg5 = args[5].(models.Asset)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call) Return(err error) *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call) RunAndReturn(run func(tx core.DB, scannerID string, dependencyVulns []models.DependencyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset) error) *DependencyVulnService_UserDetectedExistingVulnOnDifferentBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserDidNotDetectDependencyVulnWithScannerAnymore provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UserDidNotDetectDependencyVulnWithScannerAnymore(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string) error {
	ret := _mock.Called(tx, vulnerabilities, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for UserDidNotDetectDependencyVulnWithScannerAnymore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.DependencyVuln, string) error); ok {
		r0 = returnFunc(tx, vulnerabilities, scannerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDidNotDetectDependencyVulnWithScannerAnymore'
type DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call struct {
	*mock.Call
}

// UserDidNotDetectDependencyVulnWithScannerAnymore is a helper method to define mock.On call
//   - tx core.DB
//   - vulnerabilities []models.DependencyVuln
//   - scannerID string
func (_e *DependencyVulnService_Expecter) UserDidNotDetectDependencyVulnWithScannerAnymore(tx interface{}, vulnerabilities interface{}, scannerID interface{}) *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call {
	return &DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call{Call: _e.mock.On("UserDidNotDetectDependencyVulnWithScannerAnymore", tx, vulnerabilities, scannerID)}
}

func (_c *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call) Run(run func(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string)) *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.DependencyVuln
		if args[1] != nil {
			arg1 = args[1].([]models.DependencyVuln)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call) Return(err error) *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call) RunAndReturn(run func(tx core.DB, vulnerabilities []models.DependencyVuln, scannerID string) error) *DependencyVulnService_UserDidNotDetectDependencyVulnWithScannerAnymore_Call {
	_c.Call.Return(run)
	return _c
}

// UserFixedDependencyVulns provides a mock function for the type DependencyVulnService
func (_mock *DependencyVulnService) UserFixedDependencyVulns(tx core.DB, userID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset) error {
	ret := _mock.Called(tx, userID, dependencyVulns, assetVersion, asset)

	if len(ret) == 0 {
		panic("no return value specified for UserFixedDependencyVulns")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.DependencyVuln, models.AssetVersion, models.Asset) error); ok {
		r0 = returnFunc(tx, userID, dependencyVulns, assetVersion, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnService_UserFixedDependencyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFixedDependencyVulns'
type DependencyVulnService_UserFixedDependencyVulns_Call struct {
	*mock.Call
}

// UserFixedDependencyVulns is a helper method to define mock.On call
//   - tx core.DB
//   - userID string
//   - dependencyVulns []models.DependencyVuln
//   - assetVersion models.AssetVersion
//   - asset models.Asset
func (_e *DependencyVulnService_Expecter) UserFixedDependencyVulns(tx interface{}, userID interface{}, dependencyVulns interface{}, assetVersion interface{}, asset interface{}) *DependencyVulnService_UserFixedDependencyVulns_Call {
	return &DependencyVulnService_UserFixedDependencyVulns_Call{Call: _e.mock.On("UserFixedDependencyVulns", tx, userID, dependencyVulns, assetVersion, asset)}
}

func (_c *DependencyVulnService_UserFixedDependencyVulns_Call) Run(run func(tx core.DB, userID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset)) *DependencyVulnService_UserFixedDependencyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []models.DependencyVuln
		if args[2] != nil {
			arg2 = args[2].([]models.DependencyVuln)
		}
		var arg3 models.AssetVersion
		if args[3] != nil {
			arg3 = args[3].(models.AssetVersion)
		}
		var arg4 models.Asset
		if args[4] != nil {
			arg4 = args[4].(models.Asset)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *DependencyVulnService_UserFixedDependencyVulns_Call) Return(err error) *DependencyVulnService_UserFixedDependencyVulns_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnService_UserFixedDependencyVulns_Call) RunAndReturn(run func(tx core.DB, userID string, dependencyVulns []models.DependencyVuln, assetVersion models.AssetVersion, asset models.Asset) error) *DependencyVulnService_UserFixedDependencyVulns_Call {
	_c.Call.Return(run)
	return _c
}
