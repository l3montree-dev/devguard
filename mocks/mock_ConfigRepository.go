// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewConfigRepository creates a new instance of ConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigRepository {
	mock := &ConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConfigRepository is an autogenerated mock type for the ConfigRepository type
type ConfigRepository struct {
	mock.Mock
}

type ConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigRepository) EXPECT() *ConfigRepository_Expecter {
	return &ConfigRepository_Expecter{mock: &_m.Mock}
}

// GetDB provides a mock function for the type ConfigRepository
func (_mock *ConfigRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// ConfigRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type ConfigRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx core.DB
func (_e *ConfigRepository_Expecter) GetDB(tx interface{}) *ConfigRepository_GetDB_Call {
	return &ConfigRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *ConfigRepository_GetDB_Call) Run(run func(tx core.DB)) *ConfigRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConfigRepository_GetDB_Call) Return(v core.DB) *ConfigRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *ConfigRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *ConfigRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type ConfigRepository
func (_mock *ConfigRepository) Save(tx core.DB, config *models.Config) error {
	ret := _mock.Called(tx, config)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Config) error); ok {
		r0 = returnFunc(tx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConfigRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ConfigRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - config *models.Config
func (_e *ConfigRepository_Expecter) Save(tx interface{}, config interface{}) *ConfigRepository_Save_Call {
	return &ConfigRepository_Save_Call{Call: _e.mock.On("Save", tx, config)}
}

func (_c *ConfigRepository_Save_Call) Run(run func(tx core.DB, config *models.Config)) *ConfigRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.Config
		if args[1] != nil {
			arg1 = args[1].(*models.Config)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConfigRepository_Save_Call) Return(err error) *ConfigRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConfigRepository_Save_Call) RunAndReturn(run func(tx core.DB, config *models.Config) error) *ConfigRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
