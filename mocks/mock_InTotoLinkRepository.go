// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// InTotoLinkRepository is an autogenerated mock type for the InTotoLinkRepository type
type InTotoLinkRepository struct {
	mock.Mock
}

type InTotoLinkRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InTotoLinkRepository) EXPECT() *InTotoLinkRepository_Expecter {
	return &InTotoLinkRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *InTotoLinkRepository) Activate(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type InTotoLinkRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *InTotoLinkRepository_Expecter) Activate(tx interface{}, id interface{}) *InTotoLinkRepository_Activate_Call {
	return &InTotoLinkRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *InTotoLinkRepository_Activate_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *InTotoLinkRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *InTotoLinkRepository_Activate_Call) Return(_a0 error) *InTotoLinkRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *InTotoLinkRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *InTotoLinkRepository) All() ([]models.InTotoLink, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.InTotoLink, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.InTotoLink); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InTotoLink)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTotoLinkRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type InTotoLinkRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *InTotoLinkRepository_Expecter) All() *InTotoLinkRepository_All_Call {
	return &InTotoLinkRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *InTotoLinkRepository_All_Call) Run(run func()) *InTotoLinkRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InTotoLinkRepository_All_Call) Return(_a0 []models.InTotoLink, _a1 error) *InTotoLinkRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InTotoLinkRepository_All_Call) RunAndReturn(run func() ([]models.InTotoLink, error)) *InTotoLinkRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *InTotoLinkRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// InTotoLinkRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type InTotoLinkRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *InTotoLinkRepository_Expecter) Begin() *InTotoLinkRepository_Begin_Call {
	return &InTotoLinkRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *InTotoLinkRepository_Begin_Call) Run(run func()) *InTotoLinkRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InTotoLinkRepository_Begin_Call) Return(_a0 *gorm.DB) *InTotoLinkRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *InTotoLinkRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *InTotoLinkRepository) Create(tx *gorm.DB, t *models.InTotoLink) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.InTotoLink) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type InTotoLinkRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.InTotoLink
func (_e *InTotoLinkRepository_Expecter) Create(tx interface{}, t interface{}) *InTotoLinkRepository_Create_Call {
	return &InTotoLinkRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *InTotoLinkRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.InTotoLink)) *InTotoLinkRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.InTotoLink))
	})
	return _c
}

func (_c *InTotoLinkRepository_Create_Call) Return(_a0 error) *InTotoLinkRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.InTotoLink) error) *InTotoLinkRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *InTotoLinkRepository) CreateBatch(tx *gorm.DB, ts []models.InTotoLink) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.InTotoLink) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type InTotoLinkRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.InTotoLink
func (_e *InTotoLinkRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *InTotoLinkRepository_CreateBatch_Call {
	return &InTotoLinkRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *InTotoLinkRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.InTotoLink)) *InTotoLinkRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.InTotoLink))
	})
	return _c
}

func (_c *InTotoLinkRepository_CreateBatch_Call) Return(_a0 error) *InTotoLinkRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.InTotoLink) error) *InTotoLinkRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *InTotoLinkRepository) Delete(tx *gorm.DB, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type InTotoLinkRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id uuid.UUID
func (_e *InTotoLinkRepository_Expecter) Delete(tx interface{}, id interface{}) *InTotoLinkRepository_Delete_Call {
	return &InTotoLinkRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *InTotoLinkRepository_Delete_Call) Run(run func(tx *gorm.DB, id uuid.UUID)) *InTotoLinkRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *InTotoLinkRepository_Delete_Call) Return(_a0 error) *InTotoLinkRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, uuid.UUID) error) *InTotoLinkRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function with given fields: tx, ids
func (_m *InTotoLinkRepository) DeleteBatch(tx *gorm.DB, ids []models.InTotoLink) error {
	ret := _m.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.InTotoLink) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type InTotoLinkRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ids []models.InTotoLink
func (_e *InTotoLinkRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *InTotoLinkRepository_DeleteBatch_Call {
	return &InTotoLinkRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *InTotoLinkRepository_DeleteBatch_Call) Run(run func(tx *gorm.DB, ids []models.InTotoLink)) *InTotoLinkRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.InTotoLink))
	})
	return _c
}

func (_c *InTotoLinkRepository_DeleteBatch_Call) Return(_a0 error) *InTotoLinkRepository_DeleteBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_DeleteBatch_Call) RunAndReturn(run func(*gorm.DB, []models.InTotoLink) error) *InTotoLinkRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAssetAndSupplyChainId provides a mock function with given fields: assetID, supplyChainId
func (_m *InTotoLinkRepository) FindByAssetAndSupplyChainId(assetID uuid.UUID, supplyChainId string) ([]models.InTotoLink, error) {
	ret := _m.Called(assetID, supplyChainId)

	if len(ret) == 0 {
		panic("no return value specified for FindByAssetAndSupplyChainId")
	}

	var r0 []models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.InTotoLink, error)); ok {
		return rf(assetID, supplyChainId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []models.InTotoLink); ok {
		r0 = rf(assetID, supplyChainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InTotoLink)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, supplyChainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTotoLinkRepository_FindByAssetAndSupplyChainId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAssetAndSupplyChainId'
type InTotoLinkRepository_FindByAssetAndSupplyChainId_Call struct {
	*mock.Call
}

// FindByAssetAndSupplyChainId is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - supplyChainId string
func (_e *InTotoLinkRepository_Expecter) FindByAssetAndSupplyChainId(assetID interface{}, supplyChainId interface{}) *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call {
	return &InTotoLinkRepository_FindByAssetAndSupplyChainId_Call{Call: _e.mock.On("FindByAssetAndSupplyChainId", assetID, supplyChainId)}
}

func (_c *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call) Run(run func(assetID uuid.UUID, supplyChainId string)) *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call) Return(_a0 []models.InTotoLink, _a1 error) *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call) RunAndReturn(run func(uuid.UUID, string) ([]models.InTotoLink, error)) *InTotoLinkRepository_FindByAssetAndSupplyChainId_Call {
	_c.Call.Return(run)
	return _c
}

// FindBySupplyChainID provides a mock function with given fields: supplyChainID
func (_m *InTotoLinkRepository) FindBySupplyChainID(supplyChainID string) ([]models.InTotoLink, error) {
	ret := _m.Called(supplyChainID)

	if len(ret) == 0 {
		panic("no return value specified for FindBySupplyChainID")
	}

	var r0 []models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.InTotoLink, error)); ok {
		return rf(supplyChainID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.InTotoLink); ok {
		r0 = rf(supplyChainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InTotoLink)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(supplyChainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTotoLinkRepository_FindBySupplyChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySupplyChainID'
type InTotoLinkRepository_FindBySupplyChainID_Call struct {
	*mock.Call
}

// FindBySupplyChainID is a helper method to define mock.On call
//   - supplyChainID string
func (_e *InTotoLinkRepository_Expecter) FindBySupplyChainID(supplyChainID interface{}) *InTotoLinkRepository_FindBySupplyChainID_Call {
	return &InTotoLinkRepository_FindBySupplyChainID_Call{Call: _e.mock.On("FindBySupplyChainID", supplyChainID)}
}

func (_c *InTotoLinkRepository_FindBySupplyChainID_Call) Run(run func(supplyChainID string)) *InTotoLinkRepository_FindBySupplyChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *InTotoLinkRepository_FindBySupplyChainID_Call) Return(_a0 []models.InTotoLink, _a1 error) *InTotoLinkRepository_FindBySupplyChainID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InTotoLinkRepository_FindBySupplyChainID_Call) RunAndReturn(run func(string) ([]models.InTotoLink, error)) *InTotoLinkRepository_FindBySupplyChainID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *InTotoLinkRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// InTotoLinkRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type InTotoLinkRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *InTotoLinkRepository_Expecter) GetDB(tx interface{}) *InTotoLinkRepository_GetDB_Call {
	return &InTotoLinkRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *InTotoLinkRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *InTotoLinkRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *InTotoLinkRepository_GetDB_Call) Return(_a0 *gorm.DB) *InTotoLinkRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *InTotoLinkRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *InTotoLinkRepository) List(ids []uuid.UUID) ([]models.InTotoLink, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]models.InTotoLink, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []models.InTotoLink); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InTotoLink)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTotoLinkRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InTotoLinkRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *InTotoLinkRepository_Expecter) List(ids interface{}) *InTotoLinkRepository_List_Call {
	return &InTotoLinkRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *InTotoLinkRepository_List_Call) Run(run func(ids []uuid.UUID)) *InTotoLinkRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *InTotoLinkRepository_List_Call) Return(_a0 []models.InTotoLink, _a1 error) *InTotoLinkRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InTotoLinkRepository_List_Call) RunAndReturn(run func([]uuid.UUID) ([]models.InTotoLink, error)) *InTotoLinkRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *InTotoLinkRepository) Read(id uuid.UUID) (models.InTotoLink, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.InTotoLink
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.InTotoLink, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.InTotoLink); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.InTotoLink)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTotoLinkRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type InTotoLinkRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *InTotoLinkRepository_Expecter) Read(id interface{}) *InTotoLinkRepository_Read_Call {
	return &InTotoLinkRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *InTotoLinkRepository_Read_Call) Run(run func(id uuid.UUID)) *InTotoLinkRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *InTotoLinkRepository_Read_Call) Return(_a0 models.InTotoLink, _a1 error) *InTotoLinkRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InTotoLinkRepository_Read_Call) RunAndReturn(run func(uuid.UUID) (models.InTotoLink, error)) *InTotoLinkRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, model
func (_m *InTotoLinkRepository) Save(tx *gorm.DB, model *models.InTotoLink) error {
	ret := _m.Called(tx, model)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.InTotoLink) error); ok {
		r0 = rf(tx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type InTotoLinkRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - model *models.InTotoLink
func (_e *InTotoLinkRepository_Expecter) Save(tx interface{}, model interface{}) *InTotoLinkRepository_Save_Call {
	return &InTotoLinkRepository_Save_Call{Call: _e.mock.On("Save", tx, model)}
}

func (_c *InTotoLinkRepository_Save_Call) Run(run func(tx *gorm.DB, model *models.InTotoLink)) *InTotoLinkRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.InTotoLink))
	})
	return _c
}

func (_c *InTotoLinkRepository_Save_Call) Return(_a0 error) *InTotoLinkRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.InTotoLink) error) *InTotoLinkRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *InTotoLinkRepository) SaveBatch(tx *gorm.DB, ts []models.InTotoLink) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.InTotoLink) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type InTotoLinkRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.InTotoLink
func (_e *InTotoLinkRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *InTotoLinkRepository_SaveBatch_Call {
	return &InTotoLinkRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *InTotoLinkRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.InTotoLink)) *InTotoLinkRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.InTotoLink))
	})
	return _c
}

func (_c *InTotoLinkRepository_SaveBatch_Call) Return(_a0 error) *InTotoLinkRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.InTotoLink) error) *InTotoLinkRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *InTotoLinkRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InTotoLinkRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type InTotoLinkRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *InTotoLinkRepository_Expecter) Transaction(_a0 interface{}) *InTotoLinkRepository_Transaction_Call {
	return &InTotoLinkRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *InTotoLinkRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *InTotoLinkRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *InTotoLinkRepository_Transaction_Call) Return(_a0 error) *InTotoLinkRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InTotoLinkRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *InTotoLinkRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewInTotoLinkRepository creates a new instance of InTotoLinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInTotoLinkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InTotoLinkRepository {
	mock := &InTotoLinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
