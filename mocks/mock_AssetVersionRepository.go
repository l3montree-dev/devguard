// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAssetVersionRepository creates a new instance of AssetVersionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetVersionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetVersionRepository {
	mock := &AssetVersionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AssetVersionRepository is an autogenerated mock type for the AssetVersionRepository type
type AssetVersionRepository struct {
	mock.Mock
}

type AssetVersionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetVersionRepository) EXPECT() *AssetVersionRepository_Expecter {
	return &AssetVersionRepository_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) All() ([]models.AssetVersion, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.AssetVersion, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.AssetVersion); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type AssetVersionRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *AssetVersionRepository_Expecter) All() *AssetVersionRepository_All_Call {
	return &AssetVersionRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *AssetVersionRepository_All_Call) Run(run func()) *AssetVersionRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AssetVersionRepository_All_Call) Return(assetVersions []models.AssetVersion, err error) *AssetVersionRepository_All_Call {
	_c.Call.Return(assetVersions, err)
	return _c
}

func (_c *AssetVersionRepository_All_Call) RunAndReturn(run func() ([]models.AssetVersion, error)) *AssetVersionRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) Delete(tx core.DB, assetVersion *models.AssetVersion) error {
	ret := _mock.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.AssetVersion) error); ok {
		r0 = returnFunc(tx, assetVersion)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetVersionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AssetVersionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - assetVersion
func (_e *AssetVersionRepository_Expecter) Delete(tx interface{}, assetVersion interface{}) *AssetVersionRepository_Delete_Call {
	return &AssetVersionRepository_Delete_Call{Call: _e.mock.On("Delete", tx, assetVersion)}
}

func (_c *AssetVersionRepository_Delete_Call) Run(run func(tx core.DB, assetVersion *models.AssetVersion)) *AssetVersionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.AssetVersion))
	})
	return _c
}

func (_c *AssetVersionRepository_Delete_Call) Return(err error) *AssetVersionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetVersionRepository_Delete_Call) RunAndReturn(run func(tx core.DB, assetVersion *models.AssetVersion) error) *AssetVersionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreate provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) FindOrCreate(assetVersionName string, assetID uuid.UUID, tag string, defaultBranchName string) (models.AssetVersion, error) {
	ret := _mock.Called(assetVersionName, assetID, tag, defaultBranchName)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreate")
	}

	var r0 models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string, string) (models.AssetVersion, error)); ok {
		return returnFunc(assetVersionName, assetID, tag, defaultBranchName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string, string) models.AssetVersion); ok {
		r0 = returnFunc(assetVersionName, assetID, tag, defaultBranchName)
	} else {
		r0 = ret.Get(0).(models.AssetVersion)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, tag, defaultBranchName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_FindOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreate'
type AssetVersionRepository_FindOrCreate_Call struct {
	*mock.Call
}

// FindOrCreate is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - tag
//   - defaultBranchName
func (_e *AssetVersionRepository_Expecter) FindOrCreate(assetVersionName interface{}, assetID interface{}, tag interface{}, defaultBranchName interface{}) *AssetVersionRepository_FindOrCreate_Call {
	return &AssetVersionRepository_FindOrCreate_Call{Call: _e.mock.On("FindOrCreate", assetVersionName, assetID, tag, defaultBranchName)}
}

func (_c *AssetVersionRepository_FindOrCreate_Call) Run(run func(assetVersionName string, assetID uuid.UUID, tag string, defaultBranchName string)) *AssetVersionRepository_FindOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AssetVersionRepository_FindOrCreate_Call) Return(assetVersion models.AssetVersion, err error) *AssetVersionRepository_FindOrCreate_Call {
	_c.Call.Return(assetVersion, err)
	return _c
}

func (_c *AssetVersionRepository_FindOrCreate_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, tag string, defaultBranchName string) (models.AssetVersion, error)) *AssetVersionRepository_FindOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAssetsVersionFromDBByAssetID provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) GetAllAssetsVersionFromDBByAssetID(tx core.DB, assetID uuid.UUID) ([]models.AssetVersion, error) {
	ret := _mock.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssetsVersionFromDBByAssetID")
	}

	var r0 []models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) ([]models.AssetVersion, error)); ok {
		return returnFunc(tx, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) []models.AssetVersion); ok {
		r0 = returnFunc(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID) error); ok {
		r1 = returnFunc(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAssetsVersionFromDBByAssetID'
type AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call struct {
	*mock.Call
}

// GetAllAssetsVersionFromDBByAssetID is a helper method to define mock.On call
//   - tx
//   - assetID
func (_e *AssetVersionRepository_Expecter) GetAllAssetsVersionFromDBByAssetID(tx interface{}, assetID interface{}) *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	return &AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call{Call: _e.mock.On("GetAllAssetsVersionFromDBByAssetID", tx, assetID)}
}

func (_c *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) Run(run func(tx core.DB, assetID uuid.UUID)) *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) Return(assetVersions []models.AssetVersion, err error) *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Return(assetVersions, err)
	return _c
}

func (_c *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call) RunAndReturn(run func(tx core.DB, assetID uuid.UUID) ([]models.AssetVersion, error)) *AssetVersionRepository_GetAllAssetsVersionFromDBByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) GetDB(v core.DB) core.DB {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// AssetVersionRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type AssetVersionRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - v
func (_e *AssetVersionRepository_Expecter) GetDB(v interface{}) *AssetVersionRepository_GetDB_Call {
	return &AssetVersionRepository_GetDB_Call{Call: _e.mock.On("GetDB", v)}
}

func (_c *AssetVersionRepository_GetDB_Call) Run(run func(v core.DB)) *AssetVersionRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *AssetVersionRepository_GetDB_Call) Return(v1 core.DB) *AssetVersionRepository_GetDB_Call {
	_c.Call.Return(v1)
	return _c
}

func (_c *AssetVersionRepository_GetDB_Call) RunAndReturn(run func(v core.DB) core.DB) *AssetVersionRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAssetVersion provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) GetDefaultAssetVersion(assetID uuid.UUID) (models.AssetVersion, error) {
	ret := _mock.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAssetVersion")
	}

	var r0 models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.AssetVersion, error)); ok {
		return returnFunc(assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.AssetVersion); ok {
		r0 = returnFunc(assetID)
	} else {
		r0 = ret.Get(0).(models.AssetVersion)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_GetDefaultAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAssetVersion'
type AssetVersionRepository_GetDefaultAssetVersion_Call struct {
	*mock.Call
}

// GetDefaultAssetVersion is a helper method to define mock.On call
//   - assetID
func (_e *AssetVersionRepository_Expecter) GetDefaultAssetVersion(assetID interface{}) *AssetVersionRepository_GetDefaultAssetVersion_Call {
	return &AssetVersionRepository_GetDefaultAssetVersion_Call{Call: _e.mock.On("GetDefaultAssetVersion", assetID)}
}

func (_c *AssetVersionRepository_GetDefaultAssetVersion_Call) Run(run func(assetID uuid.UUID)) *AssetVersionRepository_GetDefaultAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersion_Call) Return(assetVersion models.AssetVersion, err error) *AssetVersionRepository_GetDefaultAssetVersion_Call {
	_c.Call.Return(assetVersion, err)
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersion_Call) RunAndReturn(run func(assetID uuid.UUID) (models.AssetVersion, error)) *AssetVersionRepository_GetDefaultAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAssetVersionsByProjectID provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) GetDefaultAssetVersionsByProjectID(projectID uuid.UUID) ([]models.AssetVersion, error) {
	ret := _mock.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAssetVersionsByProjectID")
	}

	var r0 []models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.AssetVersion, error)); ok {
		return returnFunc(projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.AssetVersion); ok {
		r0 = returnFunc(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAssetVersionsByProjectID'
type AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call struct {
	*mock.Call
}

// GetDefaultAssetVersionsByProjectID is a helper method to define mock.On call
//   - projectID
func (_e *AssetVersionRepository_Expecter) GetDefaultAssetVersionsByProjectID(projectID interface{}) *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	return &AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call{Call: _e.mock.On("GetDefaultAssetVersionsByProjectID", projectID)}
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) Run(run func(projectID uuid.UUID)) *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) Return(assetVersions []models.AssetVersion, err error) *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Return(assetVersions, err)
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call) RunAndReturn(run func(projectID uuid.UUID) ([]models.AssetVersion, error)) *AssetVersionRepository_GetDefaultAssetVersionsByProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAssetVersionsByProjectIDs provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) GetDefaultAssetVersionsByProjectIDs(projectIDs []uuid.UUID) ([]models.AssetVersion, error) {
	ret := _mock.Called(projectIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAssetVersionsByProjectIDs")
	}

	var r0 []models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) ([]models.AssetVersion, error)); ok {
		return returnFunc(projectIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) []models.AssetVersion); ok {
		r0 = returnFunc(projectIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = returnFunc(projectIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAssetVersionsByProjectIDs'
type AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call struct {
	*mock.Call
}

// GetDefaultAssetVersionsByProjectIDs is a helper method to define mock.On call
//   - projectIDs
func (_e *AssetVersionRepository_Expecter) GetDefaultAssetVersionsByProjectIDs(projectIDs interface{}) *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	return &AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call{Call: _e.mock.On("GetDefaultAssetVersionsByProjectIDs", projectIDs)}
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) Run(run func(projectIDs []uuid.UUID)) *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) Return(assetVersions []models.AssetVersion, err error) *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Return(assetVersions, err)
	return _c
}

func (_c *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call) RunAndReturn(run func(projectIDs []uuid.UUID) ([]models.AssetVersion, error)) *AssetVersionRepository_GetDefaultAssetVersionsByProjectIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) Read(assetVersionName string, assetID uuid.UUID) (models.AssetVersion, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (models.AssetVersion, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) models.AssetVersion); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		r0 = ret.Get(0).(models.AssetVersion)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type AssetVersionRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *AssetVersionRepository_Expecter) Read(assetVersionName interface{}, assetID interface{}) *AssetVersionRepository_Read_Call {
	return &AssetVersionRepository_Read_Call{Call: _e.mock.On("Read", assetVersionName, assetID)}
}

func (_c *AssetVersionRepository_Read_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *AssetVersionRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AssetVersionRepository_Read_Call) Return(assetVersion models.AssetVersion, err error) *AssetVersionRepository_Read_Call {
	_c.Call.Return(assetVersion, err)
	return _c
}

func (_c *AssetVersionRepository_Read_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (models.AssetVersion, error)) *AssetVersionRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBySlug provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) ReadBySlug(assetID uuid.UUID, slug string) (models.AssetVersion, error) {
	ret := _mock.Called(assetID, slug)

	if len(ret) == 0 {
		panic("no return value specified for ReadBySlug")
	}

	var r0 models.AssetVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) (models.AssetVersion, error)); ok {
		return returnFunc(assetID, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) models.AssetVersion); ok {
		r0 = returnFunc(assetID, slug)
	} else {
		r0 = ret.Get(0).(models.AssetVersion)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetVersionRepository_ReadBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBySlug'
type AssetVersionRepository_ReadBySlug_Call struct {
	*mock.Call
}

// ReadBySlug is a helper method to define mock.On call
//   - assetID
//   - slug
func (_e *AssetVersionRepository_Expecter) ReadBySlug(assetID interface{}, slug interface{}) *AssetVersionRepository_ReadBySlug_Call {
	return &AssetVersionRepository_ReadBySlug_Call{Call: _e.mock.On("ReadBySlug", assetID, slug)}
}

func (_c *AssetVersionRepository_ReadBySlug_Call) Run(run func(assetID uuid.UUID, slug string)) *AssetVersionRepository_ReadBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AssetVersionRepository_ReadBySlug_Call) Return(assetVersion models.AssetVersion, err error) *AssetVersionRepository_ReadBySlug_Call {
	_c.Call.Return(assetVersion, err)
	return _c
}

func (_c *AssetVersionRepository_ReadBySlug_Call) RunAndReturn(run func(assetID uuid.UUID, slug string) (models.AssetVersion, error)) *AssetVersionRepository_ReadBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type AssetVersionRepository
func (_mock *AssetVersionRepository) Save(tx core.DB, assetVersion *models.AssetVersion) error {
	ret := _mock.Called(tx, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.AssetVersion) error); ok {
		r0 = returnFunc(tx, assetVersion)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AssetVersionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AssetVersionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - assetVersion
func (_e *AssetVersionRepository_Expecter) Save(tx interface{}, assetVersion interface{}) *AssetVersionRepository_Save_Call {
	return &AssetVersionRepository_Save_Call{Call: _e.mock.On("Save", tx, assetVersion)}
}

func (_c *AssetVersionRepository_Save_Call) Run(run func(tx core.DB, assetVersion *models.AssetVersion)) *AssetVersionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.AssetVersion))
	})
	return _c
}

func (_c *AssetVersionRepository_Save_Call) Return(err error) *AssetVersionRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AssetVersionRepository_Save_Call) RunAndReturn(run func(tx core.DB, assetVersion *models.AssetVersion) error) *AssetVersionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
