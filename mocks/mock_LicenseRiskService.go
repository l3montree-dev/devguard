// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewLicenseRiskService creates a new instance of LicenseRiskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLicenseRiskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LicenseRiskService {
	mock := &LicenseRiskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LicenseRiskService is an autogenerated mock type for the LicenseRiskService type
type LicenseRiskService struct {
	mock.Mock
}

type LicenseRiskService_Expecter struct {
	mock *mock.Mock
}

func (_m *LicenseRiskService) EXPECT() *LicenseRiskService_Expecter {
	return &LicenseRiskService_Expecter{mock: &_m.Mock}
}

// FindLicenseRisksInComponents provides a mock function for the type LicenseRiskService
func (_mock *LicenseRiskService) FindLicenseRisksInComponents(components []models.Component) error {
	ret := _mock.Called(components)

	if len(ret) == 0 {
		panic("no return value specified for FindLicenseRisksInComponents")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.Component) error); ok {
		r0 = returnFunc(components)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskService_FindLicenseRisksInComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLicenseRisksInComponents'
type LicenseRiskService_FindLicenseRisksInComponents_Call struct {
	*mock.Call
}

// FindLicenseRisksInComponents is a helper method to define mock.On call
//   - components
func (_e *LicenseRiskService_Expecter) FindLicenseRisksInComponents(components interface{}) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	return &LicenseRiskService_FindLicenseRisksInComponents_Call{Call: _e.mock.On("FindLicenseRisksInComponents", components)}
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) Run(run func(components []models.Component)) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Component))
	})
	return _c
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) Return(err error) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) RunAndReturn(run func(components []models.Component) error) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Return(run)
	return _c
}
