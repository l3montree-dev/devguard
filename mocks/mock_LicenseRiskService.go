// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewLicenseRiskService creates a new instance of LicenseRiskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLicenseRiskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LicenseRiskService {
	mock := &LicenseRiskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LicenseRiskService is an autogenerated mock type for the LicenseRiskService type
type LicenseRiskService struct {
	mock.Mock
}

type LicenseRiskService_Expecter struct {
	mock *mock.Mock
}

func (_m *LicenseRiskService) EXPECT() *LicenseRiskService_Expecter {
	return &LicenseRiskService_Expecter{mock: &_m.Mock}
}

// FindLicenseRisksInComponents provides a mock function for the type LicenseRiskService
func (_mock *LicenseRiskService) FindLicenseRisksInComponents(assetVersion models.AssetVersion, components []models.Component, artifactName string, upstream int) error {
	ret := _mock.Called(assetVersion, components, artifactName, upstream)

	if len(ret) == 0 {
		panic("no return value specified for FindLicenseRisksInComponents")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.AssetVersion, []models.Component, string, int) error); ok {
		r0 = returnFunc(assetVersion, components, artifactName, upstream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskService_FindLicenseRisksInComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLicenseRisksInComponents'
type LicenseRiskService_FindLicenseRisksInComponents_Call struct {
	*mock.Call
}

// FindLicenseRisksInComponents is a helper method to define mock.On call
//   - assetVersion models.AssetVersion
//   - components []models.Component
//   - artifactName string
//   - upstream int
func (_e *LicenseRiskService_Expecter) FindLicenseRisksInComponents(assetVersion interface{}, components interface{}, artifactName interface{}, upstream interface{}) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	return &LicenseRiskService_FindLicenseRisksInComponents_Call{Call: _e.mock.On("FindLicenseRisksInComponents", assetVersion, components, artifactName, upstream)}
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) Run(run func(assetVersion models.AssetVersion, components []models.Component, artifactName string, upstream int)) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.AssetVersion
		if args[0] != nil {
			arg0 = args[0].(models.AssetVersion)
		}
		var arg1 []models.Component
		if args[1] != nil {
			arg1 = args[1].([]models.Component)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) Return(err error) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskService_FindLicenseRisksInComponents_Call) RunAndReturn(run func(assetVersion models.AssetVersion, components []models.Component, artifactName string, upstream int) error) *LicenseRiskService_FindLicenseRisksInComponents_Call {
	_c.Call.Return(run)
	return _c
}

// MakeFinalLicenseDecision provides a mock function for the type LicenseRiskService
func (_mock *LicenseRiskService) MakeFinalLicenseDecision(vulnID string, finalLicense string, justification string, userID string) error {
	ret := _mock.Called(vulnID, finalLicense, justification, userID)

	if len(ret) == 0 {
		panic("no return value specified for MakeFinalLicenseDecision")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = returnFunc(vulnID, finalLicense, justification, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskService_MakeFinalLicenseDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeFinalLicenseDecision'
type LicenseRiskService_MakeFinalLicenseDecision_Call struct {
	*mock.Call
}

// MakeFinalLicenseDecision is a helper method to define mock.On call
//   - vulnID string
//   - finalLicense string
//   - justification string
//   - userID string
func (_e *LicenseRiskService_Expecter) MakeFinalLicenseDecision(vulnID interface{}, finalLicense interface{}, justification interface{}, userID interface{}) *LicenseRiskService_MakeFinalLicenseDecision_Call {
	return &LicenseRiskService_MakeFinalLicenseDecision_Call{Call: _e.mock.On("MakeFinalLicenseDecision", vulnID, finalLicense, justification, userID)}
}

func (_c *LicenseRiskService_MakeFinalLicenseDecision_Call) Run(run func(vulnID string, finalLicense string, justification string, userID string)) *LicenseRiskService_MakeFinalLicenseDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *LicenseRiskService_MakeFinalLicenseDecision_Call) Return(err error) *LicenseRiskService_MakeFinalLicenseDecision_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskService_MakeFinalLicenseDecision_Call) RunAndReturn(run func(vulnID string, finalLicense string, justification string, userID string) error) *LicenseRiskService_MakeFinalLicenseDecision_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicenseRiskState provides a mock function for the type LicenseRiskService
func (_mock *LicenseRiskService) UpdateLicenseRiskState(tx core.DB, userID string, licenseRisk *models.LicenseRisk, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, upstream int) (models.VulnEvent, error) {
	ret := _mock.Called(tx, userID, licenseRisk, statusType, justification, mechanicalJustification, upstream)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseRiskState")
	}

	var r0 models.VulnEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, *models.LicenseRisk, string, string, models.MechanicalJustificationType, int) (models.VulnEvent, error)); ok {
		return returnFunc(tx, userID, licenseRisk, statusType, justification, mechanicalJustification, upstream)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, *models.LicenseRisk, string, string, models.MechanicalJustificationType, int) models.VulnEvent); ok {
		r0 = returnFunc(tx, userID, licenseRisk, statusType, justification, mechanicalJustification, upstream)
	} else {
		r0 = ret.Get(0).(models.VulnEvent)
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, *models.LicenseRisk, string, string, models.MechanicalJustificationType, int) error); ok {
		r1 = returnFunc(tx, userID, licenseRisk, statusType, justification, mechanicalJustification, upstream)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskService_UpdateLicenseRiskState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicenseRiskState'
type LicenseRiskService_UpdateLicenseRiskState_Call struct {
	*mock.Call
}

// UpdateLicenseRiskState is a helper method to define mock.On call
//   - tx core.DB
//   - userID string
//   - licenseRisk *models.LicenseRisk
//   - statusType string
//   - justification string
//   - mechanicalJustification models.MechanicalJustificationType
//   - upstream int
func (_e *LicenseRiskService_Expecter) UpdateLicenseRiskState(tx interface{}, userID interface{}, licenseRisk interface{}, statusType interface{}, justification interface{}, mechanicalJustification interface{}, upstream interface{}) *LicenseRiskService_UpdateLicenseRiskState_Call {
	return &LicenseRiskService_UpdateLicenseRiskState_Call{Call: _e.mock.On("UpdateLicenseRiskState", tx, userID, licenseRisk, statusType, justification, mechanicalJustification, upstream)}
}

func (_c *LicenseRiskService_UpdateLicenseRiskState_Call) Run(run func(tx core.DB, userID string, licenseRisk *models.LicenseRisk, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, upstream int)) *LicenseRiskService_UpdateLicenseRiskState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *models.LicenseRisk
		if args[2] != nil {
			arg2 = args[2].(*models.LicenseRisk)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 models.MechanicalJustificationType
		if args[5] != nil {
			arg5 = args[5].(models.MechanicalJustificationType)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *LicenseRiskService_UpdateLicenseRiskState_Call) Return(vulnEvent models.VulnEvent, err error) *LicenseRiskService_UpdateLicenseRiskState_Call {
	_c.Call.Return(vulnEvent, err)
	return _c
}

func (_c *LicenseRiskService_UpdateLicenseRiskState_Call) RunAndReturn(run func(tx core.DB, userID string, licenseRisk *models.LicenseRisk, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType, upstream int) (models.VulnEvent, error)) *LicenseRiskService_UpdateLicenseRiskState_Call {
	_c.Call.Return(run)
	return _c
}
