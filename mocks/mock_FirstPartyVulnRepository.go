// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewFirstPartyVulnRepository creates a new instance of FirstPartyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirstPartyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirstPartyVulnRepository {
	mock := &FirstPartyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FirstPartyVulnRepository is an autogenerated mock type for the FirstPartyVulnRepository type
type FirstPartyVulnRepository struct {
	mock.Mock
}

type FirstPartyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FirstPartyVulnRepository) EXPECT() *FirstPartyVulnRepository_Expecter {
	return &FirstPartyVulnRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Activate(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type FirstPartyVulnRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx core.DB
//   - id string
func (_e *FirstPartyVulnRepository_Expecter) Activate(tx interface{}, id interface{}) *FirstPartyVulnRepository_Activate_Call {
	return &FirstPartyVulnRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *FirstPartyVulnRepository_Activate_Call) Run(run func(tx core.DB, id string)) *FirstPartyVulnRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Activate_Call) Return(err error) *FirstPartyVulnRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id string) error) *FirstPartyVulnRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) All() ([]models.FirstPartyVuln, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.FirstPartyVuln, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.FirstPartyVuln); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type FirstPartyVulnRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *FirstPartyVulnRepository_Expecter) All() *FirstPartyVulnRepository_All_Call {
	return &FirstPartyVulnRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *FirstPartyVulnRepository_All_Call) Run(run func()) *FirstPartyVulnRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FirstPartyVulnRepository_All_Call) Return(firstPartyVulns []models.FirstPartyVuln, err error) *FirstPartyVulnRepository_All_Call {
	_c.Call.Return(firstPartyVulns, err)
	return _c
}

func (_c *FirstPartyVulnRepository_All_Call) RunAndReturn(run func() ([]models.FirstPartyVuln, error)) *FirstPartyVulnRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyAndSave provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) ApplyAndSave(tx core.DB, dependencyVuln *models.FirstPartyVuln, vulnEvent *models.VulnEvent) error {
	ret := _mock.Called(tx, dependencyVuln, vulnEvent)

	if len(ret) == 0 {
		panic("no return value specified for ApplyAndSave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.FirstPartyVuln, *models.VulnEvent) error); ok {
		r0 = returnFunc(tx, dependencyVuln, vulnEvent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_ApplyAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyAndSave'
type FirstPartyVulnRepository_ApplyAndSave_Call struct {
	*mock.Call
}

// ApplyAndSave is a helper method to define mock.On call
//   - tx core.DB
//   - dependencyVuln *models.FirstPartyVuln
//   - vulnEvent *models.VulnEvent
func (_e *FirstPartyVulnRepository_Expecter) ApplyAndSave(tx interface{}, dependencyVuln interface{}, vulnEvent interface{}) *FirstPartyVulnRepository_ApplyAndSave_Call {
	return &FirstPartyVulnRepository_ApplyAndSave_Call{Call: _e.mock.On("ApplyAndSave", tx, dependencyVuln, vulnEvent)}
}

func (_c *FirstPartyVulnRepository_ApplyAndSave_Call) Run(run func(tx core.DB, dependencyVuln *models.FirstPartyVuln, vulnEvent *models.VulnEvent)) *FirstPartyVulnRepository_ApplyAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].(*models.FirstPartyVuln)
		}
		var arg2 *models.VulnEvent
		if args[2] != nil {
			arg2 = args[2].(*models.VulnEvent)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_ApplyAndSave_Call) Return(err error) *FirstPartyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_ApplyAndSave_Call) RunAndReturn(run func(tx core.DB, dependencyVuln *models.FirstPartyVuln, vulnEvent *models.VulnEvent) error) *FirstPartyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// FirstPartyVulnRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type FirstPartyVulnRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *FirstPartyVulnRepository_Expecter) Begin() *FirstPartyVulnRepository_Begin_Call {
	return &FirstPartyVulnRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *FirstPartyVulnRepository_Begin_Call) Run(run func()) *FirstPartyVulnRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Begin_Call) Return(v core.DB) *FirstPartyVulnRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *FirstPartyVulnRepository_Begin_Call) RunAndReturn(run func() core.DB) *FirstPartyVulnRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Create(tx core.DB, t *models.FirstPartyVuln) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FirstPartyVulnRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx core.DB
//   - t *models.FirstPartyVuln
func (_e *FirstPartyVulnRepository_Expecter) Create(tx interface{}, t interface{}) *FirstPartyVulnRepository_Create_Call {
	return &FirstPartyVulnRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *FirstPartyVulnRepository_Create_Call) Run(run func(tx core.DB, t *models.FirstPartyVuln)) *FirstPartyVulnRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].(*models.FirstPartyVuln)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Create_Call) Return(err error) *FirstPartyVulnRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.FirstPartyVuln) error) *FirstPartyVulnRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) CreateBatch(tx core.DB, ts []models.FirstPartyVuln) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type FirstPartyVulnRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ts []models.FirstPartyVuln
func (_e *FirstPartyVulnRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *FirstPartyVulnRepository_CreateBatch_Call {
	return &FirstPartyVulnRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *FirstPartyVulnRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.FirstPartyVuln)) *FirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].([]models.FirstPartyVuln)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_CreateBatch_Call) Return(err error) *FirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.FirstPartyVuln) error) *FirstPartyVulnRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Delete(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FirstPartyVulnRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx core.DB
//   - id string
func (_e *FirstPartyVulnRepository_Expecter) Delete(tx interface{}, id interface{}) *FirstPartyVulnRepository_Delete_Call {
	return &FirstPartyVulnRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *FirstPartyVulnRepository_Delete_Call) Run(run func(tx core.DB, id string)) *FirstPartyVulnRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Delete_Call) Return(err error) *FirstPartyVulnRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id string) error) *FirstPartyVulnRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) DeleteBatch(tx core.DB, ids []models.FirstPartyVuln) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type FirstPartyVulnRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx core.DB
//   - ids []models.FirstPartyVuln
func (_e *FirstPartyVulnRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *FirstPartyVulnRepository_DeleteBatch_Call {
	return &FirstPartyVulnRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *FirstPartyVulnRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.FirstPartyVuln)) *FirstPartyVulnRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].([]models.FirstPartyVuln)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_DeleteBatch_Call) Return(err error) *FirstPartyVulnRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.FirstPartyVuln) error) *FirstPartyVulnRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetId provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetByAssetId(tx core.DB, assetId uuid.UUID) ([]models.FirstPartyVuln, error) {
	ret := _mock.Called(tx, assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetId")
	}

	var r0 []models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) ([]models.FirstPartyVuln, error)); ok {
		return returnFunc(tx, assetId)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) []models.FirstPartyVuln); ok {
		r0 = returnFunc(tx, assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID) error); ok {
		r1 = returnFunc(tx, assetId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_GetByAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetId'
type FirstPartyVulnRepository_GetByAssetId_Call struct {
	*mock.Call
}

// GetByAssetId is a helper method to define mock.On call
//   - tx core.DB
//   - assetId uuid.UUID
func (_e *FirstPartyVulnRepository_Expecter) GetByAssetId(tx interface{}, assetId interface{}) *FirstPartyVulnRepository_GetByAssetId_Call {
	return &FirstPartyVulnRepository_GetByAssetId_Call{Call: _e.mock.On("GetByAssetId", tx, assetId)}
}

func (_c *FirstPartyVulnRepository_GetByAssetId_Call) Run(run func(tx core.DB, assetId uuid.UUID)) *FirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetId_Call) Return(firstPartyVulns []models.FirstPartyVuln, err error) *FirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Return(firstPartyVulns, err)
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetId_Call) RunAndReturn(run func(tx core.DB, assetId uuid.UUID) ([]models.FirstPartyVuln, error)) *FirstPartyVulnRepository_GetByAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersion provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetByAssetVersion(tx core.DB, assetVersionName string, assetID uuid.UUID) ([]models.FirstPartyVuln, error) {
	ret := _mock.Called(tx, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersion")
	}

	var r0 []models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID) ([]models.FirstPartyVuln, error)); ok {
		return returnFunc(tx, assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID) []models.FirstPartyVuln); ok {
		r0 = returnFunc(tx, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID) error); ok {
		r1 = returnFunc(tx, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_GetByAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersion'
type FirstPartyVulnRepository_GetByAssetVersion_Call struct {
	*mock.Call
}

// GetByAssetVersion is a helper method to define mock.On call
//   - tx core.DB
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *FirstPartyVulnRepository_Expecter) GetByAssetVersion(tx interface{}, assetVersionName interface{}, assetID interface{}) *FirstPartyVulnRepository_GetByAssetVersion_Call {
	return &FirstPartyVulnRepository_GetByAssetVersion_Call{Call: _e.mock.On("GetByAssetVersion", tx, assetVersionName, assetID)}
}

func (_c *FirstPartyVulnRepository_GetByAssetVersion_Call) Run(run func(tx core.DB, assetVersionName string, assetID uuid.UUID)) *FirstPartyVulnRepository_GetByAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetVersion_Call) Return(firstPartyVulns []models.FirstPartyVuln, err error) *FirstPartyVulnRepository_GetByAssetVersion_Call {
	_c.Call.Return(firstPartyVulns, err)
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetVersion_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetID uuid.UUID) ([]models.FirstPartyVuln, error)) *FirstPartyVulnRepository_GetByAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersionPaged provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetByAssetVersionPaged(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], map[string]int, error) {
	ret := _mock.Called(tx, assetVersionName, assetID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersionPaged")
	}

	var r0 core.Paged[models.FirstPartyVuln]
	var r1 map[string]int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVuln], map[string]int, error)); ok {
		return returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVuln]); ok {
		r0 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) map[string]int); ok {
		r1 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r2 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FirstPartyVulnRepository_GetByAssetVersionPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersionPaged'
type FirstPartyVulnRepository_GetByAssetVersionPaged_Call struct {
	*mock.Call
}

// GetByAssetVersionPaged is a helper method to define mock.On call
//   - tx core.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *FirstPartyVulnRepository_Expecter) GetByAssetVersionPaged(tx interface{}, assetVersionName interface{}, assetID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *FirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	return &FirstPartyVulnRepository_GetByAssetVersionPaged_Call{Call: _e.mock.On("GetByAssetVersionPaged", tx, assetVersionName, assetID, pageInfo, search, filter, sort)}
}

func (_c *FirstPartyVulnRepository_GetByAssetVersionPaged_Call) Run(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *FirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 core.PageInfo
		if args[3] != nil {
			arg3 = args[3].(core.PageInfo)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 []core.FilterQuery
		if args[5] != nil {
			arg5 = args[5].([]core.FilterQuery)
		}
		var arg6 []core.SortQuery
		if args[6] != nil {
			arg6 = args[6].([]core.SortQuery)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetVersionPaged_Call) Return(paged core.Paged[models.FirstPartyVuln], stringToInt map[string]int, err error) *FirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(paged, stringToInt, err)
	return _c
}

func (_c *FirstPartyVulnRepository_GetByAssetVersionPaged_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], map[string]int, error)) *FirstPartyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// FirstPartyVulnRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type FirstPartyVulnRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx core.DB
func (_e *FirstPartyVulnRepository_Expecter) GetDB(tx interface{}) *FirstPartyVulnRepository_GetDB_Call {
	return &FirstPartyVulnRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *FirstPartyVulnRepository_GetDB_Call) Run(run func(tx core.DB)) *FirstPartyVulnRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetDB_Call) Return(v core.DB) *FirstPartyVulnRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *FirstPartyVulnRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *FirstPartyVulnRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultFirstPartyVulnsByOrgIdPaged provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetDefaultFirstPartyVulnsByOrgIdPaged(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], error) {
	ret := _mock.Called(tx, userAllowedProjectIds, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultFirstPartyVulnsByOrgIdPaged")
	}

	var r0 core.Paged[models.FirstPartyVuln]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVuln], error)); ok {
		return returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVuln]); ok {
		r0 = returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultFirstPartyVulnsByOrgIdPaged'
type FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call struct {
	*mock.Call
}

// GetDefaultFirstPartyVulnsByOrgIdPaged is a helper method to define mock.On call
//   - tx core.DB
//   - userAllowedProjectIds []string
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *FirstPartyVulnRepository_Expecter) GetDefaultFirstPartyVulnsByOrgIdPaged(tx interface{}, userAllowedProjectIds interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	return &FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call{Call: _e.mock.On("GetDefaultFirstPartyVulnsByOrgIdPaged", tx, userAllowedProjectIds, pageInfo, search, filter, sort)}
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) Run(run func(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 core.PageInfo
		if args[2] != nil {
			arg2 = args[2].(core.PageInfo)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []core.FilterQuery
		if args[4] != nil {
			arg4 = args[4].([]core.FilterQuery)
		}
		var arg5 []core.SortQuery
		if args[5] != nil {
			arg5 = args[5].([]core.SortQuery)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) Return(paged core.Paged[models.FirstPartyVuln], err error) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call) RunAndReturn(run func(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], error)) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByOrgIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultFirstPartyVulnsByProjectIdPaged provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) GetDefaultFirstPartyVulnsByProjectIdPaged(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], error) {
	ret := _mock.Called(tx, projectID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultFirstPartyVulnsByProjectIdPaged")
	}

	var r0 core.Paged[models.FirstPartyVuln]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.FirstPartyVuln], error)); ok {
		return returnFunc(tx, projectID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.FirstPartyVuln]); ok {
		r0 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.FirstPartyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultFirstPartyVulnsByProjectIdPaged'
type FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call struct {
	*mock.Call
}

// GetDefaultFirstPartyVulnsByProjectIdPaged is a helper method to define mock.On call
//   - tx core.DB
//   - projectID uuid.UUID
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *FirstPartyVulnRepository_Expecter) GetDefaultFirstPartyVulnsByProjectIdPaged(tx interface{}, projectID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	return &FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call{Call: _e.mock.On("GetDefaultFirstPartyVulnsByProjectIdPaged", tx, projectID, pageInfo, search, filter, sort)}
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) Run(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 core.PageInfo
		if args[2] != nil {
			arg2 = args[2].(core.PageInfo)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []core.FilterQuery
		if args[4] != nil {
			arg4 = args[4].([]core.FilterQuery)
		}
		var arg5 []core.SortQuery
		if args[5] != nil {
			arg5 = args[5].([]core.SortQuery)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) Return(paged core.Paged[models.FirstPartyVuln], err error) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call) RunAndReturn(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.FirstPartyVuln], error)) *FirstPartyVulnRepository_GetDefaultFirstPartyVulnsByProjectIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) List(ids []string) ([]models.FirstPartyVuln, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]models.FirstPartyVuln, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []models.FirstPartyVuln); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FirstPartyVulnRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *FirstPartyVulnRepository_Expecter) List(ids interface{}) *FirstPartyVulnRepository_List_Call {
	return &FirstPartyVulnRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *FirstPartyVulnRepository_List_Call) Run(run func(ids []string)) *FirstPartyVulnRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_List_Call) Return(firstPartyVulns []models.FirstPartyVuln, err error) *FirstPartyVulnRepository_List_Call {
	_c.Call.Return(firstPartyVulns, err)
	return _c
}

func (_c *FirstPartyVulnRepository_List_Call) RunAndReturn(run func(ids []string) ([]models.FirstPartyVuln, error)) *FirstPartyVulnRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByScanner provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) ListByScanner(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.FirstPartyVuln, error) {
	ret := _mock.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByScanner")
	}

	var r0 []models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.FirstPartyVuln, error)); ok {
		return returnFunc(assetVersionName, assetID, scannerID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.FirstPartyVuln); ok {
		r0 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FirstPartyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_ListByScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByScanner'
type FirstPartyVulnRepository_ListByScanner_Call struct {
	*mock.Call
}

// ListByScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *FirstPartyVulnRepository_Expecter) ListByScanner(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *FirstPartyVulnRepository_ListByScanner_Call {
	return &FirstPartyVulnRepository_ListByScanner_Call{Call: _e.mock.On("ListByScanner", assetVersionName, assetID, scannerID)}
}

func (_c *FirstPartyVulnRepository_ListByScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *FirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_ListByScanner_Call) Return(firstPartyVulns []models.FirstPartyVuln, err error) *FirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(firstPartyVulns, err)
	return _c
}

func (_c *FirstPartyVulnRepository_ListByScanner_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.FirstPartyVuln, error)) *FirstPartyVulnRepository_ListByScanner_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Read(id string) (models.FirstPartyVuln, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.FirstPartyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.FirstPartyVuln, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.FirstPartyVuln); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.FirstPartyVuln)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type FirstPartyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *FirstPartyVulnRepository_Expecter) Read(id interface{}) *FirstPartyVulnRepository_Read_Call {
	return &FirstPartyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *FirstPartyVulnRepository_Read_Call) Run(run func(id string)) *FirstPartyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Read_Call) Return(firstPartyVuln models.FirstPartyVuln, err error) *FirstPartyVulnRepository_Read_Call {
	_c.Call.Return(firstPartyVuln, err)
	return _c
}

func (_c *FirstPartyVulnRepository_Read_Call) RunAndReturn(run func(id string) (models.FirstPartyVuln, error)) *FirstPartyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Save(tx core.DB, vuln *models.FirstPartyVuln) error {
	ret := _mock.Called(tx, vuln)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, vuln)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FirstPartyVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - vuln *models.FirstPartyVuln
func (_e *FirstPartyVulnRepository_Expecter) Save(tx interface{}, vuln interface{}) *FirstPartyVulnRepository_Save_Call {
	return &FirstPartyVulnRepository_Save_Call{Call: _e.mock.On("Save", tx, vuln)}
}

func (_c *FirstPartyVulnRepository_Save_Call) Run(run func(tx core.DB, vuln *models.FirstPartyVuln)) *FirstPartyVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 *models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].(*models.FirstPartyVuln)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Save_Call) Return(err error) *FirstPartyVulnRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Save_Call) RunAndReturn(run func(tx core.DB, vuln *models.FirstPartyVuln) error) *FirstPartyVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) SaveBatch(tx core.DB, vulns []models.FirstPartyVuln) error {
	ret := _mock.Called(tx, vulns)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, vulns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type FirstPartyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx core.DB
//   - vulns []models.FirstPartyVuln
func (_e *FirstPartyVulnRepository_Expecter) SaveBatch(tx interface{}, vulns interface{}) *FirstPartyVulnRepository_SaveBatch_Call {
	return &FirstPartyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, vulns)}
}

func (_c *FirstPartyVulnRepository_SaveBatch_Call) Run(run func(tx core.DB, vulns []models.FirstPartyVuln)) *FirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.FirstPartyVuln
		if args[1] != nil {
			arg1 = args[1].([]models.FirstPartyVuln)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_SaveBatch_Call) Return(err error) *FirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, vulns []models.FirstPartyVuln) error) *FirstPartyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Transaction(txFunc func(core.DB) error) error {
	ret := _mock.Called(txFunc)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(core.DB) error) error); ok {
		r0 = returnFunc(txFunc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type FirstPartyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - txFunc func(core.DB) error
func (_e *FirstPartyVulnRepository_Expecter) Transaction(txFunc interface{}) *FirstPartyVulnRepository_Transaction_Call {
	return &FirstPartyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", txFunc)}
}

func (_c *FirstPartyVulnRepository_Transaction_Call) Run(run func(txFunc func(core.DB) error)) *FirstPartyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(core.DB) error
		if args[0] != nil {
			arg0 = args[0].(func(core.DB) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Transaction_Call) Return(err error) *FirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Transaction_Call) RunAndReturn(run func(txFunc func(core.DB) error) error) *FirstPartyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type FirstPartyVulnRepository
func (_mock *FirstPartyVulnRepository) Upsert(t *[]*models.FirstPartyVuln, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.FirstPartyVuln, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type FirstPartyVulnRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t *[]*models.FirstPartyVuln
//   - conflictingColumns []clause.Column
//   - updateOnly []string
func (_e *FirstPartyVulnRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *FirstPartyVulnRepository_Upsert_Call {
	return &FirstPartyVulnRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *FirstPartyVulnRepository_Upsert_Call) Run(run func(t *[]*models.FirstPartyVuln, conflictingColumns []clause.Column, updateOnly []string)) *FirstPartyVulnRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *[]*models.FirstPartyVuln
		if args[0] != nil {
			arg0 = args[0].(*[]*models.FirstPartyVuln)
		}
		var arg1 []clause.Column
		if args[1] != nil {
			arg1 = args[1].([]clause.Column)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FirstPartyVulnRepository_Upsert_Call) Return(err error) *FirstPartyVulnRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.FirstPartyVuln, conflictingColumns []clause.Column, updateOnly []string) error) *FirstPartyVulnRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
