// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

type Verifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Verifier) EXPECT() *Verifier_Expecter {
	return &Verifier_Expecter{mock: &_m.Mock}
}

// VerifyRequestSignature provides a mock function for the type Verifier
func (_mock *Verifier) VerifyRequestSignature(req *http.Request) (string, string, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRequestSignature")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (string, string, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) string); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(*http.Request) error); ok {
		r2 = returnFunc(req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Verifier_VerifyRequestSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRequestSignature'
type Verifier_VerifyRequestSignature_Call struct {
	*mock.Call
}

// VerifyRequestSignature is a helper method to define mock.On call
//   - req
func (_e *Verifier_Expecter) VerifyRequestSignature(req interface{}) *Verifier_VerifyRequestSignature_Call {
	return &Verifier_VerifyRequestSignature_Call{Call: _e.mock.On("VerifyRequestSignature", req)}
}

func (_c *Verifier_VerifyRequestSignature_Call) Run(run func(req *http.Request)) *Verifier_VerifyRequestSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *Verifier_VerifyRequestSignature_Call) Return(s string, s1 string, err error) *Verifier_VerifyRequestSignature_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *Verifier_VerifyRequestSignature_Call) RunAndReturn(run func(req *http.Request) (string, string, error)) *Verifier_VerifyRequestSignature_Call {
	_c.Call.Return(run)
	return _c
}
