// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core/statistics"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewStatisticsService creates a new instance of StatisticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsService {
	mock := &StatisticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StatisticsService is an autogenerated mock type for the statisticsService type
type StatisticsService struct {
	mock.Mock
}

type StatisticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsService) EXPECT() *StatisticsService_Expecter {
	return &StatisticsService_Expecter{mock: &_m.Mock}
}

// GetAssetVersionCvssDistribution provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionCvssDistribution(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error) {
	ret := _mock.Called(assetVersionName, assetID, assetName)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionCvssDistribution")
	}

	var r0 models.AssetRiskDistribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (models.AssetRiskDistribution, error)); ok {
		return returnFunc(assetVersionName, assetID, assetName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) models.AssetRiskDistribution); ok {
		r0 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r0 = ret.Get(0).(models.AssetRiskDistribution)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionCvssDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionCvssDistribution'
type StatisticsService_GetAssetVersionCvssDistribution_Call struct {
	*mock.Call
}

// GetAssetVersionCvssDistribution is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - assetName
func (_e *StatisticsService_Expecter) GetAssetVersionCvssDistribution(assetVersionName interface{}, assetID interface{}, assetName interface{}) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	return &StatisticsService_GetAssetVersionCvssDistribution_Call{Call: _e.mock.On("GetAssetVersionCvssDistribution", assetVersionName, assetID, assetName)}
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) Run(run func(assetVersionName string, assetID uuid.UUID, assetName string)) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) Return(assetRiskDistribution models.AssetRiskDistribution, err error) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Return(assetRiskDistribution, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error)) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionRiskDistribution provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionRiskDistribution(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error) {
	ret := _mock.Called(assetVersionName, assetID, assetName)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionRiskDistribution")
	}

	var r0 models.AssetRiskDistribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (models.AssetRiskDistribution, error)); ok {
		return returnFunc(assetVersionName, assetID, assetName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) models.AssetRiskDistribution); ok {
		r0 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r0 = ret.Get(0).(models.AssetRiskDistribution)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionRiskDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionRiskDistribution'
type StatisticsService_GetAssetVersionRiskDistribution_Call struct {
	*mock.Call
}

// GetAssetVersionRiskDistribution is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - assetName
func (_e *StatisticsService_Expecter) GetAssetVersionRiskDistribution(assetVersionName interface{}, assetID interface{}, assetName interface{}) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	return &StatisticsService_GetAssetVersionRiskDistribution_Call{Call: _e.mock.On("GetAssetVersionRiskDistribution", assetVersionName, assetID, assetName)}
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) Run(run func(assetVersionName string, assetID uuid.UUID, assetName string)) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) Return(assetRiskDistribution models.AssetRiskDistribution, err error) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Return(assetRiskDistribution, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error)) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionRiskHistory(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.AssetRiskHistory, error) {
	ret := _mock.Called(assetVersionName, assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionRiskHistory")
	}

	var r0 []models.AssetRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) ([]models.AssetRiskHistory, error)); ok {
		return returnFunc(assetVersionName, assetID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) []models.AssetRiskHistory); ok {
		r0 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssetRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionRiskHistory'
type StatisticsService_GetAssetVersionRiskHistory_Call struct {
	*mock.Call
}

// GetAssetVersionRiskHistory is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - start
//   - end
func (_e *StatisticsService_Expecter) GetAssetVersionRiskHistory(assetVersionName interface{}, assetID interface{}, start interface{}, end interface{}) *StatisticsService_GetAssetVersionRiskHistory_Call {
	return &StatisticsService_GetAssetVersionRiskHistory_Call{Call: _e.mock.On("GetAssetVersionRiskHistory", assetVersionName, assetID, start, end)}
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Run(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Return(assetRiskHistorys []models.AssetRiskHistory, err error) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(assetRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.AssetRiskHistory, error)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageFixingTime provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAverageFixingTime(assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error) {
	ret := _mock.Called(assetVersionName, assetID, severity)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageFixingTime")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (time.Duration, error)); ok {
		return returnFunc(assetVersionName, assetID, severity)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) time.Duration); ok {
		r0 = returnFunc(assetVersionName, assetID, severity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, severity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAverageFixingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageFixingTime'
type StatisticsService_GetAverageFixingTime_Call struct {
	*mock.Call
}

// GetAverageFixingTime is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - severity
func (_e *StatisticsService_Expecter) GetAverageFixingTime(assetVersionName interface{}, assetID interface{}, severity interface{}) *StatisticsService_GetAverageFixingTime_Call {
	return &StatisticsService_GetAverageFixingTime_Call{Call: _e.mock.On("GetAverageFixingTime", assetVersionName, assetID, severity)}
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Run(run func(assetVersionName string, assetID uuid.UUID, severity string)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Return(duration time.Duration, err error) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentRisk provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetComponentRisk(assetVersionName string, assetID uuid.UUID) (map[string]float64, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentRisk")
	}

	var r0 map[string]float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]float64, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) map[string]float64); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetComponentRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentRisk'
type StatisticsService_GetComponentRisk_Call struct {
	*mock.Call
}

// GetComponentRisk is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *StatisticsService_Expecter) GetComponentRisk(assetVersionName interface{}, assetID interface{}) *StatisticsService_GetComponentRisk_Call {
	return &StatisticsService_GetComponentRisk_Call{Call: _e.mock.On("GetComponentRisk", assetVersionName, assetID)}
}

func (_c *StatisticsService_GetComponentRisk_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) Return(stringToFloat64 map[string]float64, err error) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(stringToFloat64, err)
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (map[string]float64, error)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyCountPerscanner provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetDependencyCountPerscanner(assetVersionName string, assetID uuid.UUID) (map[string]int, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyCountPerscanner")
	}

	var r0 map[string]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]int, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) map[string]int); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetDependencyCountPerscanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyCountPerscanner'
type StatisticsService_GetDependencyCountPerscanner_Call struct {
	*mock.Call
}

// GetDependencyCountPerscanner is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *StatisticsService_Expecter) GetDependencyCountPerscanner(assetVersionName interface{}, assetID interface{}) *StatisticsService_GetDependencyCountPerscanner_Call {
	return &StatisticsService_GetDependencyCountPerscanner_Call{Call: _e.mock.On("GetDependencyCountPerscanner", assetVersionName, assetID)}
}

func (_c *StatisticsService_GetDependencyCountPerscanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *StatisticsService_GetDependencyCountPerscanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsService_GetDependencyCountPerscanner_Call) Return(stringToInt map[string]int, err error) *StatisticsService_GetDependencyCountPerscanner_Call {
	_c.Call.Return(stringToInt, err)
	return _c
}

func (_c *StatisticsService_GetDependencyCountPerscanner_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (map[string]int, error)) *StatisticsService_GetDependencyCountPerscanner_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnAggregationStateAndChangeSince provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetDependencyVulnAggregationStateAndChangeSince(assetVersionName string, assetID uuid.UUID, calculateChangeTo time.Time) (statistics.DependencyVulnAggregationStateAndChange, error) {
	ret := _mock.Called(assetVersionName, assetID, calculateChangeTo)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnAggregationStateAndChangeSince")
	}

	var r0 statistics.DependencyVulnAggregationStateAndChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time) (statistics.DependencyVulnAggregationStateAndChange, error)); ok {
		return returnFunc(assetVersionName, assetID, calculateChangeTo)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time) statistics.DependencyVulnAggregationStateAndChange); ok {
		r0 = returnFunc(assetVersionName, assetID, calculateChangeTo)
	} else {
		r0 = ret.Get(0).(statistics.DependencyVulnAggregationStateAndChange)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(assetVersionName, assetID, calculateChangeTo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnAggregationStateAndChangeSince'
type StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call struct {
	*mock.Call
}

// GetDependencyVulnAggregationStateAndChangeSince is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - calculateChangeTo
func (_e *StatisticsService_Expecter) GetDependencyVulnAggregationStateAndChangeSince(assetVersionName interface{}, assetID interface{}, calculateChangeTo interface{}) *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call {
	return &StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call{Call: _e.mock.On("GetDependencyVulnAggregationStateAndChangeSince", assetVersionName, assetID, calculateChangeTo)}
}

func (_c *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call) Run(run func(assetVersionName string, assetID uuid.UUID, calculateChangeTo time.Time)) *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call) Return(dependencyVulnAggregationStateAndChange statistics.DependencyVulnAggregationStateAndChange, err error) *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call {
	_c.Call.Return(dependencyVulnAggregationStateAndChange, err)
	return _c
}

func (_c *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, calculateChangeTo time.Time) (statistics.DependencyVulnAggregationStateAndChange, error)) *StatisticsService_GetDependencyVulnAggregationStateAndChangeSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnCountByScannerId provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetDependencyVulnCountByScannerId(assetVersionName string, assetID uuid.UUID) (map[string]int, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnCountByScannerId")
	}

	var r0 map[string]int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]int, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) map[string]int); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetDependencyVulnCountByScannerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnCountByScannerId'
type StatisticsService_GetDependencyVulnCountByScannerId_Call struct {
	*mock.Call
}

// GetDependencyVulnCountByScannerId is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *StatisticsService_Expecter) GetDependencyVulnCountByScannerId(assetVersionName interface{}, assetID interface{}) *StatisticsService_GetDependencyVulnCountByScannerId_Call {
	return &StatisticsService_GetDependencyVulnCountByScannerId_Call{Call: _e.mock.On("GetDependencyVulnCountByScannerId", assetVersionName, assetID)}
}

func (_c *StatisticsService_GetDependencyVulnCountByScannerId_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *StatisticsService_GetDependencyVulnCountByScannerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *StatisticsService_GetDependencyVulnCountByScannerId_Call) Return(stringToInt map[string]int, err error) *StatisticsService_GetDependencyVulnCountByScannerId_Call {
	_c.Call.Return(stringToInt, err)
	return _c
}

func (_c *StatisticsService_GetDependencyVulnCountByScannerId_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (map[string]int, error)) *StatisticsService_GetDependencyVulnCountByScannerId_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetProjectRiskHistory(projectID uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error) {
	ret := _mock.Called(projectID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectRiskHistory")
	}

	var r0 []models.ProjectRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)); ok {
		return returnFunc(projectID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ProjectRiskHistory); ok {
		r0 = returnFunc(projectID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProjectRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(projectID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetProjectRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectRiskHistory'
type StatisticsService_GetProjectRiskHistory_Call struct {
	*mock.Call
}

// GetProjectRiskHistory is a helper method to define mock.On call
//   - projectID
//   - start
//   - end
func (_e *StatisticsService_Expecter) GetProjectRiskHistory(projectID interface{}, start interface{}, end interface{}) *StatisticsService_GetProjectRiskHistory_Call {
	return &StatisticsService_GetProjectRiskHistory_Call{Call: _e.mock.On("GetProjectRiskHistory", projectID, start, end)}
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) Run(run func(projectID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) Return(projectRiskHistorys []models.ProjectRiskHistory, err error) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(projectRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) RunAndReturn(run func(projectID uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error)) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssetRiskAggregation provides a mock function for the type StatisticsService
func (_mock *StatisticsService) UpdateAssetRiskAggregation(assetVersion *models.AssetVersion, assetID uuid.UUID, start time.Time, end time.Time, updateProject bool) error {
	ret := _mock.Called(assetVersion, assetID, start, end, updateProject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRiskAggregation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.AssetVersion, uuid.UUID, time.Time, time.Time, bool) error); ok {
		r0 = returnFunc(assetVersion, assetID, start, end, updateProject)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StatisticsService_UpdateAssetRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRiskAggregation'
type StatisticsService_UpdateAssetRiskAggregation_Call struct {
	*mock.Call
}

// UpdateAssetRiskAggregation is a helper method to define mock.On call
//   - assetVersion
//   - assetID
//   - start
//   - end
//   - updateProject
func (_e *StatisticsService_Expecter) UpdateAssetRiskAggregation(assetVersion interface{}, assetID interface{}, start interface{}, end interface{}, updateProject interface{}) *StatisticsService_UpdateAssetRiskAggregation_Call {
	return &StatisticsService_UpdateAssetRiskAggregation_Call{Call: _e.mock.On("UpdateAssetRiskAggregation", assetVersion, assetID, start, end, updateProject)}
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) Run(run func(assetVersion *models.AssetVersion, assetID uuid.UUID, start time.Time, end time.Time, updateProject bool)) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AssetVersion), args[1].(uuid.UUID), args[2].(time.Time), args[3].(time.Time), args[4].(bool))
	})
	return _c
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) Return(err error) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) RunAndReturn(run func(assetVersion *models.AssetVersion, assetID uuid.UUID, start time.Time, end time.Time, updateProject bool) error) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}
