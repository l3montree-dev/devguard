// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewStatisticsService creates a new instance of StatisticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsService {
	mock := &StatisticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StatisticsService is an autogenerated mock type for the StatisticsService type
type StatisticsService struct {
	mock.Mock
}

type StatisticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsService) EXPECT() *StatisticsService_Expecter {
	return &StatisticsService_Expecter{mock: &_m.Mock}
}

// GetArtifactRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetArtifactRiskHistory(artifactName string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifactRiskHistory")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetArtifactRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifactRiskHistory'
type StatisticsService_GetArtifactRiskHistory_Call struct {
	*mock.Call
}

// GetArtifactRiskHistory is a helper method to define mock.On call
//   - artifactName string
//   - assetVersionName string
//   - assetID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) GetArtifactRiskHistory(artifactName interface{}, assetVersionName interface{}, assetID interface{}, start interface{}, end interface{}) *StatisticsService_GetArtifactRiskHistory_Call {
	return &StatisticsService_GetArtifactRiskHistory_Call{Call: _e.mock.On("GetArtifactRiskHistory", artifactName, assetVersionName, assetID, start, end)}
}

func (_c *StatisticsService_GetArtifactRiskHistory_Call) Run(run func(artifactName string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetArtifactRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 time.Time
		if args[4] != nil {
			arg4 = args[4].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *StatisticsService_GetArtifactRiskHistory_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *StatisticsService_GetArtifactRiskHistory_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetArtifactRiskHistory_Call) RunAndReturn(run func(artifactName string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *StatisticsService_GetArtifactRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionRiskHistory(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(assetVersionName, assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionRiskHistory")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(assetVersionName, assetID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionRiskHistory'
type StatisticsService_GetAssetVersionRiskHistory_Call struct {
	*mock.Call
}

// GetAssetVersionRiskHistory is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) GetAssetVersionRiskHistory(assetVersionName interface{}, assetID interface{}, start interface{}, end interface{}) *StatisticsService_GetAssetVersionRiskHistory_Call {
	return &StatisticsService_GetAssetVersionRiskHistory_Call{Call: _e.mock.On("GetAssetVersionRiskHistory", assetVersionName, assetID, start, end)}
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Run(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageFixingTime provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAverageFixingTime(artifactName string, assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID, severity)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageFixingTime")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID, string) (time.Duration, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID, severity)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID, string) time.Duration); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID, severity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, uuid.UUID, string) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID, severity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAverageFixingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageFixingTime'
type StatisticsService_GetAverageFixingTime_Call struct {
	*mock.Call
}

// GetAverageFixingTime is a helper method to define mock.On call
//   - artifactName string
//   - assetVersionName string
//   - assetID uuid.UUID
//   - severity string
func (_e *StatisticsService_Expecter) GetAverageFixingTime(artifactName interface{}, assetVersionName interface{}, assetID interface{}, severity interface{}) *StatisticsService_GetAverageFixingTime_Call {
	return &StatisticsService_GetAverageFixingTime_Call{Call: _e.mock.On("GetAverageFixingTime", artifactName, assetVersionName, assetID, severity)}
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Run(run func(artifactName string, assetVersionName string, assetID uuid.UUID, severity string)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Return(duration time.Duration, err error) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) RunAndReturn(run func(artifactName string, assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageFixingTimeForRelease provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAverageFixingTimeForRelease(releaseID uuid.UUID, severity string) (time.Duration, error) {
	ret := _mock.Called(releaseID, severity)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageFixingTimeForRelease")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) (time.Duration, error)); ok {
		return returnFunc(releaseID, severity)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) time.Duration); ok {
		r0 = returnFunc(releaseID, severity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(releaseID, severity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAverageFixingTimeForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageFixingTimeForRelease'
type StatisticsService_GetAverageFixingTimeForRelease_Call struct {
	*mock.Call
}

// GetAverageFixingTimeForRelease is a helper method to define mock.On call
//   - releaseID uuid.UUID
//   - severity string
func (_e *StatisticsService_Expecter) GetAverageFixingTimeForRelease(releaseID interface{}, severity interface{}) *StatisticsService_GetAverageFixingTimeForRelease_Call {
	return &StatisticsService_GetAverageFixingTimeForRelease_Call{Call: _e.mock.On("GetAverageFixingTimeForRelease", releaseID, severity)}
}

func (_c *StatisticsService_GetAverageFixingTimeForRelease_Call) Run(run func(releaseID uuid.UUID, severity string)) *StatisticsService_GetAverageFixingTimeForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAverageFixingTimeForRelease_Call) Return(duration time.Duration, err error) *StatisticsService_GetAverageFixingTimeForRelease_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsService_GetAverageFixingTimeForRelease_Call) RunAndReturn(run func(releaseID uuid.UUID, severity string) (time.Duration, error)) *StatisticsService_GetAverageFixingTimeForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentRisk provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetComponentRisk(artifactName string, assetVersionName string, assetID uuid.UUID) (map[string]models.Distribution, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentRisk")
	}

	var r0 map[string]models.Distribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) (map[string]models.Distribution, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) map[string]models.Distribution); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Distribution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, uuid.UUID) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetComponentRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentRisk'
type StatisticsService_GetComponentRisk_Call struct {
	*mock.Call
}

// GetComponentRisk is a helper method to define mock.On call
//   - artifactName string
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *StatisticsService_Expecter) GetComponentRisk(artifactName interface{}, assetVersionName interface{}, assetID interface{}) *StatisticsService_GetComponentRisk_Call {
	return &StatisticsService_GetComponentRisk_Call{Call: _e.mock.On("GetComponentRisk", artifactName, assetVersionName, assetID)}
}

func (_c *StatisticsService_GetComponentRisk_Call) Run(run func(artifactName string, assetVersionName string, assetID uuid.UUID)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) Return(stringToDistribution map[string]models.Distribution, err error) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(stringToDistribution, err)
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) RunAndReturn(run func(artifactName string, assetVersionName string, assetID uuid.UUID) (map[string]models.Distribution, error)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetReleaseRiskHistory(releaseID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(releaseID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseRiskHistory")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(releaseID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(releaseID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(releaseID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetReleaseRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseRiskHistory'
type StatisticsService_GetReleaseRiskHistory_Call struct {
	*mock.Call
}

// GetReleaseRiskHistory is a helper method to define mock.On call
//   - releaseID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) GetReleaseRiskHistory(releaseID interface{}, start interface{}, end interface{}) *StatisticsService_GetReleaseRiskHistory_Call {
	return &StatisticsService_GetReleaseRiskHistory_Call{Call: _e.mock.On("GetReleaseRiskHistory", releaseID, start, end)}
}

func (_c *StatisticsService_GetReleaseRiskHistory_Call) Run(run func(releaseID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetReleaseRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetReleaseRiskHistory_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *StatisticsService_GetReleaseRiskHistory_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetReleaseRiskHistory_Call) RunAndReturn(run func(releaseID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *StatisticsService_GetReleaseRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArtifactRiskAggregation provides a mock function for the type StatisticsService
func (_mock *StatisticsService) UpdateArtifactRiskAggregation(artifact *models.Artifact, assetID uuid.UUID, begin time.Time, end time.Time) error {
	ret := _mock.Called(artifact, assetID, begin, end)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtifactRiskAggregation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Artifact, uuid.UUID, time.Time, time.Time) error); ok {
		r0 = returnFunc(artifact, assetID, begin, end)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StatisticsService_UpdateArtifactRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArtifactRiskAggregation'
type StatisticsService_UpdateArtifactRiskAggregation_Call struct {
	*mock.Call
}

// UpdateArtifactRiskAggregation is a helper method to define mock.On call
//   - artifact *models.Artifact
//   - assetID uuid.UUID
//   - begin time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) UpdateArtifactRiskAggregation(artifact interface{}, assetID interface{}, begin interface{}, end interface{}) *StatisticsService_UpdateArtifactRiskAggregation_Call {
	return &StatisticsService_UpdateArtifactRiskAggregation_Call{Call: _e.mock.On("UpdateArtifactRiskAggregation", artifact, assetID, begin, end)}
}

func (_c *StatisticsService_UpdateArtifactRiskAggregation_Call) Run(run func(artifact *models.Artifact, assetID uuid.UUID, begin time.Time, end time.Time)) *StatisticsService_UpdateArtifactRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*models.Artifact)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *StatisticsService_UpdateArtifactRiskAggregation_Call) Return(err error) *StatisticsService_UpdateArtifactRiskAggregation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StatisticsService_UpdateArtifactRiskAggregation_Call) RunAndReturn(run func(artifact *models.Artifact, assetID uuid.UUID, begin time.Time, end time.Time) error) *StatisticsService_UpdateArtifactRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}
