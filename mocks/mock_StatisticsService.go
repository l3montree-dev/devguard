// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewStatisticsService creates a new instance of StatisticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsService {
	mock := &StatisticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StatisticsService is an autogenerated mock type for the StatisticsService type
type StatisticsService struct {
	mock.Mock
}

type StatisticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsService) EXPECT() *StatisticsService_Expecter {
	return &StatisticsService_Expecter{mock: &_m.Mock}
}

// GetAssetVersionCvssDistribution provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionCvssDistribution(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error) {
	ret := _mock.Called(assetVersionName, assetID, assetName)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionCvssDistribution")
	}

	var r0 models.AssetRiskDistribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (models.AssetRiskDistribution, error)); ok {
		return returnFunc(assetVersionName, assetID, assetName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) models.AssetRiskDistribution); ok {
		r0 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r0 = ret.Get(0).(models.AssetRiskDistribution)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionCvssDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionCvssDistribution'
type StatisticsService_GetAssetVersionCvssDistribution_Call struct {
	*mock.Call
}

// GetAssetVersionCvssDistribution is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - assetName string
func (_e *StatisticsService_Expecter) GetAssetVersionCvssDistribution(assetVersionName interface{}, assetID interface{}, assetName interface{}) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	return &StatisticsService_GetAssetVersionCvssDistribution_Call{Call: _e.mock.On("GetAssetVersionCvssDistribution", assetVersionName, assetID, assetName)}
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) Run(run func(assetVersionName string, assetID uuid.UUID, assetName string)) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) Return(assetRiskDistribution models.AssetRiskDistribution, err error) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Return(assetRiskDistribution, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionCvssDistribution_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error)) *StatisticsService_GetAssetVersionCvssDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionRiskDistribution provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionRiskDistribution(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error) {
	ret := _mock.Called(assetVersionName, assetID, assetName)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionRiskDistribution")
	}

	var r0 models.AssetRiskDistribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (models.AssetRiskDistribution, error)); ok {
		return returnFunc(assetVersionName, assetID, assetName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) models.AssetRiskDistribution); ok {
		r0 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r0 = ret.Get(0).(models.AssetRiskDistribution)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, assetName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionRiskDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionRiskDistribution'
type StatisticsService_GetAssetVersionRiskDistribution_Call struct {
	*mock.Call
}

// GetAssetVersionRiskDistribution is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - assetName string
func (_e *StatisticsService_Expecter) GetAssetVersionRiskDistribution(assetVersionName interface{}, assetID interface{}, assetName interface{}) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	return &StatisticsService_GetAssetVersionRiskDistribution_Call{Call: _e.mock.On("GetAssetVersionRiskDistribution", assetVersionName, assetID, assetName)}
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) Run(run func(assetVersionName string, assetID uuid.UUID, assetName string)) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) Return(assetRiskDistribution models.AssetRiskDistribution, err error) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Return(assetRiskDistribution, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskDistribution_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, assetName string) (models.AssetRiskDistribution, error)) *StatisticsService_GetAssetVersionRiskDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAssetVersionRiskHistory(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(assetVersionName, assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionRiskHistory")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(assetVersionName, assetID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(assetVersionName, assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAssetVersionRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionRiskHistory'
type StatisticsService_GetAssetVersionRiskHistory_Call struct {
	*mock.Call
}

// GetAssetVersionRiskHistory is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) GetAssetVersionRiskHistory(assetVersionName interface{}, assetID interface{}, start interface{}, end interface{}) *StatisticsService_GetAssetVersionRiskHistory_Call {
	return &StatisticsService_GetAssetVersionRiskHistory_Call{Call: _e.mock.On("GetAssetVersionRiskHistory", assetVersionName, assetID, start, end)}
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Run(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetAssetVersionRiskHistory_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *StatisticsService_GetAssetVersionRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAverageFixingTime provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetAverageFixingTime(assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error) {
	ret := _mock.Called(assetVersionName, assetID, severity)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageFixingTime")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) (time.Duration, error)); ok {
		return returnFunc(assetVersionName, assetID, severity)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) time.Duration); ok {
		r0 = returnFunc(assetVersionName, assetID, severity)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, severity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetAverageFixingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageFixingTime'
type StatisticsService_GetAverageFixingTime_Call struct {
	*mock.Call
}

// GetAverageFixingTime is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
//   - severity string
func (_e *StatisticsService_Expecter) GetAverageFixingTime(assetVersionName interface{}, assetID interface{}, severity interface{}) *StatisticsService_GetAverageFixingTime_Call {
	return &StatisticsService_GetAverageFixingTime_Call{Call: _e.mock.On("GetAverageFixingTime", assetVersionName, assetID, severity)}
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Run(run func(assetVersionName string, assetID uuid.UUID, severity string)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) Return(duration time.Duration, err error) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsService_GetAverageFixingTime_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, severity string) (time.Duration, error)) *StatisticsService_GetAverageFixingTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentRisk provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetComponentRisk(assetVersionName string, assetID uuid.UUID) (map[string]models.Distribution, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentRisk")
	}

	var r0 map[string]models.Distribution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]models.Distribution, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) map[string]models.Distribution); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Distribution)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetComponentRisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentRisk'
type StatisticsService_GetComponentRisk_Call struct {
	*mock.Call
}

// GetComponentRisk is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *StatisticsService_Expecter) GetComponentRisk(assetVersionName interface{}, assetID interface{}) *StatisticsService_GetComponentRisk_Call {
	return &StatisticsService_GetComponentRisk_Call{Call: _e.mock.On("GetComponentRisk", assetVersionName, assetID)}
}

func (_c *StatisticsService_GetComponentRisk_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) Return(stringToDistribution map[string]models.Distribution, err error) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(stringToDistribution, err)
	return _c
}

func (_c *StatisticsService_GetComponentRisk_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (map[string]models.Distribution, error)) *StatisticsService_GetComponentRisk_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectRiskHistory provides a mock function for the type StatisticsService
func (_mock *StatisticsService) GetProjectRiskHistory(projectID uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error) {
	ret := _mock.Called(projectID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectRiskHistory")
	}

	var r0 []models.ProjectRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ProjectRiskHistory, error)); ok {
		return returnFunc(projectID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ProjectRiskHistory); ok {
		r0 = returnFunc(projectID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProjectRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(projectID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsService_GetProjectRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectRiskHistory'
type StatisticsService_GetProjectRiskHistory_Call struct {
	*mock.Call
}

// GetProjectRiskHistory is a helper method to define mock.On call
//   - projectID uuid.UUID
//   - start time.Time
//   - end time.Time
func (_e *StatisticsService_Expecter) GetProjectRiskHistory(projectID interface{}, start interface{}, end interface{}) *StatisticsService_GetProjectRiskHistory_Call {
	return &StatisticsService_GetProjectRiskHistory_Call{Call: _e.mock.On("GetProjectRiskHistory", projectID, start, end)}
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) Run(run func(projectID uuid.UUID, start time.Time, end time.Time)) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) Return(projectRiskHistorys []models.ProjectRiskHistory, err error) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(projectRiskHistorys, err)
	return _c
}

func (_c *StatisticsService_GetProjectRiskHistory_Call) RunAndReturn(run func(projectID uuid.UUID, start time.Time, end time.Time) ([]models.ProjectRiskHistory, error)) *StatisticsService_GetProjectRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssetRiskAggregation provides a mock function for the type StatisticsService
func (_mock *StatisticsService) UpdateAssetRiskAggregation(assetVersion *models.AssetVersion, assetID uuid.UUID, begin time.Time, end time.Time, propagateToProject bool) error {
	ret := _mock.Called(assetVersion, assetID, begin, end, propagateToProject)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetRiskAggregation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.AssetVersion, uuid.UUID, time.Time, time.Time, bool) error); ok {
		r0 = returnFunc(assetVersion, assetID, begin, end, propagateToProject)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StatisticsService_UpdateAssetRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssetRiskAggregation'
type StatisticsService_UpdateAssetRiskAggregation_Call struct {
	*mock.Call
}

// UpdateAssetRiskAggregation is a helper method to define mock.On call
//   - assetVersion *models.AssetVersion
//   - assetID uuid.UUID
//   - begin time.Time
//   - end time.Time
//   - propagateToProject bool
func (_e *StatisticsService_Expecter) UpdateAssetRiskAggregation(assetVersion interface{}, assetID interface{}, begin interface{}, end interface{}, propagateToProject interface{}) *StatisticsService_UpdateAssetRiskAggregation_Call {
	return &StatisticsService_UpdateAssetRiskAggregation_Call{Call: _e.mock.On("UpdateAssetRiskAggregation", assetVersion, assetID, begin, end, propagateToProject)}
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) Run(run func(assetVersion *models.AssetVersion, assetID uuid.UUID, begin time.Time, end time.Time, propagateToProject bool)) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.AssetVersion
		if args[0] != nil {
			arg0 = args[0].(*models.AssetVersion)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) Return(err error) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StatisticsService_UpdateAssetRiskAggregation_Call) RunAndReturn(run func(assetVersion *models.AssetVersion, assetID uuid.UUID, begin time.Time, end time.Time, propagateToProject bool) error) *StatisticsService_UpdateAssetRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}
