// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewVulnRepository creates a new instance of VulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VulnRepository {
	mock := &VulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VulnRepository is an autogenerated mock type for the VulnRepository type
type VulnRepository struct {
	mock.Mock
}

type VulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VulnRepository) EXPECT() *VulnRepository_Expecter {
	return &VulnRepository_Expecter{mock: &_m.Mock}
}

// ApplyAndSave provides a mock function for the type VulnRepository
func (_mock *VulnRepository) ApplyAndSave(tx core.DB, dependencyVuln models.Vuln, vulnEvent *models.VulnEvent) error {
	ret := _mock.Called(tx, dependencyVuln, vulnEvent)

	if len(ret) == 0 {
		panic("no return value specified for ApplyAndSave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, models.Vuln, *models.VulnEvent) error); ok {
		r0 = returnFunc(tx, dependencyVuln, vulnEvent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VulnRepository_ApplyAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyAndSave'
type VulnRepository_ApplyAndSave_Call struct {
	*mock.Call
}

// ApplyAndSave is a helper method to define mock.On call
//   - tx
//   - dependencyVuln
//   - vulnEvent
func (_e *VulnRepository_Expecter) ApplyAndSave(tx interface{}, dependencyVuln interface{}, vulnEvent interface{}) *VulnRepository_ApplyAndSave_Call {
	return &VulnRepository_ApplyAndSave_Call{Call: _e.mock.On("ApplyAndSave", tx, dependencyVuln, vulnEvent)}
}

func (_c *VulnRepository_ApplyAndSave_Call) Run(run func(tx core.DB, dependencyVuln models.Vuln, vulnEvent *models.VulnEvent)) *VulnRepository_ApplyAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(models.Vuln), args[2].(*models.VulnEvent))
	})
	return _c
}

func (_c *VulnRepository_ApplyAndSave_Call) Return(err error) *VulnRepository_ApplyAndSave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VulnRepository_ApplyAndSave_Call) RunAndReturn(run func(tx core.DB, dependencyVuln models.Vuln, vulnEvent *models.VulnEvent) error) *VulnRepository_ApplyAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTicketID provides a mock function for the type VulnRepository
func (_mock *VulnRepository) FindByTicketID(tx core.DB, ticketID string) (models.Vuln, error) {
	ret := _mock.Called(tx, ticketID)

	if len(ret) == 0 {
		panic("no return value specified for FindByTicketID")
	}

	var r0 models.Vuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) (models.Vuln, error)); ok {
		return returnFunc(tx, ticketID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) models.Vuln); ok {
		r0 = returnFunc(tx, ticketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Vuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string) error); ok {
		r1 = returnFunc(tx, ticketID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VulnRepository_FindByTicketID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTicketID'
type VulnRepository_FindByTicketID_Call struct {
	*mock.Call
}

// FindByTicketID is a helper method to define mock.On call
//   - tx
//   - ticketID
func (_e *VulnRepository_Expecter) FindByTicketID(tx interface{}, ticketID interface{}) *VulnRepository_FindByTicketID_Call {
	return &VulnRepository_FindByTicketID_Call{Call: _e.mock.On("FindByTicketID", tx, ticketID)}
}

func (_c *VulnRepository_FindByTicketID_Call) Run(run func(tx core.DB, ticketID string)) *VulnRepository_FindByTicketID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *VulnRepository_FindByTicketID_Call) Return(vuln models.Vuln, err error) *VulnRepository_FindByTicketID_Call {
	_c.Call.Return(vuln, err)
	return _c
}

func (_c *VulnRepository_FindByTicketID_Call) RunAndReturn(run func(tx core.DB, ticketID string) (models.Vuln, error)) *VulnRepository_FindByTicketID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgFromVuln provides a mock function for the type VulnRepository
func (_mock *VulnRepository) GetOrgFromVuln(vuln models.Vuln) (models.Org, error) {
	ret := _mock.Called(vuln)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgFromVuln")
	}

	var r0 models.Org
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.Vuln) (models.Org, error)); ok {
		return returnFunc(vuln)
	}
	if returnFunc, ok := ret.Get(0).(func(models.Vuln) models.Org); ok {
		r0 = returnFunc(vuln)
	} else {
		r0 = ret.Get(0).(models.Org)
	}
	if returnFunc, ok := ret.Get(1).(func(models.Vuln) error); ok {
		r1 = returnFunc(vuln)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VulnRepository_GetOrgFromVuln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgFromVuln'
type VulnRepository_GetOrgFromVuln_Call struct {
	*mock.Call
}

// GetOrgFromVuln is a helper method to define mock.On call
//   - vuln
func (_e *VulnRepository_Expecter) GetOrgFromVuln(vuln interface{}) *VulnRepository_GetOrgFromVuln_Call {
	return &VulnRepository_GetOrgFromVuln_Call{Call: _e.mock.On("GetOrgFromVuln", vuln)}
}

func (_c *VulnRepository_GetOrgFromVuln_Call) Run(run func(vuln models.Vuln)) *VulnRepository_GetOrgFromVuln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Vuln))
	})
	return _c
}

func (_c *VulnRepository_GetOrgFromVuln_Call) Return(org models.Org, err error) *VulnRepository_GetOrgFromVuln_Call {
	_c.Call.Return(org, err)
	return _c
}

func (_c *VulnRepository_GetOrgFromVuln_Call) RunAndReturn(run func(vuln models.Vuln) (models.Org, error)) *VulnRepository_GetOrgFromVuln_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type VulnRepository
func (_mock *VulnRepository) Save(db core.DB, vuln *models.Vuln) error {
	ret := _mock.Called(db, vuln)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Vuln) error); ok {
		r0 = returnFunc(db, vuln)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type VulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - db
//   - vuln
func (_e *VulnRepository_Expecter) Save(db interface{}, vuln interface{}) *VulnRepository_Save_Call {
	return &VulnRepository_Save_Call{Call: _e.mock.On("Save", db, vuln)}
}

func (_c *VulnRepository_Save_Call) Run(run func(db core.DB, vuln *models.Vuln)) *VulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Vuln))
	})
	return _c
}

func (_c *VulnRepository_Save_Call) Return(err error) *VulnRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VulnRepository_Save_Call) RunAndReturn(run func(db core.DB, vuln *models.Vuln) error) *VulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type VulnRepository
func (_mock *VulnRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type VulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *VulnRepository_Expecter) Transaction(fn interface{}) *VulnRepository_Transaction_Call {
	return &VulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *VulnRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *VulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *VulnRepository_Transaction_Call) Return(err error) *VulnRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VulnRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *VulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}
