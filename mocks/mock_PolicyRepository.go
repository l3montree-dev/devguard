// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewPolicyRepository creates a new instance of PolicyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolicyRepository {
	mock := &PolicyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PolicyRepository is an autogenerated mock type for the PolicyRepository type
type PolicyRepository struct {
	mock.Mock
}

type PolicyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PolicyRepository) EXPECT() *PolicyRepository_Expecter {
	return &PolicyRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Activate(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type PolicyRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx
//   - id
func (_e *PolicyRepository_Expecter) Activate(tx interface{}, id interface{}) *PolicyRepository_Activate_Call {
	return &PolicyRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *PolicyRepository_Activate_Call) Run(run func(tx core.DB, id uuid.UUID)) *PolicyRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_Activate_Call) Return(err error) *PolicyRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *PolicyRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) All() ([]models.Policy, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Policy, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Policy); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type PolicyRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *PolicyRepository_Expecter) All() *PolicyRepository_All_Call {
	return &PolicyRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *PolicyRepository_All_Call) Run(run func()) *PolicyRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PolicyRepository_All_Call) Return(policys []models.Policy, err error) *PolicyRepository_All_Call {
	_c.Call.Return(policys, err)
	return _c
}

func (_c *PolicyRepository_All_Call) RunAndReturn(run func() ([]models.Policy, error)) *PolicyRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// PolicyRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type PolicyRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *PolicyRepository_Expecter) Begin() *PolicyRepository_Begin_Call {
	return &PolicyRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *PolicyRepository_Begin_Call) Run(run func()) *PolicyRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PolicyRepository_Begin_Call) Return(v core.DB) *PolicyRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *PolicyRepository_Begin_Call) RunAndReturn(run func() core.DB) *PolicyRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Create(tx core.DB, t *models.Policy) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Policy) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PolicyRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx
//   - t
func (_e *PolicyRepository_Expecter) Create(tx interface{}, t interface{}) *PolicyRepository_Create_Call {
	return &PolicyRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *PolicyRepository_Create_Call) Run(run func(tx core.DB, t *models.Policy)) *PolicyRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Policy))
	})
	return _c
}

func (_c *PolicyRepository_Create_Call) Return(err error) *PolicyRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.Policy) error) *PolicyRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) CreateBatch(tx core.DB, ts []models.Policy) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Policy) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type PolicyRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *PolicyRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *PolicyRepository_CreateBatch_Call {
	return &PolicyRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *PolicyRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.Policy)) *PolicyRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Policy))
	})
	return _c
}

func (_c *PolicyRepository_CreateBatch_Call) Return(err error) *PolicyRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Policy) error) *PolicyRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PolicyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *PolicyRepository_Expecter) Delete(tx interface{}, id interface{}) *PolicyRepository_Delete_Call {
	return &PolicyRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *PolicyRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *PolicyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_Delete_Call) Return(err error) *PolicyRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *PolicyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) DeleteBatch(tx core.DB, ids []models.Policy) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Policy) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type PolicyRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx
//   - ids
func (_e *PolicyRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *PolicyRepository_DeleteBatch_Call {
	return &PolicyRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *PolicyRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.Policy)) *PolicyRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Policy))
	})
	return _c
}

func (_c *PolicyRepository_DeleteBatch_Call) Return(err error) *PolicyRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.Policy) error) *PolicyRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOrganizationId provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) FindByOrganizationId(organizationId uuid.UUID) ([]models.Policy, error) {
	ret := _mock.Called(organizationId)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrganizationId")
	}

	var r0 []models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.Policy, error)); ok {
		return returnFunc(organizationId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.Policy); ok {
		r0 = returnFunc(organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(organizationId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_FindByOrganizationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOrganizationId'
type PolicyRepository_FindByOrganizationId_Call struct {
	*mock.Call
}

// FindByOrganizationId is a helper method to define mock.On call
//   - organizationId
func (_e *PolicyRepository_Expecter) FindByOrganizationId(organizationId interface{}) *PolicyRepository_FindByOrganizationId_Call {
	return &PolicyRepository_FindByOrganizationId_Call{Call: _e.mock.On("FindByOrganizationId", organizationId)}
}

func (_c *PolicyRepository_FindByOrganizationId_Call) Run(run func(organizationId uuid.UUID)) *PolicyRepository_FindByOrganizationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_FindByOrganizationId_Call) Return(policys []models.Policy, err error) *PolicyRepository_FindByOrganizationId_Call {
	_c.Call.Return(policys, err)
	return _c
}

func (_c *PolicyRepository_FindByOrganizationId_Call) RunAndReturn(run func(organizationId uuid.UUID) ([]models.Policy, error)) *PolicyRepository_FindByOrganizationId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProjectId provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) FindByProjectId(projectId uuid.UUID) ([]models.Policy, error) {
	ret := _mock.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for FindByProjectId")
	}

	var r0 []models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.Policy, error)); ok {
		return returnFunc(projectId)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.Policy); ok {
		r0 = returnFunc(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_FindByProjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProjectId'
type PolicyRepository_FindByProjectId_Call struct {
	*mock.Call
}

// FindByProjectId is a helper method to define mock.On call
//   - projectId
func (_e *PolicyRepository_Expecter) FindByProjectId(projectId interface{}) *PolicyRepository_FindByProjectId_Call {
	return &PolicyRepository_FindByProjectId_Call{Call: _e.mock.On("FindByProjectId", projectId)}
}

func (_c *PolicyRepository_FindByProjectId_Call) Run(run func(projectId uuid.UUID)) *PolicyRepository_FindByProjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_FindByProjectId_Call) Return(policys []models.Policy, err error) *PolicyRepository_FindByProjectId_Call {
	_c.Call.Return(policys, err)
	return _c
}

func (_c *PolicyRepository_FindByProjectId_Call) RunAndReturn(run func(projectId uuid.UUID) ([]models.Policy, error)) *PolicyRepository_FindByProjectId_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommunityManagedPolicies provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) FindCommunityManagedPolicies() ([]models.Policy, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindCommunityManagedPolicies")
	}

	var r0 []models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Policy, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Policy); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_FindCommunityManagedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommunityManagedPolicies'
type PolicyRepository_FindCommunityManagedPolicies_Call struct {
	*mock.Call
}

// FindCommunityManagedPolicies is a helper method to define mock.On call
func (_e *PolicyRepository_Expecter) FindCommunityManagedPolicies() *PolicyRepository_FindCommunityManagedPolicies_Call {
	return &PolicyRepository_FindCommunityManagedPolicies_Call{Call: _e.mock.On("FindCommunityManagedPolicies")}
}

func (_c *PolicyRepository_FindCommunityManagedPolicies_Call) Run(run func()) *PolicyRepository_FindCommunityManagedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PolicyRepository_FindCommunityManagedPolicies_Call) Return(policys []models.Policy, err error) *PolicyRepository_FindCommunityManagedPolicies_Call {
	_c.Call.Return(policys, err)
	return _c
}

func (_c *PolicyRepository_FindCommunityManagedPolicies_Call) RunAndReturn(run func() ([]models.Policy, error)) *PolicyRepository_FindCommunityManagedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// PolicyRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type PolicyRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *PolicyRepository_Expecter) GetDB(tx interface{}) *PolicyRepository_GetDB_Call {
	return &PolicyRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *PolicyRepository_GetDB_Call) Run(run func(tx core.DB)) *PolicyRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *PolicyRepository_GetDB_Call) Return(v core.DB) *PolicyRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *PolicyRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *PolicyRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) List(ids []uuid.UUID) ([]models.Policy, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) ([]models.Policy, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) []models.Policy); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PolicyRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids
func (_e *PolicyRepository_Expecter) List(ids interface{}) *PolicyRepository_List_Call {
	return &PolicyRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *PolicyRepository_List_Call) Run(run func(ids []uuid.UUID)) *PolicyRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_List_Call) Return(policys []models.Policy, err error) *PolicyRepository_List_Call {
	_c.Call.Return(policys, err)
	return _c
}

func (_c *PolicyRepository_List_Call) RunAndReturn(run func(ids []uuid.UUID) ([]models.Policy, error)) *PolicyRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Read(id uuid.UUID) (models.Policy, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Policy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Policy, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Policy); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Policy)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PolicyRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type PolicyRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *PolicyRepository_Expecter) Read(id interface{}) *PolicyRepository_Read_Call {
	return &PolicyRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *PolicyRepository_Read_Call) Run(run func(id uuid.UUID)) *PolicyRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *PolicyRepository_Read_Call) Return(policy models.Policy, err error) *PolicyRepository_Read_Call {
	_c.Call.Return(policy, err)
	return _c
}

func (_c *PolicyRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.Policy, error)) *PolicyRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Save(tx core.DB, t *models.Policy) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.Policy) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PolicyRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - t
func (_e *PolicyRepository_Expecter) Save(tx interface{}, t interface{}) *PolicyRepository_Save_Call {
	return &PolicyRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *PolicyRepository_Save_Call) Run(run func(tx core.DB, t *models.Policy)) *PolicyRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.Policy))
	})
	return _c
}

func (_c *PolicyRepository_Save_Call) Return(err error) *PolicyRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.Policy) error) *PolicyRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) SaveBatch(tx core.DB, ts []models.Policy) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.Policy) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type PolicyRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *PolicyRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *PolicyRepository_SaveBatch_Call {
	return &PolicyRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *PolicyRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.Policy)) *PolicyRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.Policy))
	})
	return _c
}

func (_c *PolicyRepository_SaveBatch_Call) Return(err error) *PolicyRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.Policy) error) *PolicyRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type PolicyRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *PolicyRepository_Expecter) Transaction(fn interface{}) *PolicyRepository_Transaction_Call {
	return &PolicyRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *PolicyRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *PolicyRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *PolicyRepository_Transaction_Call) Return(err error) *PolicyRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *PolicyRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type PolicyRepository
func (_mock *PolicyRepository) Upsert(t *[]*models.Policy, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.Policy, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PolicyRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type PolicyRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t
//   - conflictingColumns
//   - updateOnly
func (_e *PolicyRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *PolicyRepository_Upsert_Call {
	return &PolicyRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *PolicyRepository_Upsert_Call) Run(run func(t *[]*models.Policy, conflictingColumns []clause.Column, updateOnly []string)) *PolicyRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]*models.Policy), args[1].([]clause.Column), args[2].([]string))
	})
	return _c
}

func (_c *PolicyRepository_Upsert_Call) Return(err error) *PolicyRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PolicyRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.Policy, conflictingColumns []clause.Column, updateOnly []string) error) *PolicyRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
