// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAccessControl creates a new instance of AccessControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessControl {
	mock := &AccessControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccessControl is an autogenerated mock type for the AccessControl type
type AccessControl struct {
	mock.Mock
}

type AccessControl_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessControl) EXPECT() *AccessControl_Expecter {
	return &AccessControl_Expecter{mock: &_m.Mock}
}

// AllowRole provides a mock function for the type AccessControl
func (_mock *AccessControl) AllowRole(role core.Role, object core.Object, action []core.Action) error {
	ret := _mock.Called(role, object, action)

	if len(ret) == 0 {
		panic("no return value specified for AllowRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Role, core.Object, []core.Action) error); ok {
		r0 = returnFunc(role, object, action)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_AllowRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowRole'
type AccessControl_AllowRole_Call struct {
	*mock.Call
}

// AllowRole is a helper method to define mock.On call
//   - role core.Role
//   - object core.Object
//   - action []core.Action
func (_e *AccessControl_Expecter) AllowRole(role interface{}, object interface{}, action interface{}) *AccessControl_AllowRole_Call {
	return &AccessControl_AllowRole_Call{Call: _e.mock.On("AllowRole", role, object, action)}
}

func (_c *AccessControl_AllowRole_Call) Run(run func(role core.Role, object core.Object, action []core.Action)) *AccessControl_AllowRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Role
		if args[0] != nil {
			arg0 = args[0].(core.Role)
		}
		var arg1 core.Object
		if args[1] != nil {
			arg1 = args[1].(core.Object)
		}
		var arg2 []core.Action
		if args[2] != nil {
			arg2 = args[2].([]core.Action)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_AllowRole_Call) Return(err error) *AccessControl_AllowRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_AllowRole_Call) RunAndReturn(run func(role core.Role, object core.Object, action []core.Action) error) *AccessControl_AllowRole_Call {
	_c.Call.Return(run)
	return _c
}

// AllowRoleInProject provides a mock function for the type AccessControl
func (_mock *AccessControl) AllowRoleInProject(project string, role core.Role, object core.Object, action []core.Action) error {
	ret := _mock.Called(project, role, object, action)

	if len(ret) == 0 {
		panic("no return value specified for AllowRoleInProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Role, core.Object, []core.Action) error); ok {
		r0 = returnFunc(project, role, object, action)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_AllowRoleInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowRoleInProject'
type AccessControl_AllowRoleInProject_Call struct {
	*mock.Call
}

// AllowRoleInProject is a helper method to define mock.On call
//   - project string
//   - role core.Role
//   - object core.Object
//   - action []core.Action
func (_e *AccessControl_Expecter) AllowRoleInProject(project interface{}, role interface{}, object interface{}, action interface{}) *AccessControl_AllowRoleInProject_Call {
	return &AccessControl_AllowRoleInProject_Call{Call: _e.mock.On("AllowRoleInProject", project, role, object, action)}
}

func (_c *AccessControl_AllowRoleInProject_Call) Run(run func(project string, role core.Role, object core.Object, action []core.Action)) *AccessControl_AllowRoleInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		var arg2 core.Object
		if args[2] != nil {
			arg2 = args[2].(core.Object)
		}
		var arg3 []core.Action
		if args[3] != nil {
			arg3 = args[3].([]core.Action)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AccessControl_AllowRoleInProject_Call) Return(err error) *AccessControl_AllowRoleInProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_AllowRoleInProject_Call) RunAndReturn(run func(project string, role core.Role, object core.Object, action []core.Action) error) *AccessControl_AllowRoleInProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMembersOfOrganization provides a mock function for the type AccessControl
func (_mock *AccessControl) GetAllMembersOfOrganization() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMembersOfOrganization")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetAllMembersOfOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembersOfOrganization'
type AccessControl_GetAllMembersOfOrganization_Call struct {
	*mock.Call
}

// GetAllMembersOfOrganization is a helper method to define mock.On call
func (_e *AccessControl_Expecter) GetAllMembersOfOrganization() *AccessControl_GetAllMembersOfOrganization_Call {
	return &AccessControl_GetAllMembersOfOrganization_Call{Call: _e.mock.On("GetAllMembersOfOrganization")}
}

func (_c *AccessControl_GetAllMembersOfOrganization_Call) Run(run func()) *AccessControl_GetAllMembersOfOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccessControl_GetAllMembersOfOrganization_Call) Return(strings []string, err error) *AccessControl_GetAllMembersOfOrganization_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AccessControl_GetAllMembersOfOrganization_Call) RunAndReturn(run func() ([]string, error)) *AccessControl_GetAllMembersOfOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMembersOfProject provides a mock function for the type AccessControl
func (_mock *AccessControl) GetAllMembersOfProject(projectID string) ([]string, error) {
	ret := _mock.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMembersOfProject")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(projectID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(projectID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetAllMembersOfProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembersOfProject'
type AccessControl_GetAllMembersOfProject_Call struct {
	*mock.Call
}

// GetAllMembersOfProject is a helper method to define mock.On call
//   - projectID string
func (_e *AccessControl_Expecter) GetAllMembersOfProject(projectID interface{}) *AccessControl_GetAllMembersOfProject_Call {
	return &AccessControl_GetAllMembersOfProject_Call{Call: _e.mock.On("GetAllMembersOfProject", projectID)}
}

func (_c *AccessControl_GetAllMembersOfProject_Call) Run(run func(projectID string)) *AccessControl_GetAllMembersOfProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AccessControl_GetAllMembersOfProject_Call) Return(strings []string, err error) *AccessControl_GetAllMembersOfProject_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AccessControl_GetAllMembersOfProject_Call) RunAndReturn(run func(projectID string) ([]string, error)) *AccessControl_GetAllMembersOfProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjectsForUser provides a mock function for the type AccessControl
func (_mock *AccessControl) GetAllProjectsForUser(user string) ([]string, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjectsForUser")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetAllProjectsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjectsForUser'
type AccessControl_GetAllProjectsForUser_Call struct {
	*mock.Call
}

// GetAllProjectsForUser is a helper method to define mock.On call
//   - user string
func (_e *AccessControl_Expecter) GetAllProjectsForUser(user interface{}) *AccessControl_GetAllProjectsForUser_Call {
	return &AccessControl_GetAllProjectsForUser_Call{Call: _e.mock.On("GetAllProjectsForUser", user)}
}

func (_c *AccessControl_GetAllProjectsForUser_Call) Run(run func(user string)) *AccessControl_GetAllProjectsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AccessControl_GetAllProjectsForUser_Call) Return(strings []string, err error) *AccessControl_GetAllProjectsForUser_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AccessControl_GetAllProjectsForUser_Call) RunAndReturn(run func(user string) ([]string, error)) *AccessControl_GetAllProjectsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllRoles provides a mock function for the type AccessControl
func (_mock *AccessControl) GetAllRoles(user string) []string {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRoles")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// AccessControl_GetAllRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRoles'
type AccessControl_GetAllRoles_Call struct {
	*mock.Call
}

// GetAllRoles is a helper method to define mock.On call
//   - user string
func (_e *AccessControl_Expecter) GetAllRoles(user interface{}) *AccessControl_GetAllRoles_Call {
	return &AccessControl_GetAllRoles_Call{Call: _e.mock.On("GetAllRoles", user)}
}

func (_c *AccessControl_GetAllRoles_Call) Run(run func(user string)) *AccessControl_GetAllRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AccessControl_GetAllRoles_Call) Return(strings []string) *AccessControl_GetAllRoles_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *AccessControl_GetAllRoles_Call) RunAndReturn(run func(user string) []string) *AccessControl_GetAllRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainRole provides a mock function for the type AccessControl
func (_mock *AccessControl) GetDomainRole(user string) (core.Role, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainRole")
	}

	var r0 core.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (core.Role, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(string) core.Role); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(core.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetDomainRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainRole'
type AccessControl_GetDomainRole_Call struct {
	*mock.Call
}

// GetDomainRole is a helper method to define mock.On call
//   - user string
func (_e *AccessControl_Expecter) GetDomainRole(user interface{}) *AccessControl_GetDomainRole_Call {
	return &AccessControl_GetDomainRole_Call{Call: _e.mock.On("GetDomainRole", user)}
}

func (_c *AccessControl_GetDomainRole_Call) Run(run func(user string)) *AccessControl_GetDomainRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AccessControl_GetDomainRole_Call) Return(role core.Role, err error) *AccessControl_GetDomainRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *AccessControl_GetDomainRole_Call) RunAndReturn(run func(user string) (core.Role, error)) *AccessControl_GetDomainRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetExternalEntityProviderID provides a mock function for the type AccessControl
func (_mock *AccessControl) GetExternalEntityProviderID() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExternalEntityProviderID")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// AccessControl_GetExternalEntityProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExternalEntityProviderID'
type AccessControl_GetExternalEntityProviderID_Call struct {
	*mock.Call
}

// GetExternalEntityProviderID is a helper method to define mock.On call
func (_e *AccessControl_Expecter) GetExternalEntityProviderID() *AccessControl_GetExternalEntityProviderID_Call {
	return &AccessControl_GetExternalEntityProviderID_Call{Call: _e.mock.On("GetExternalEntityProviderID")}
}

func (_c *AccessControl_GetExternalEntityProviderID_Call) Run(run func()) *AccessControl_GetExternalEntityProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccessControl_GetExternalEntityProviderID_Call) Return(s *string) *AccessControl_GetExternalEntityProviderID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *AccessControl_GetExternalEntityProviderID_Call) RunAndReturn(run func() *string) *AccessControl_GetExternalEntityProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerOfOrganization provides a mock function for the type AccessControl
func (_mock *AccessControl) GetOwnerOfOrganization() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerOfOrganization")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetOwnerOfOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerOfOrganization'
type AccessControl_GetOwnerOfOrganization_Call struct {
	*mock.Call
}

// GetOwnerOfOrganization is a helper method to define mock.On call
func (_e *AccessControl_Expecter) GetOwnerOfOrganization() *AccessControl_GetOwnerOfOrganization_Call {
	return &AccessControl_GetOwnerOfOrganization_Call{Call: _e.mock.On("GetOwnerOfOrganization")}
}

func (_c *AccessControl_GetOwnerOfOrganization_Call) Run(run func()) *AccessControl_GetOwnerOfOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccessControl_GetOwnerOfOrganization_Call) Return(s string, err error) *AccessControl_GetOwnerOfOrganization_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AccessControl_GetOwnerOfOrganization_Call) RunAndReturn(run func() (string, error)) *AccessControl_GetOwnerOfOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectRole provides a mock function for the type AccessControl
func (_mock *AccessControl) GetProjectRole(user string, project string) (core.Role, error) {
	ret := _mock.Called(user, project)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectRole")
	}

	var r0 core.Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (core.Role, error)); ok {
		return returnFunc(user, project)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) core.Role); ok {
		r0 = returnFunc(user, project)
	} else {
		r0 = ret.Get(0).(core.Role)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(user, project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_GetProjectRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectRole'
type AccessControl_GetProjectRole_Call struct {
	*mock.Call
}

// GetProjectRole is a helper method to define mock.On call
//   - user string
//   - project string
func (_e *AccessControl_Expecter) GetProjectRole(user interface{}, project interface{}) *AccessControl_GetProjectRole_Call {
	return &AccessControl_GetProjectRole_Call{Call: _e.mock.On("GetProjectRole", user, project)}
}

func (_c *AccessControl_GetProjectRole_Call) Run(run func(user string, project string)) *AccessControl_GetProjectRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccessControl_GetProjectRole_Call) Return(role core.Role, err error) *AccessControl_GetProjectRole_Call {
	_c.Call.Return(role, err)
	return _c
}

func (_c *AccessControl_GetProjectRole_Call) RunAndReturn(run func(user string, project string) (core.Role, error)) *AccessControl_GetProjectRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantRole provides a mock function for the type AccessControl
func (_mock *AccessControl) GrantRole(subject string, role core.Role) error {
	ret := _mock.Called(subject, role)

	if len(ret) == 0 {
		panic("no return value specified for GrantRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Role) error); ok {
		r0 = returnFunc(subject, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_GrantRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantRole'
type AccessControl_GrantRole_Call struct {
	*mock.Call
}

// GrantRole is a helper method to define mock.On call
//   - subject string
//   - role core.Role
func (_e *AccessControl_Expecter) GrantRole(subject interface{}, role interface{}) *AccessControl_GrantRole_Call {
	return &AccessControl_GrantRole_Call{Call: _e.mock.On("GrantRole", subject, role)}
}

func (_c *AccessControl_GrantRole_Call) Run(run func(subject string, role core.Role)) *AccessControl_GrantRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccessControl_GrantRole_Call) Return(err error) *AccessControl_GrantRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_GrantRole_Call) RunAndReturn(run func(subject string, role core.Role) error) *AccessControl_GrantRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantRoleInProject provides a mock function for the type AccessControl
func (_mock *AccessControl) GrantRoleInProject(subject string, role core.Role, project string) error {
	ret := _mock.Called(subject, role, project)

	if len(ret) == 0 {
		panic("no return value specified for GrantRoleInProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Role, string) error); ok {
		r0 = returnFunc(subject, role, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_GrantRoleInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantRoleInProject'
type AccessControl_GrantRoleInProject_Call struct {
	*mock.Call
}

// GrantRoleInProject is a helper method to define mock.On call
//   - subject string
//   - role core.Role
//   - project string
func (_e *AccessControl_Expecter) GrantRoleInProject(subject interface{}, role interface{}, project interface{}) *AccessControl_GrantRoleInProject_Call {
	return &AccessControl_GrantRoleInProject_Call{Call: _e.mock.On("GrantRoleInProject", subject, role, project)}
}

func (_c *AccessControl_GrantRoleInProject_Call) Run(run func(subject string, role core.Role, project string)) *AccessControl_GrantRoleInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_GrantRoleInProject_Call) Return(err error) *AccessControl_GrantRoleInProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_GrantRoleInProject_Call) RunAndReturn(run func(subject string, role core.Role, project string) error) *AccessControl_GrantRoleInProject_Call {
	_c.Call.Return(run)
	return _c
}

// HasAccess provides a mock function for the type AccessControl
func (_mock *AccessControl) HasAccess(subject string) (bool, error) {
	ret := _mock.Called(subject)

	if len(ret) == 0 {
		panic("no return value specified for HasAccess")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(subject)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(subject)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(subject)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_HasAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAccess'
type AccessControl_HasAccess_Call struct {
	*mock.Call
}

// HasAccess is a helper method to define mock.On call
//   - subject string
func (_e *AccessControl_Expecter) HasAccess(subject interface{}) *AccessControl_HasAccess_Call {
	return &AccessControl_HasAccess_Call{Call: _e.mock.On("HasAccess", subject)}
}

func (_c *AccessControl_HasAccess_Call) Run(run func(subject string)) *AccessControl_HasAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AccessControl_HasAccess_Call) Return(b bool, err error) *AccessControl_HasAccess_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *AccessControl_HasAccess_Call) RunAndReturn(run func(subject string) (bool, error)) *AccessControl_HasAccess_Call {
	_c.Call.Return(run)
	return _c
}

// InheritProjectRole provides a mock function for the type AccessControl
func (_mock *AccessControl) InheritProjectRole(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role, project string) error {
	ret := _mock.Called(roleWhichGetsPermissions, roleWhichProvidesPermissions, project)

	if len(ret) == 0 {
		panic("no return value specified for InheritProjectRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Role, core.Role, string) error); ok {
		r0 = returnFunc(roleWhichGetsPermissions, roleWhichProvidesPermissions, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_InheritProjectRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InheritProjectRole'
type AccessControl_InheritProjectRole_Call struct {
	*mock.Call
}

// InheritProjectRole is a helper method to define mock.On call
//   - roleWhichGetsPermissions core.Role
//   - roleWhichProvidesPermissions core.Role
//   - project string
func (_e *AccessControl_Expecter) InheritProjectRole(roleWhichGetsPermissions interface{}, roleWhichProvidesPermissions interface{}, project interface{}) *AccessControl_InheritProjectRole_Call {
	return &AccessControl_InheritProjectRole_Call{Call: _e.mock.On("InheritProjectRole", roleWhichGetsPermissions, roleWhichProvidesPermissions, project)}
}

func (_c *AccessControl_InheritProjectRole_Call) Run(run func(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role, project string)) *AccessControl_InheritProjectRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Role
		if args[0] != nil {
			arg0 = args[0].(core.Role)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_InheritProjectRole_Call) Return(err error) *AccessControl_InheritProjectRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_InheritProjectRole_Call) RunAndReturn(run func(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role, project string) error) *AccessControl_InheritProjectRole_Call {
	_c.Call.Return(run)
	return _c
}

// InheritProjectRolesAcrossProjects provides a mock function for the type AccessControl
func (_mock *AccessControl) InheritProjectRolesAcrossProjects(roleWhichGetsPermissions core.ProjectRole, roleWhichProvidesPermissions core.ProjectRole) error {
	ret := _mock.Called(roleWhichGetsPermissions, roleWhichProvidesPermissions)

	if len(ret) == 0 {
		panic("no return value specified for InheritProjectRolesAcrossProjects")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.ProjectRole, core.ProjectRole) error); ok {
		r0 = returnFunc(roleWhichGetsPermissions, roleWhichProvidesPermissions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_InheritProjectRolesAcrossProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InheritProjectRolesAcrossProjects'
type AccessControl_InheritProjectRolesAcrossProjects_Call struct {
	*mock.Call
}

// InheritProjectRolesAcrossProjects is a helper method to define mock.On call
//   - roleWhichGetsPermissions core.ProjectRole
//   - roleWhichProvidesPermissions core.ProjectRole
func (_e *AccessControl_Expecter) InheritProjectRolesAcrossProjects(roleWhichGetsPermissions interface{}, roleWhichProvidesPermissions interface{}) *AccessControl_InheritProjectRolesAcrossProjects_Call {
	return &AccessControl_InheritProjectRolesAcrossProjects_Call{Call: _e.mock.On("InheritProjectRolesAcrossProjects", roleWhichGetsPermissions, roleWhichProvidesPermissions)}
}

func (_c *AccessControl_InheritProjectRolesAcrossProjects_Call) Run(run func(roleWhichGetsPermissions core.ProjectRole, roleWhichProvidesPermissions core.ProjectRole)) *AccessControl_InheritProjectRolesAcrossProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.ProjectRole
		if args[0] != nil {
			arg0 = args[0].(core.ProjectRole)
		}
		var arg1 core.ProjectRole
		if args[1] != nil {
			arg1 = args[1].(core.ProjectRole)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccessControl_InheritProjectRolesAcrossProjects_Call) Return(err error) *AccessControl_InheritProjectRolesAcrossProjects_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_InheritProjectRolesAcrossProjects_Call) RunAndReturn(run func(roleWhichGetsPermissions core.ProjectRole, roleWhichProvidesPermissions core.ProjectRole) error) *AccessControl_InheritProjectRolesAcrossProjects_Call {
	_c.Call.Return(run)
	return _c
}

// InheritRole provides a mock function for the type AccessControl
func (_mock *AccessControl) InheritRole(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role) error {
	ret := _mock.Called(roleWhichGetsPermissions, roleWhichProvidesPermissions)

	if len(ret) == 0 {
		panic("no return value specified for InheritRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Role, core.Role) error); ok {
		r0 = returnFunc(roleWhichGetsPermissions, roleWhichProvidesPermissions)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_InheritRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InheritRole'
type AccessControl_InheritRole_Call struct {
	*mock.Call
}

// InheritRole is a helper method to define mock.On call
//   - roleWhichGetsPermissions core.Role
//   - roleWhichProvidesPermissions core.Role
func (_e *AccessControl_Expecter) InheritRole(roleWhichGetsPermissions interface{}, roleWhichProvidesPermissions interface{}) *AccessControl_InheritRole_Call {
	return &AccessControl_InheritRole_Call{Call: _e.mock.On("InheritRole", roleWhichGetsPermissions, roleWhichProvidesPermissions)}
}

func (_c *AccessControl_InheritRole_Call) Run(run func(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role)) *AccessControl_InheritRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Role
		if args[0] != nil {
			arg0 = args[0].(core.Role)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccessControl_InheritRole_Call) Return(err error) *AccessControl_InheritRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_InheritRole_Call) RunAndReturn(run func(roleWhichGetsPermissions core.Role, roleWhichProvidesPermissions core.Role) error) *AccessControl_InheritRole_Call {
	_c.Call.Return(run)
	return _c
}

// IsAllowed provides a mock function for the type AccessControl
func (_mock *AccessControl) IsAllowed(subject string, object core.Object, action core.Action) (bool, error) {
	ret := _mock.Called(subject, object, action)

	if len(ret) == 0 {
		panic("no return value specified for IsAllowed")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Object, core.Action) (bool, error)); ok {
		return returnFunc(subject, object, action)
	}
	if returnFunc, ok := ret.Get(0).(func(string, core.Object, core.Action) bool); ok {
		r0 = returnFunc(subject, object, action)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, core.Object, core.Action) error); ok {
		r1 = returnFunc(subject, object, action)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_IsAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowed'
type AccessControl_IsAllowed_Call struct {
	*mock.Call
}

// IsAllowed is a helper method to define mock.On call
//   - subject string
//   - object core.Object
//   - action core.Action
func (_e *AccessControl_Expecter) IsAllowed(subject interface{}, object interface{}, action interface{}) *AccessControl_IsAllowed_Call {
	return &AccessControl_IsAllowed_Call{Call: _e.mock.On("IsAllowed", subject, object, action)}
}

func (_c *AccessControl_IsAllowed_Call) Run(run func(subject string, object core.Object, action core.Action)) *AccessControl_IsAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Object
		if args[1] != nil {
			arg1 = args[1].(core.Object)
		}
		var arg2 core.Action
		if args[2] != nil {
			arg2 = args[2].(core.Action)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_IsAllowed_Call) Return(b bool, err error) *AccessControl_IsAllowed_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *AccessControl_IsAllowed_Call) RunAndReturn(run func(subject string, object core.Object, action core.Action) (bool, error)) *AccessControl_IsAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// IsAllowedInProject provides a mock function for the type AccessControl
func (_mock *AccessControl) IsAllowedInProject(project *models.Project, user string, object core.Object, action core.Action) (bool, error) {
	ret := _mock.Called(project, user, object, action)

	if len(ret) == 0 {
		panic("no return value specified for IsAllowedInProject")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.Project, string, core.Object, core.Action) (bool, error)); ok {
		return returnFunc(project, user, object, action)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Project, string, core.Object, core.Action) bool); ok {
		r0 = returnFunc(project, user, object, action)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Project, string, core.Object, core.Action) error); ok {
		r1 = returnFunc(project, user, object, action)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccessControl_IsAllowedInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAllowedInProject'
type AccessControl_IsAllowedInProject_Call struct {
	*mock.Call
}

// IsAllowedInProject is a helper method to define mock.On call
//   - project *models.Project
//   - user string
//   - object core.Object
//   - action core.Action
func (_e *AccessControl_Expecter) IsAllowedInProject(project interface{}, user interface{}, object interface{}, action interface{}) *AccessControl_IsAllowedInProject_Call {
	return &AccessControl_IsAllowedInProject_Call{Call: _e.mock.On("IsAllowedInProject", project, user, object, action)}
}

func (_c *AccessControl_IsAllowedInProject_Call) Run(run func(project *models.Project, user string, object core.Object, action core.Action)) *AccessControl_IsAllowedInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Project
		if args[0] != nil {
			arg0 = args[0].(*models.Project)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 core.Object
		if args[2] != nil {
			arg2 = args[2].(core.Object)
		}
		var arg3 core.Action
		if args[3] != nil {
			arg3 = args[3].(core.Action)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AccessControl_IsAllowedInProject_Call) Return(b bool, err error) *AccessControl_IsAllowedInProject_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *AccessControl_IsAllowedInProject_Call) RunAndReturn(run func(project *models.Project, user string, object core.Object, action core.Action) (bool, error)) *AccessControl_IsAllowedInProject_Call {
	_c.Call.Return(run)
	return _c
}

// LinkDomainAndProjectRole provides a mock function for the type AccessControl
func (_mock *AccessControl) LinkDomainAndProjectRole(domainRoleWhichGetsPermission core.Role, projectRoleWhichProvidesPermissions core.Role, project string) error {
	ret := _mock.Called(domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project)

	if len(ret) == 0 {
		panic("no return value specified for LinkDomainAndProjectRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.Role, core.Role, string) error); ok {
		r0 = returnFunc(domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_LinkDomainAndProjectRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkDomainAndProjectRole'
type AccessControl_LinkDomainAndProjectRole_Call struct {
	*mock.Call
}

// LinkDomainAndProjectRole is a helper method to define mock.On call
//   - domainRoleWhichGetsPermission core.Role
//   - projectRoleWhichProvidesPermissions core.Role
//   - project string
func (_e *AccessControl_Expecter) LinkDomainAndProjectRole(domainRoleWhichGetsPermission interface{}, projectRoleWhichProvidesPermissions interface{}, project interface{}) *AccessControl_LinkDomainAndProjectRole_Call {
	return &AccessControl_LinkDomainAndProjectRole_Call{Call: _e.mock.On("LinkDomainAndProjectRole", domainRoleWhichGetsPermission, projectRoleWhichProvidesPermissions, project)}
}

func (_c *AccessControl_LinkDomainAndProjectRole_Call) Run(run func(domainRoleWhichGetsPermission core.Role, projectRoleWhichProvidesPermissions core.Role, project string)) *AccessControl_LinkDomainAndProjectRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Role
		if args[0] != nil {
			arg0 = args[0].(core.Role)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_LinkDomainAndProjectRole_Call) Return(err error) *AccessControl_LinkDomainAndProjectRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_LinkDomainAndProjectRole_Call) RunAndReturn(run func(domainRoleWhichGetsPermission core.Role, projectRoleWhichProvidesPermissions core.Role, project string) error) *AccessControl_LinkDomainAndProjectRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRole provides a mock function for the type AccessControl
func (_mock *AccessControl) RevokeRole(subject string, role core.Role) error {
	ret := _mock.Called(subject, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Role) error); ok {
		r0 = returnFunc(subject, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_RevokeRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRole'
type AccessControl_RevokeRole_Call struct {
	*mock.Call
}

// RevokeRole is a helper method to define mock.On call
//   - subject string
//   - role core.Role
func (_e *AccessControl_Expecter) RevokeRole(subject interface{}, role interface{}) *AccessControl_RevokeRole_Call {
	return &AccessControl_RevokeRole_Call{Call: _e.mock.On("RevokeRole", subject, role)}
}

func (_c *AccessControl_RevokeRole_Call) Run(run func(subject string, role core.Role)) *AccessControl_RevokeRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccessControl_RevokeRole_Call) Return(err error) *AccessControl_RevokeRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_RevokeRole_Call) RunAndReturn(run func(subject string, role core.Role) error) *AccessControl_RevokeRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRoleInProject provides a mock function for the type AccessControl
func (_mock *AccessControl) RevokeRoleInProject(subject string, role core.Role, project string) error {
	ret := _mock.Called(subject, role, project)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRoleInProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, core.Role, string) error); ok {
		r0 = returnFunc(subject, role, project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccessControl_RevokeRoleInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRoleInProject'
type AccessControl_RevokeRoleInProject_Call struct {
	*mock.Call
}

// RevokeRoleInProject is a helper method to define mock.On call
//   - subject string
//   - role core.Role
//   - project string
func (_e *AccessControl_Expecter) RevokeRoleInProject(subject interface{}, role interface{}, project interface{}) *AccessControl_RevokeRoleInProject_Call {
	return &AccessControl_RevokeRoleInProject_Call{Call: _e.mock.On("RevokeRoleInProject", subject, role, project)}
}

func (_c *AccessControl_RevokeRoleInProject_Call) Run(run func(subject string, role core.Role, project string)) *AccessControl_RevokeRoleInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 core.Role
		if args[1] != nil {
			arg1 = args[1].(core.Role)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccessControl_RevokeRoleInProject_Call) Return(err error) *AccessControl_RevokeRoleInProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccessControl_RevokeRoleInProject_Call) RunAndReturn(run func(subject string, role core.Role, project string) error) *AccessControl_RevokeRoleInProject_Call {
	_c.Call.Return(run)
	return _c
}
