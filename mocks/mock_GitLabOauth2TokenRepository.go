// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewGitLabOauth2TokenRepository creates a new instance of GitLabOauth2TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitLabOauth2TokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitLabOauth2TokenRepository {
	mock := &GitLabOauth2TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GitLabOauth2TokenRepository is an autogenerated mock type for the GitLabOauth2TokenRepository type
type GitLabOauth2TokenRepository struct {
	mock.Mock
}

type GitLabOauth2TokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabOauth2TokenRepository) EXPECT() *GitLabOauth2TokenRepository_Expecter {
	return &GitLabOauth2TokenRepository_Expecter{mock: &_m.Mock}
}

// CreateIfNotExists provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) CreateIfNotExists(tokens []*models.GitLabOauth2Token) error {
	ret := _mock.Called(tokens)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExists")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]*models.GitLabOauth2Token) error); ok {
		r0 = returnFunc(tokens)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitLabOauth2TokenRepository_CreateIfNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIfNotExists'
type GitLabOauth2TokenRepository_CreateIfNotExists_Call struct {
	*mock.Call
}

// CreateIfNotExists is a helper method to define mock.On call
//   - tokens []*models.GitLabOauth2Token
func (_e *GitLabOauth2TokenRepository_Expecter) CreateIfNotExists(tokens interface{}) *GitLabOauth2TokenRepository_CreateIfNotExists_Call {
	return &GitLabOauth2TokenRepository_CreateIfNotExists_Call{Call: _e.mock.On("CreateIfNotExists", tokens)}
}

func (_c *GitLabOauth2TokenRepository_CreateIfNotExists_Call) Run(run func(tokens []*models.GitLabOauth2Token)) *GitLabOauth2TokenRepository_CreateIfNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*models.GitLabOauth2Token
		if args[0] != nil {
			arg0 = args[0].([]*models.GitLabOauth2Token)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_CreateIfNotExists_Call) Return(err error) *GitLabOauth2TokenRepository_CreateIfNotExists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_CreateIfNotExists_Call) RunAndReturn(run func(tokens []*models.GitLabOauth2Token) error) *GitLabOauth2TokenRepository_CreateIfNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) Delete(tx core.DB, tokens []models.GitLabOauth2Token) error {
	ret := _mock.Called(tx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.GitLabOauth2Token) error); ok {
		r0 = returnFunc(tx, tokens)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitLabOauth2TokenRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GitLabOauth2TokenRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx core.DB
//   - tokens []models.GitLabOauth2Token
func (_e *GitLabOauth2TokenRepository_Expecter) Delete(tx interface{}, tokens interface{}) *GitLabOauth2TokenRepository_Delete_Call {
	return &GitLabOauth2TokenRepository_Delete_Call{Call: _e.mock.On("Delete", tx, tokens)}
}

func (_c *GitLabOauth2TokenRepository_Delete_Call) Run(run func(tx core.DB, tokens []models.GitLabOauth2Token)) *GitLabOauth2TokenRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []models.GitLabOauth2Token
		if args[1] != nil {
			arg1 = args[1].([]models.GitLabOauth2Token)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_Delete_Call) Return(err error) *GitLabOauth2TokenRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_Delete_Call) RunAndReturn(run func(tx core.DB, tokens []models.GitLabOauth2Token) error) *GitLabOauth2TokenRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUserIdAndProviderId provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) DeleteByUserIdAndProviderId(userId string, providerId string) error {
	ret := _mock.Called(userId, providerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserIdAndProviderId")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(userId, providerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserIdAndProviderId'
type GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call struct {
	*mock.Call
}

// DeleteByUserIdAndProviderId is a helper method to define mock.On call
//   - userId string
//   - providerId string
func (_e *GitLabOauth2TokenRepository_Expecter) DeleteByUserIdAndProviderId(userId interface{}, providerId interface{}) *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call {
	return &GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call{Call: _e.mock.On("DeleteByUserIdAndProviderId", userId, providerId)}
}

func (_c *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call) Run(run func(userId string, providerId string)) *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call) Return(err error) *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call) RunAndReturn(run func(userId string, providerId string) error) *GitLabOauth2TokenRepository_DeleteByUserIdAndProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) FindByUserId(userId string) ([]models.GitLabOauth2Token, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []models.GitLabOauth2Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]models.GitLabOauth2Token, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []models.GitLabOauth2Token); ok {
		r0 = returnFunc(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GitLabOauth2Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitLabOauth2TokenRepository_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type GitLabOauth2TokenRepository_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - userId string
func (_e *GitLabOauth2TokenRepository_Expecter) FindByUserId(userId interface{}) *GitLabOauth2TokenRepository_FindByUserId_Call {
	return &GitLabOauth2TokenRepository_FindByUserId_Call{Call: _e.mock.On("FindByUserId", userId)}
}

func (_c *GitLabOauth2TokenRepository_FindByUserId_Call) Run(run func(userId string)) *GitLabOauth2TokenRepository_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_FindByUserId_Call) Return(gitLabOauth2Tokens []models.GitLabOauth2Token, err error) *GitLabOauth2TokenRepository_FindByUserId_Call {
	_c.Call.Return(gitLabOauth2Tokens, err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_FindByUserId_Call) RunAndReturn(run func(userId string) ([]models.GitLabOauth2Token, error)) *GitLabOauth2TokenRepository_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdAndProviderId provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) FindByUserIdAndProviderId(userId string, providerId string) (*models.GitLabOauth2Token, error) {
	ret := _mock.Called(userId, providerId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdAndProviderId")
	}

	var r0 *models.GitLabOauth2Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*models.GitLabOauth2Token, error)); ok {
		return returnFunc(userId, providerId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *models.GitLabOauth2Token); ok {
		r0 = returnFunc(userId, providerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GitLabOauth2Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(userId, providerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdAndProviderId'
type GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call struct {
	*mock.Call
}

// FindByUserIdAndProviderId is a helper method to define mock.On call
//   - userId string
//   - providerId string
func (_e *GitLabOauth2TokenRepository_Expecter) FindByUserIdAndProviderId(userId interface{}, providerId interface{}) *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call {
	return &GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call{Call: _e.mock.On("FindByUserIdAndProviderId", userId, providerId)}
}

func (_c *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call) Run(run func(userId string, providerId string)) *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call) Return(gitLabOauth2Token *models.GitLabOauth2Token, err error) *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call {
	_c.Call.Return(gitLabOauth2Token, err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call) RunAndReturn(run func(userId string, providerId string) (*models.GitLabOauth2Token, error)) *GitLabOauth2TokenRepository_FindByUserIdAndProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type GitLabOauth2TokenRepository
func (_mock *GitLabOauth2TokenRepository) Save(tx core.DB, model ...*models.GitLabOauth2Token) error {
	var tmpRet mock.Arguments
	if len(model) > 0 {
		tmpRet = _mock.Called(tx, model)
	} else {
		tmpRet = _mock.Called(tx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, ...*models.GitLabOauth2Token) error); ok {
		r0 = returnFunc(tx, model...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GitLabOauth2TokenRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type GitLabOauth2TokenRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx core.DB
//   - model ...*models.GitLabOauth2Token
func (_e *GitLabOauth2TokenRepository_Expecter) Save(tx interface{}, model ...interface{}) *GitLabOauth2TokenRepository_Save_Call {
	return &GitLabOauth2TokenRepository_Save_Call{Call: _e.mock.On("Save",
		append([]interface{}{tx}, model...)...)}
}

func (_c *GitLabOauth2TokenRepository_Save_Call) Run(run func(tx core.DB, model ...*models.GitLabOauth2Token)) *GitLabOauth2TokenRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.DB
		if args[0] != nil {
			arg0 = args[0].(core.DB)
		}
		var arg1 []*models.GitLabOauth2Token
		variadicArgs := args[1].([]*models.GitLabOauth2Token)
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *GitLabOauth2TokenRepository_Save_Call) Return(err error) *GitLabOauth2TokenRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *GitLabOauth2TokenRepository_Save_Call) RunAndReturn(run func(tx core.DB, model ...*models.GitLabOauth2Token) error) *GitLabOauth2TokenRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
