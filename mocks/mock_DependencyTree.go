// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewDependencyTree creates a new instance of DependencyTree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencyTree(t interface {
	mock.TestingT
	Cleanup(func())
}) *DependencyTree {
	mock := &DependencyTree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DependencyTree is an autogenerated mock type for the DependencyTree type
type DependencyTree struct {
	mock.Mock
}

type DependencyTree_Expecter struct {
	mock *mock.Mock
}

func (_m *DependencyTree) EXPECT() *DependencyTree_Expecter {
	return &DependencyTree_Expecter{mock: &_m.Mock}
}

// GetDeps provides a mock function for the type DependencyTree
func (_mock *DependencyTree) GetDeps() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeps")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// DependencyTree_GetDeps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeps'
type DependencyTree_GetDeps_Call struct {
	*mock.Call
}

// GetDeps is a helper method to define mock.On call
func (_e *DependencyTree_Expecter) GetDeps() *DependencyTree_GetDeps_Call {
	return &DependencyTree_GetDeps_Call{Call: _e.mock.On("GetDeps")}
}

func (_c *DependencyTree_GetDeps_Call) Run(run func()) *DependencyTree_GetDeps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DependencyTree_GetDeps_Call) Return(strings []string) *DependencyTree_GetDeps_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *DependencyTree_GetDeps_Call) RunAndReturn(run func() []string) *DependencyTree_GetDeps_Call {
	_c.Call.Return(run)
	return _c
}

// GetRef provides a mock function for the type DependencyTree
func (_mock *DependencyTree) GetRef() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// DependencyTree_GetRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRef'
type DependencyTree_GetRef_Call struct {
	*mock.Call
}

// GetRef is a helper method to define mock.On call
func (_e *DependencyTree_Expecter) GetRef() *DependencyTree_GetRef_Call {
	return &DependencyTree_GetRef_Call{Call: _e.mock.On("GetRef")}
}

func (_c *DependencyTree_GetRef_Call) Run(run func()) *DependencyTree_GetRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DependencyTree_GetRef_Call) Return(s string) *DependencyTree_GetRef_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *DependencyTree_GetRef_Call) RunAndReturn(run func() string) *DependencyTree_GetRef_Call {
	_c.Call.Return(run)
	return _c
}
