// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	core "github.com/l3montree-dev/devguard/internal/core"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/l3montree-dev/devguard/internal/database/models"

	uuid "github.com/google/uuid"
)

// ComponentRepository is an autogenerated mock type for the ComponentRepository type
type ComponentRepository struct {
	mock.Mock
}

type ComponentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentRepository) EXPECT() *ComponentRepository_Expecter {
	return &ComponentRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *ComponentRepository) Activate(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type ComponentRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *ComponentRepository_Expecter) Activate(tx interface{}, id interface{}) *ComponentRepository_Activate_Call {
	return &ComponentRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *ComponentRepository_Activate_Call) Run(run func(tx *gorm.DB, id string)) *ComponentRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *ComponentRepository_Activate_Call) Return(_a0 error) *ComponentRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, string) error) *ComponentRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *ComponentRepository) All() ([]models.Component, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Component, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Component)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type ComponentRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *ComponentRepository_Expecter) All() *ComponentRepository_All_Call {
	return &ComponentRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *ComponentRepository_All_Call) Run(run func()) *ComponentRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ComponentRepository_All_Call) Return(_a0 []models.Component, _a1 error) *ComponentRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_All_Call) RunAndReturn(run func() ([]models.Component, error)) *ComponentRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *ComponentRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// ComponentRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type ComponentRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *ComponentRepository_Expecter) Begin() *ComponentRepository_Begin_Call {
	return &ComponentRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *ComponentRepository_Begin_Call) Run(run func()) *ComponentRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ComponentRepository_Begin_Call) Return(_a0 *gorm.DB) *ComponentRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *ComponentRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *ComponentRepository) Create(tx *gorm.DB, t *models.Component) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Component) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ComponentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Component
func (_e *ComponentRepository_Expecter) Create(tx interface{}, t interface{}) *ComponentRepository_Create_Call {
	return &ComponentRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *ComponentRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.Component)) *ComponentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Component))
	})
	return _c
}

func (_c *ComponentRepository_Create_Call) Return(_a0 error) *ComponentRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Component) error) *ComponentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *ComponentRepository) CreateBatch(tx *gorm.DB, ts []models.Component) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Component) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type ComponentRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Component
func (_e *ComponentRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *ComponentRepository_CreateBatch_Call {
	return &ComponentRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *ComponentRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.Component)) *ComponentRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Component))
	})
	return _c
}

func (_c *ComponentRepository_CreateBatch_Call) Return(_a0 error) *ComponentRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Component) error) *ComponentRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *ComponentRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ComponentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *ComponentRepository_Expecter) Delete(tx interface{}, id interface{}) *ComponentRepository_Delete_Call {
	return &ComponentRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *ComponentRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *ComponentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *ComponentRepository_Delete_Call) Return(_a0 error) *ComponentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *ComponentRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function with given fields: tx, ids
func (_m *ComponentRepository) DeleteBatch(tx *gorm.DB, ids []models.Component) error {
	ret := _m.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Component) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type ComponentRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ids []models.Component
func (_e *ComponentRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *ComponentRepository_DeleteBatch_Call {
	return &ComponentRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *ComponentRepository_DeleteBatch_Call) Run(run func(tx *gorm.DB, ids []models.Component)) *ComponentRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Component))
	})
	return _c
}

func (_c *ComponentRepository_DeleteBatch_Call) Return(_a0 error) *ComponentRepository_DeleteBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_DeleteBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Component) error) *ComponentRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPurl provides a mock function with given fields: tx, purl
func (_m *ComponentRepository) FindByPurl(tx *gorm.DB, purl string) (models.Component, error) {
	ret := _m.Called(tx, purl)

	if len(ret) == 0 {
		panic("no return value specified for FindByPurl")
	}

	var r0 models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (models.Component, error)); ok {
		return rf(tx, purl)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) models.Component); ok {
		r0 = rf(tx, purl)
	} else {
		r0 = ret.Get(0).(models.Component)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, purl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_FindByPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPurl'
type ComponentRepository_FindByPurl_Call struct {
	*mock.Call
}

// FindByPurl is a helper method to define mock.On call
//   - tx *gorm.DB
//   - purl string
func (_e *ComponentRepository_Expecter) FindByPurl(tx interface{}, purl interface{}) *ComponentRepository_FindByPurl_Call {
	return &ComponentRepository_FindByPurl_Call{Call: _e.mock.On("FindByPurl", tx, purl)}
}

func (_c *ComponentRepository_FindByPurl_Call) Run(run func(tx *gorm.DB, purl string)) *ComponentRepository_FindByPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *ComponentRepository_FindByPurl_Call) Return(_a0 models.Component, _a1 error) *ComponentRepository_FindByPurl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_FindByPurl_Call) RunAndReturn(run func(*gorm.DB, string) (models.Component, error)) *ComponentRepository_FindByPurl_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *ComponentRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// ComponentRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type ComponentRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *ComponentRepository_Expecter) GetDB(tx interface{}) *ComponentRepository_GetDB_Call {
	return &ComponentRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *ComponentRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *ComponentRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *ComponentRepository_GetDB_Call) Return(_a0 *gorm.DB) *ComponentRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *ComponentRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyCountPerScanner provides a mock function with given fields: assetVersionName, assetID
func (_m *ComponentRepository) GetDependencyCountPerScanner(assetVersionName string, assetID uuid.UUID) (map[string]int, error) {
	ret := _m.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyCountPerScanner")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (map[string]int, error)); ok {
		return rf(assetVersionName, assetID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) map[string]int); ok {
		r0 = rf(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_GetDependencyCountPerScanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyCountPerScanner'
type ComponentRepository_GetDependencyCountPerScanner_Call struct {
	*mock.Call
}

// GetDependencyCountPerScanner is a helper method to define mock.On call
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *ComponentRepository_Expecter) GetDependencyCountPerScanner(assetVersionName interface{}, assetID interface{}) *ComponentRepository_GetDependencyCountPerScanner_Call {
	return &ComponentRepository_GetDependencyCountPerScanner_Call{Call: _e.mock.On("GetDependencyCountPerScanner", assetVersionName, assetID)}
}

func (_c *ComponentRepository_GetDependencyCountPerScanner_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *ComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ComponentRepository_GetDependencyCountPerScanner_Call) Return(_a0 map[string]int, _a1 error) *ComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_GetDependencyCountPerScanner_Call) RunAndReturn(run func(string, uuid.UUID) (map[string]int, error)) *ComponentRepository_GetDependencyCountPerScanner_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseDistribution provides a mock function with given fields: tx, assetVersionName, assetID, scannerID
func (_m *ComponentRepository) GetLicenseDistribution(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string) (map[string]int, error) {
	ret := _m.Called(tx, assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseDistribution")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string) (map[string]int, error)); ok {
		return rf(tx, assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string) map[string]int); ok {
		r0 = rf(tx, assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string) error); ok {
		r1 = rf(tx, assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_GetLicenseDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseDistribution'
type ComponentRepository_GetLicenseDistribution_Call struct {
	*mock.Call
}

// GetLicenseDistribution is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *ComponentRepository_Expecter) GetLicenseDistribution(tx interface{}, assetVersionName interface{}, assetID interface{}, scannerID interface{}) *ComponentRepository_GetLicenseDistribution_Call {
	return &ComponentRepository_GetLicenseDistribution_Call{Call: _e.mock.On("GetLicenseDistribution", tx, assetVersionName, assetID, scannerID)}
}

func (_c *ComponentRepository_GetLicenseDistribution_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string)) *ComponentRepository_GetLicenseDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *ComponentRepository_GetLicenseDistribution_Call) Return(_a0 map[string]int, _a1 error) *ComponentRepository_GetLicenseDistribution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_GetLicenseDistribution_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string) (map[string]int, error)) *ComponentRepository_GetLicenseDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// HandleStateDiff provides a mock function with given fields: tx, assetVersionName, assetID, oldState, newState, scannerID
func (_m *ComponentRepository) HandleStateDiff(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, oldState []models.ComponentDependency, newState []models.ComponentDependency, scannerID string) error {
	ret := _m.Called(tx, assetVersionName, assetID, oldState, newState, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for HandleStateDiff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, []models.ComponentDependency, []models.ComponentDependency, string) error); ok {
		r0 = rf(tx, assetVersionName, assetID, oldState, newState, scannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_HandleStateDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleStateDiff'
type ComponentRepository_HandleStateDiff_Call struct {
	*mock.Call
}

// HandleStateDiff is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - oldState []models.ComponentDependency
//   - newState []models.ComponentDependency
//   - scannerID string
func (_e *ComponentRepository_Expecter) HandleStateDiff(tx interface{}, assetVersionName interface{}, assetID interface{}, oldState interface{}, newState interface{}, scannerID interface{}) *ComponentRepository_HandleStateDiff_Call {
	return &ComponentRepository_HandleStateDiff_Call{Call: _e.mock.On("HandleStateDiff", tx, assetVersionName, assetID, oldState, newState, scannerID)}
}

func (_c *ComponentRepository_HandleStateDiff_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, oldState []models.ComponentDependency, newState []models.ComponentDependency, scannerID string)) *ComponentRepository_HandleStateDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].([]models.ComponentDependency), args[4].([]models.ComponentDependency), args[5].(string))
	})
	return _c
}

func (_c *ComponentRepository_HandleStateDiff_Call) Return(_a0 error) *ComponentRepository_HandleStateDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_HandleStateDiff_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, []models.ComponentDependency, []models.ComponentDependency, string) error) *ComponentRepository_HandleStateDiff_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *ComponentRepository) List(ids []string) ([]models.Component, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.Component, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.Component); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Component)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ComponentRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *ComponentRepository_Expecter) List(ids interface{}) *ComponentRepository_List_Call {
	return &ComponentRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *ComponentRepository_List_Call) Run(run func(ids []string)) *ComponentRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *ComponentRepository_List_Call) Return(_a0 []models.Component, _a1 error) *ComponentRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_List_Call) RunAndReturn(run func([]string) ([]models.Component, error)) *ComponentRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// LoadComponents provides a mock function with given fields: tx, assetVersionName, assetID, scannerID
func (_m *ComponentRepository) LoadComponents(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.ComponentDependency, error) {
	ret := _m.Called(tx, assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for LoadComponents")
	}

	var r0 []models.ComponentDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string) ([]models.ComponentDependency, error)); ok {
		return rf(tx, assetVersionName, assetID, scannerID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string) []models.ComponentDependency); ok {
		r0 = rf(tx, assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ComponentDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string) error); ok {
		r1 = rf(tx, assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_LoadComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadComponents'
type ComponentRepository_LoadComponents_Call struct {
	*mock.Call
}

// LoadComponents is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
func (_e *ComponentRepository_Expecter) LoadComponents(tx interface{}, assetVersionName interface{}, assetID interface{}, scannerID interface{}) *ComponentRepository_LoadComponents_Call {
	return &ComponentRepository_LoadComponents_Call{Call: _e.mock.On("LoadComponents", tx, assetVersionName, assetID, scannerID)}
}

func (_c *ComponentRepository_LoadComponents_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string)) *ComponentRepository_LoadComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *ComponentRepository_LoadComponents_Call) Return(_a0 []models.ComponentDependency, _a1 error) *ComponentRepository_LoadComponents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_LoadComponents_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string) ([]models.ComponentDependency, error)) *ComponentRepository_LoadComponents_Call {
	_c.Call.Return(run)
	return _c
}

// LoadComponentsWithProject provides a mock function with given fields: tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort
func (_m *ComponentRepository) LoadComponentsWithProject(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.ComponentDependency], error) {
	ret := _m.Called(tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for LoadComponentsWithProject")
	}

	var r0 core.Paged[models.ComponentDependency]
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.ComponentDependency], error)); ok {
		return rf(tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.ComponentDependency]); ok {
		r0 = rf(tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.ComponentDependency])
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = rf(tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_LoadComponentsWithProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadComponentsWithProject'
type ComponentRepository_LoadComponentsWithProject_Call struct {
	*mock.Call
}

// LoadComponentsWithProject is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - scannerID string
//   - pageInfo core.PageInfo
//   - search string
//   - filter []core.FilterQuery
//   - sort []core.SortQuery
func (_e *ComponentRepository_Expecter) LoadComponentsWithProject(tx interface{}, assetVersionName interface{}, assetID interface{}, scannerID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *ComponentRepository_LoadComponentsWithProject_Call {
	return &ComponentRepository_LoadComponentsWithProject_Call{Call: _e.mock.On("LoadComponentsWithProject", tx, assetVersionName, assetID, scannerID, pageInfo, search, filter, sort)}
}

func (_c *ComponentRepository_LoadComponentsWithProject_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, scannerID string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *ComponentRepository_LoadComponentsWithProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string), args[4].(core.PageInfo), args[5].(string), args[6].([]core.FilterQuery), args[7].([]core.SortQuery))
	})
	return _c
}

func (_c *ComponentRepository_LoadComponentsWithProject_Call) Return(_a0 core.Paged[models.ComponentDependency], _a1 error) *ComponentRepository_LoadComponentsWithProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_LoadComponentsWithProject_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.ComponentDependency], error)) *ComponentRepository_LoadComponentsWithProject_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPathToComponent provides a mock function with given fields: tx, assetVersionName, assetID, pURL, scannerID
func (_m *ComponentRepository) LoadPathToComponent(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pURL string, scannerID string) ([]models.ComponentDependency, error) {
	ret := _m.Called(tx, assetVersionName, assetID, pURL, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for LoadPathToComponent")
	}

	var r0 []models.ComponentDependency
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)); ok {
		return rf(tx, assetVersionName, assetID, pURL, scannerID)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, uuid.UUID, string, string) []models.ComponentDependency); ok {
		r0 = rf(tx, assetVersionName, assetID, pURL, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ComponentDependency)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, uuid.UUID, string, string) error); ok {
		r1 = rf(tx, assetVersionName, assetID, pURL, scannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_LoadPathToComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPathToComponent'
type ComponentRepository_LoadPathToComponent_Call struct {
	*mock.Call
}

// LoadPathToComponent is a helper method to define mock.On call
//   - tx *gorm.DB
//   - assetVersionName string
//   - assetID uuid.UUID
//   - pURL string
//   - scannerID string
func (_e *ComponentRepository_Expecter) LoadPathToComponent(tx interface{}, assetVersionName interface{}, assetID interface{}, pURL interface{}, scannerID interface{}) *ComponentRepository_LoadPathToComponent_Call {
	return &ComponentRepository_LoadPathToComponent_Call{Call: _e.mock.On("LoadPathToComponent", tx, assetVersionName, assetID, pURL, scannerID)}
}

func (_c *ComponentRepository_LoadPathToComponent_Call) Run(run func(tx *gorm.DB, assetVersionName string, assetID uuid.UUID, pURL string, scannerID string)) *ComponentRepository_LoadPathToComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *ComponentRepository_LoadPathToComponent_Call) Return(_a0 []models.ComponentDependency, _a1 error) *ComponentRepository_LoadPathToComponent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_LoadPathToComponent_Call) RunAndReturn(run func(*gorm.DB, string, uuid.UUID, string, string) ([]models.ComponentDependency, error)) *ComponentRepository_LoadPathToComponent_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *ComponentRepository) Read(id string) (models.Component, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Component
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Component, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Component); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Component)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComponentRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ComponentRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *ComponentRepository_Expecter) Read(id interface{}) *ComponentRepository_Read_Call {
	return &ComponentRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *ComponentRepository_Read_Call) Run(run func(id string)) *ComponentRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ComponentRepository_Read_Call) Return(_a0 models.Component, _a1 error) *ComponentRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ComponentRepository_Read_Call) RunAndReturn(run func(string) (models.Component, error)) *ComponentRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *ComponentRepository) Save(tx *gorm.DB, t *models.Component) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Component) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ComponentRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Component
func (_e *ComponentRepository_Expecter) Save(tx interface{}, t interface{}) *ComponentRepository_Save_Call {
	return &ComponentRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *ComponentRepository_Save_Call) Run(run func(tx *gorm.DB, t *models.Component)) *ComponentRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Component))
	})
	return _c
}

func (_c *ComponentRepository_Save_Call) Return(_a0 error) *ComponentRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Component) error) *ComponentRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, components
func (_m *ComponentRepository) SaveBatch(tx *gorm.DB, components []models.Component) error {
	ret := _m.Called(tx, components)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Component) error); ok {
		r0 = rf(tx, components)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type ComponentRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - components []models.Component
func (_e *ComponentRepository_Expecter) SaveBatch(tx interface{}, components interface{}) *ComponentRepository_SaveBatch_Call {
	return &ComponentRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, components)}
}

func (_c *ComponentRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, components []models.Component)) *ComponentRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Component))
	})
	return _c
}

func (_c *ComponentRepository_SaveBatch_Call) Return(_a0 error) *ComponentRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Component) error) *ComponentRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *ComponentRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type ComponentRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *ComponentRepository_Expecter) Transaction(_a0 interface{}) *ComponentRepository_Transaction_Call {
	return &ComponentRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *ComponentRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *ComponentRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *ComponentRepository_Transaction_Call) Return(_a0 error) *ComponentRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *ComponentRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponentRepository creates a new instance of ComponentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentRepository {
	mock := &ComponentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
