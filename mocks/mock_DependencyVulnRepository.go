// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewDependencyVulnRepository creates a new instance of DependencyVulnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencyVulnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DependencyVulnRepository {
	mock := &DependencyVulnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DependencyVulnRepository is an autogenerated mock type for the DependencyVulnRepository type
type DependencyVulnRepository struct {
	mock.Mock
}

type DependencyVulnRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DependencyVulnRepository) EXPECT() *DependencyVulnRepository_Expecter {
	return &DependencyVulnRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Activate(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type DependencyVulnRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx
//   - id
func (_e *DependencyVulnRepository_Expecter) Activate(tx interface{}, id interface{}) *DependencyVulnRepository_Activate_Call {
	return &DependencyVulnRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *DependencyVulnRepository_Activate_Call) Run(run func(tx core.DB, id string)) *DependencyVulnRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_Activate_Call) Return(err error) *DependencyVulnRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id string) error) *DependencyVulnRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) All() ([]models.DependencyVuln, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.DependencyVuln, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.DependencyVuln); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type DependencyVulnRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *DependencyVulnRepository_Expecter) All() *DependencyVulnRepository_All_Call {
	return &DependencyVulnRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *DependencyVulnRepository_All_Call) Run(run func()) *DependencyVulnRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DependencyVulnRepository_All_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_All_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_All_Call) RunAndReturn(run func() ([]models.DependencyVuln, error)) *DependencyVulnRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyAndSave provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) ApplyAndSave(tx core.DB, dependencyVuln *models.DependencyVuln, vulnEvent *models.VulnEvent) error {
	ret := _mock.Called(tx, dependencyVuln, vulnEvent)

	if len(ret) == 0 {
		panic("no return value specified for ApplyAndSave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.DependencyVuln, *models.VulnEvent) error); ok {
		r0 = returnFunc(tx, dependencyVuln, vulnEvent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_ApplyAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyAndSave'
type DependencyVulnRepository_ApplyAndSave_Call struct {
	*mock.Call
}

// ApplyAndSave is a helper method to define mock.On call
//   - tx
//   - dependencyVuln
//   - vulnEvent
func (_e *DependencyVulnRepository_Expecter) ApplyAndSave(tx interface{}, dependencyVuln interface{}, vulnEvent interface{}) *DependencyVulnRepository_ApplyAndSave_Call {
	return &DependencyVulnRepository_ApplyAndSave_Call{Call: _e.mock.On("ApplyAndSave", tx, dependencyVuln, vulnEvent)}
}

func (_c *DependencyVulnRepository_ApplyAndSave_Call) Run(run func(tx core.DB, dependencyVuln *models.DependencyVuln, vulnEvent *models.VulnEvent)) *DependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.DependencyVuln), args[2].(*models.VulnEvent))
	})
	return _c
}

func (_c *DependencyVulnRepository_ApplyAndSave_Call) Return(err error) *DependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_ApplyAndSave_Call) RunAndReturn(run func(tx core.DB, dependencyVuln *models.DependencyVuln, vulnEvent *models.VulnEvent) error) *DependencyVulnRepository_ApplyAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// DependencyVulnRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type DependencyVulnRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *DependencyVulnRepository_Expecter) Begin() *DependencyVulnRepository_Begin_Call {
	return &DependencyVulnRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *DependencyVulnRepository_Begin_Call) Run(run func()) *DependencyVulnRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DependencyVulnRepository_Begin_Call) Return(v core.DB) *DependencyVulnRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *DependencyVulnRepository_Begin_Call) RunAndReturn(run func() core.DB) *DependencyVulnRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Create(tx core.DB, t *models.DependencyVuln) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.DependencyVuln) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DependencyVulnRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx
//   - t
func (_e *DependencyVulnRepository_Expecter) Create(tx interface{}, t interface{}) *DependencyVulnRepository_Create_Call {
	return &DependencyVulnRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *DependencyVulnRepository_Create_Call) Run(run func(tx core.DB, t *models.DependencyVuln)) *DependencyVulnRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.DependencyVuln))
	})
	return _c
}

func (_c *DependencyVulnRepository_Create_Call) Return(err error) *DependencyVulnRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.DependencyVuln) error) *DependencyVulnRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) CreateBatch(tx core.DB, ts []models.DependencyVuln) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.DependencyVuln) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type DependencyVulnRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *DependencyVulnRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *DependencyVulnRepository_CreateBatch_Call {
	return &DependencyVulnRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *DependencyVulnRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.DependencyVuln)) *DependencyVulnRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *DependencyVulnRepository_CreateBatch_Call) Return(err error) *DependencyVulnRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.DependencyVuln) error) *DependencyVulnRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Delete(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DependencyVulnRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *DependencyVulnRepository_Expecter) Delete(tx interface{}, id interface{}) *DependencyVulnRepository_Delete_Call {
	return &DependencyVulnRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *DependencyVulnRepository_Delete_Call) Run(run func(tx core.DB, id string)) *DependencyVulnRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_Delete_Call) Return(err error) *DependencyVulnRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id string) error) *DependencyVulnRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) DeleteBatch(tx core.DB, ids []models.DependencyVuln) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.DependencyVuln) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type DependencyVulnRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx
//   - ids
func (_e *DependencyVulnRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *DependencyVulnRepository_DeleteBatch_Call {
	return &DependencyVulnRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *DependencyVulnRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.DependencyVuln)) *DependencyVulnRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *DependencyVulnRepository_DeleteBatch_Call) Return(err error) *DependencyVulnRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.DependencyVuln) error) *DependencyVulnRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx core.DB, assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _mock.Called(tx, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOpenVulnsByAssetVersionNameAndAssetId")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return returnFunc(tx, assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = returnFunc(tx, assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID) error); ok {
		r1 = returnFunc(tx, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOpenVulnsByAssetVersionNameAndAssetId'
type DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call struct {
	*mock.Call
}

// GetAllOpenVulnsByAssetVersionNameAndAssetId is a helper method to define mock.On call
//   - tx
//   - assetVersionName
//   - assetID
func (_e *DependencyVulnRepository_Expecter) GetAllOpenVulnsByAssetVersionNameAndAssetId(tx interface{}, assetVersionName interface{}, assetID interface{}) *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	return &DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call{Call: _e.mock.On("GetAllOpenVulnsByAssetVersionNameAndAssetId", tx, assetVersionName, assetID)}
}

func (_c *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Run(run func(tx core.DB, assetVersionName string, assetID uuid.UUID)) *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error)) *DependencyVulnRepository_GetAllOpenVulnsByAssetVersionNameAndAssetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnsByAssetID provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetAllVulnsByAssetID(tx core.DB, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _mock.Called(tx, assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnsByAssetID")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return returnFunc(tx, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) []models.DependencyVuln); ok {
		r0 = returnFunc(tx, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID) error); ok {
		r1 = returnFunc(tx, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetAllVulnsByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnsByAssetID'
type DependencyVulnRepository_GetAllVulnsByAssetID_Call struct {
	*mock.Call
}

// GetAllVulnsByAssetID is a helper method to define mock.On call
//   - tx
//   - assetID
func (_e *DependencyVulnRepository_Expecter) GetAllVulnsByAssetID(tx interface{}, assetID interface{}) *DependencyVulnRepository_GetAllVulnsByAssetID_Call {
	return &DependencyVulnRepository_GetAllVulnsByAssetID_Call{Call: _e.mock.On("GetAllVulnsByAssetID", tx, assetID)}
}

func (_c *DependencyVulnRepository_GetAllVulnsByAssetID_Call) Run(run func(tx core.DB, assetID uuid.UUID)) *DependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetAllVulnsByAssetID_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_GetAllVulnsByAssetID_Call) RunAndReturn(run func(tx core.DB, assetID uuid.UUID) ([]models.DependencyVuln, error)) *DependencyVulnRepository_GetAllVulnsByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersionPaged provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetByAssetVersionPaged(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error) {
	ret := _mock.Called(tx, assetVersionName, assetID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersionPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 map[string]int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error)); ok {
		return returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) map[string]int); ok {
		r1 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r2 = returnFunc(tx, assetVersionName, assetID, pageInfo, search, filter, sort)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// DependencyVulnRepository_GetByAssetVersionPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersionPaged'
type DependencyVulnRepository_GetByAssetVersionPaged_Call struct {
	*mock.Call
}

// GetByAssetVersionPaged is a helper method to define mock.On call
//   - tx
//   - assetVersionName
//   - assetID
//   - pageInfo
//   - search
//   - filter
//   - sort
func (_e *DependencyVulnRepository_Expecter) GetByAssetVersionPaged(tx interface{}, assetVersionName interface{}, assetID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *DependencyVulnRepository_GetByAssetVersionPaged_Call {
	return &DependencyVulnRepository_GetByAssetVersionPaged_Call{Call: _e.mock.On("GetByAssetVersionPaged", tx, assetVersionName, assetID, pageInfo, search, filter, sort)}
}

func (_c *DependencyVulnRepository_GetByAssetVersionPaged_Call) Run(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *DependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetByAssetVersionPaged_Call) Return(paged core.Paged[models.DependencyVuln], stringToInt map[string]int, err error) *DependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(paged, stringToInt, err)
	return _c
}

func (_c *DependencyVulnRepository_GetByAssetVersionPaged_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], map[string]int, error)) *DependencyVulnRepository_GetByAssetVersionPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// DependencyVulnRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type DependencyVulnRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *DependencyVulnRepository_Expecter) GetDB(tx interface{}) *DependencyVulnRepository_GetDB_Call {
	return &DependencyVulnRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *DependencyVulnRepository_GetDB_Call) Run(run func(tx core.DB)) *DependencyVulnRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDB_Call) Return(v core.DB) *DependencyVulnRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *DependencyVulnRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *DependencyVulnRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDependencyVulnsByOrgIdPaged provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDefaultDependencyVulnsByOrgIdPaged(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _mock.Called(tx, userAllowedProjectIds, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDependencyVulnsByOrgIdPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, []string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, userAllowedProjectIds, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDependencyVulnsByOrgIdPaged'
type DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call struct {
	*mock.Call
}

// GetDefaultDependencyVulnsByOrgIdPaged is a helper method to define mock.On call
//   - tx
//   - userAllowedProjectIds
//   - pageInfo
//   - search
//   - filter
//   - sort
func (_e *DependencyVulnRepository_Expecter) GetDefaultDependencyVulnsByOrgIdPaged(tx interface{}, userAllowedProjectIds interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	return &DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call{Call: _e.mock.On("GetDefaultDependencyVulnsByOrgIdPaged", tx, userAllowedProjectIds, pageInfo, search, filter, sort)}
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) Run(run func(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]string), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) Return(paged core.Paged[models.DependencyVuln], err error) *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call) RunAndReturn(run func(tx core.DB, userAllowedProjectIds []string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *DependencyVulnRepository_GetDefaultDependencyVulnsByOrgIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDependencyVulnsByProjectIdPaged provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDefaultDependencyVulnsByProjectIdPaged(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _mock.Called(tx, projectID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDependencyVulnsByProjectIdPaged")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return returnFunc(tx, projectID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, projectID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDependencyVulnsByProjectIdPaged'
type DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call struct {
	*mock.Call
}

// GetDefaultDependencyVulnsByProjectIdPaged is a helper method to define mock.On call
//   - tx
//   - projectID
//   - pageInfo
//   - search
//   - filter
//   - sort
func (_e *DependencyVulnRepository_Expecter) GetDefaultDependencyVulnsByProjectIdPaged(tx interface{}, projectID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	return &DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call{Call: _e.mock.On("GetDefaultDependencyVulnsByProjectIdPaged", tx, projectID, pageInfo, search, filter, sort)}
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) Run(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID), args[2].(core.PageInfo), args[3].(string), args[4].([]core.FilterQuery), args[5].([]core.SortQuery))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) Return(paged core.Paged[models.DependencyVuln], err error) *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call) RunAndReturn(run func(tx core.DB, projectID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *DependencyVulnRepository_GetDefaultDependencyVulnsByProjectIdPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByAssetVersion provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDependencyVulnsByAssetVersion(tx core.DB, assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(tx, assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByAssetVersion")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(tx, assetVersionName, assetID, scannerID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, string) []models.DependencyVuln); ok {
		r0 = returnFunc(tx, assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID, string) error); ok {
		r1 = returnFunc(tx, assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByAssetVersion'
type DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call struct {
	*mock.Call
}

// GetDependencyVulnsByAssetVersion is a helper method to define mock.On call
//   - tx
//   - assetVersionName
//   - assetID
//   - scannerID
func (_e *DependencyVulnRepository_Expecter) GetDependencyVulnsByAssetVersion(tx interface{}, assetVersionName interface{}, assetID interface{}, scannerID interface{}) *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	return &DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call{Call: _e.mock.On("GetDependencyVulnsByAssetVersion", tx, assetVersionName, assetID, scannerID)}
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Run(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, scannerID string)) *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error)) *DependencyVulnRepository_GetDependencyVulnsByAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByAssetVersionPagedAndFlat provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDependencyVulnsByAssetVersionPagedAndFlat(tx core.DB, assetVersionName string, assetVersionID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error) {
	ret := _mock.Called(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByAssetVersionPagedAndFlat")
	}

	var r0 core.Paged[models.DependencyVuln]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.DependencyVuln], error)); ok {
		return returnFunc(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.DependencyVuln]); ok {
		r0 = returnFunc(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.DependencyVuln])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, uuid.UUID, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByAssetVersionPagedAndFlat'
type DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call struct {
	*mock.Call
}

// GetDependencyVulnsByAssetVersionPagedAndFlat is a helper method to define mock.On call
//   - tx
//   - assetVersionName
//   - assetVersionID
//   - pageInfo
//   - search
//   - filter
//   - sort
func (_e *DependencyVulnRepository_Expecter) GetDependencyVulnsByAssetVersionPagedAndFlat(tx interface{}, assetVersionName interface{}, assetVersionID interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	return &DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call{Call: _e.mock.On("GetDependencyVulnsByAssetVersionPagedAndFlat", tx, assetVersionName, assetVersionID, pageInfo, search, filter, sort)}
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) Run(run func(tx core.DB, assetVersionName string, assetVersionID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(uuid.UUID), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) Return(paged core.Paged[models.DependencyVuln], err error) *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call) RunAndReturn(run func(tx core.DB, assetVersionName string, assetVersionID uuid.UUID, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.DependencyVuln], error)) *DependencyVulnRepository_GetDependencyVulnsByAssetVersionPagedAndFlat_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByDefaultAssetVersion provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDependencyVulnsByDefaultAssetVersion(tx core.DB, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(tx, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByDefaultAssetVersion")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(tx, assetID, scannerID)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string) []models.DependencyVuln); ok {
		r0 = returnFunc(tx, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, string) error); ok {
		r1 = returnFunc(tx, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByDefaultAssetVersion'
type DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call struct {
	*mock.Call
}

// GetDependencyVulnsByDefaultAssetVersion is a helper method to define mock.On call
//   - tx
//   - assetID
//   - scannerID
func (_e *DependencyVulnRepository_Expecter) GetDependencyVulnsByDefaultAssetVersion(tx interface{}, assetID interface{}, scannerID interface{}) *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call {
	return &DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call{Call: _e.mock.On("GetDependencyVulnsByDefaultAssetVersion", tx, assetID, scannerID)}
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call) Run(run func(tx core.DB, assetID uuid.UUID, scannerID string)) *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call) RunAndReturn(run func(tx core.DB, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error)) *DependencyVulnRepository_GetDependencyVulnsByDefaultAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyVulnsByPurl provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) GetDependencyVulnsByPurl(tx core.DB, purls []string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(tx, purls)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyVulnsByPurl")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(tx, purls)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, []string) []models.DependencyVuln); ok {
		r0 = returnFunc(tx, purls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, []string) error); ok {
		r1 = returnFunc(tx, purls)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_GetDependencyVulnsByPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyVulnsByPurl'
type DependencyVulnRepository_GetDependencyVulnsByPurl_Call struct {
	*mock.Call
}

// GetDependencyVulnsByPurl is a helper method to define mock.On call
//   - tx
//   - purls
func (_e *DependencyVulnRepository_Expecter) GetDependencyVulnsByPurl(tx interface{}, purls interface{}) *DependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	return &DependencyVulnRepository_GetDependencyVulnsByPurl_Call{Call: _e.mock.On("GetDependencyVulnsByPurl", tx, purls)}
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByPurl_Call) Run(run func(tx core.DB, purls []string)) *DependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]string))
	})
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByPurl_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_GetDependencyVulnsByPurl_Call) RunAndReturn(run func(tx core.DB, purls []string) ([]models.DependencyVuln, error)) *DependencyVulnRepository_GetDependencyVulnsByPurl_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) List(ids []string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []models.DependencyVuln); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DependencyVulnRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids
func (_e *DependencyVulnRepository_Expecter) List(ids interface{}) *DependencyVulnRepository_List_Call {
	return &DependencyVulnRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *DependencyVulnRepository_List_Call) Run(run func(ids []string)) *DependencyVulnRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *DependencyVulnRepository_List_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_List_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_List_Call) RunAndReturn(run func(ids []string) ([]models.DependencyVuln, error)) *DependencyVulnRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByAssetAndAssetVersion provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) ListByAssetAndAssetVersion(assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for ListByAssetAndAssetVersion")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) ([]models.DependencyVuln, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) []models.DependencyVuln); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_ListByAssetAndAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByAssetAndAssetVersion'
type DependencyVulnRepository_ListByAssetAndAssetVersion_Call struct {
	*mock.Call
}

// ListByAssetAndAssetVersion is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *DependencyVulnRepository_Expecter) ListByAssetAndAssetVersion(assetVersionName interface{}, assetID interface{}) *DependencyVulnRepository_ListByAssetAndAssetVersion_Call {
	return &DependencyVulnRepository_ListByAssetAndAssetVersion_Call{Call: _e.mock.On("ListByAssetAndAssetVersion", assetVersionName, assetID)}
}

func (_c *DependencyVulnRepository_ListByAssetAndAssetVersion_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *DependencyVulnRepository_ListByAssetAndAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DependencyVulnRepository_ListByAssetAndAssetVersion_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_ListByAssetAndAssetVersion_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_ListByAssetAndAssetVersion_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) ([]models.DependencyVuln, error)) *DependencyVulnRepository_ListByAssetAndAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ListUnfixedByAssetAndAssetVersionAndScannerID provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) ListUnfixedByAssetAndAssetVersionAndScannerID(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(assetVersionName, assetID, scannerID)

	if len(ret) == 0 {
		panic("no return value specified for ListUnfixedByAssetAndAssetVersionAndScannerID")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(assetVersionName, assetID, scannerID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID, string) []models.DependencyVuln); ok {
		r0 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID, string) error); ok {
		r1 = returnFunc(assetVersionName, assetID, scannerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUnfixedByAssetAndAssetVersionAndScannerID'
type DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call struct {
	*mock.Call
}

// ListUnfixedByAssetAndAssetVersionAndScannerID is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
//   - scannerID
func (_e *DependencyVulnRepository_Expecter) ListUnfixedByAssetAndAssetVersionAndScannerID(assetVersionName interface{}, assetID interface{}, scannerID interface{}) *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call {
	return &DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call{Call: _e.mock.On("ListUnfixedByAssetAndAssetVersionAndScannerID", assetVersionName, assetID, scannerID)}
}

func (_c *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call) Run(run func(assetVersionName string, assetID uuid.UUID, scannerID string)) *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call) Return(dependencyVulns []models.DependencyVuln, err error) *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID, scannerID string) ([]models.DependencyVuln, error)) *DependencyVulnRepository_ListUnfixedByAssetAndAssetVersionAndScannerID_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Read(id string) (models.DependencyVuln, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.DependencyVuln, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.DependencyVuln); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.DependencyVuln)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DependencyVulnRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type DependencyVulnRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *DependencyVulnRepository_Expecter) Read(id interface{}) *DependencyVulnRepository_Read_Call {
	return &DependencyVulnRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *DependencyVulnRepository_Read_Call) Run(run func(id string)) *DependencyVulnRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DependencyVulnRepository_Read_Call) Return(dependencyVuln models.DependencyVuln, err error) *DependencyVulnRepository_Read_Call {
	_c.Call.Return(dependencyVuln, err)
	return _c
}

func (_c *DependencyVulnRepository_Read_Call) RunAndReturn(run func(id string) (models.DependencyVuln, error)) *DependencyVulnRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Save(tx core.DB, t *models.DependencyVuln) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.DependencyVuln) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type DependencyVulnRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - t
func (_e *DependencyVulnRepository_Expecter) Save(tx interface{}, t interface{}) *DependencyVulnRepository_Save_Call {
	return &DependencyVulnRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *DependencyVulnRepository_Save_Call) Run(run func(tx core.DB, t *models.DependencyVuln)) *DependencyVulnRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.DependencyVuln))
	})
	return _c
}

func (_c *DependencyVulnRepository_Save_Call) Return(err error) *DependencyVulnRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.DependencyVuln) error) *DependencyVulnRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) SaveBatch(tx core.DB, ts []models.DependencyVuln) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.DependencyVuln) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type DependencyVulnRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *DependencyVulnRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *DependencyVulnRepository_SaveBatch_Call {
	return &DependencyVulnRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *DependencyVulnRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.DependencyVuln)) *DependencyVulnRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.DependencyVuln))
	})
	return _c
}

func (_c *DependencyVulnRepository_SaveBatch_Call) Return(err error) *DependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.DependencyVuln) error) *DependencyVulnRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type DependencyVulnRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *DependencyVulnRepository_Expecter) Transaction(fn interface{}) *DependencyVulnRepository_Transaction_Call {
	return &DependencyVulnRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *DependencyVulnRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *DependencyVulnRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *DependencyVulnRepository_Transaction_Call) Return(err error) *DependencyVulnRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *DependencyVulnRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type DependencyVulnRepository
func (_mock *DependencyVulnRepository) Upsert(t *[]*models.DependencyVuln, conflictingColumns *[]clause.Column) error {
	ret := _mock.Called(t, conflictingColumns)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.DependencyVuln, *[]clause.Column) error); ok {
		r0 = returnFunc(t, conflictingColumns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DependencyVulnRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type DependencyVulnRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t
//   - conflictingColumns
func (_e *DependencyVulnRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}) *DependencyVulnRepository_Upsert_Call {
	return &DependencyVulnRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns)}
}

func (_c *DependencyVulnRepository_Upsert_Call) Run(run func(t *[]*models.DependencyVuln, conflictingColumns *[]clause.Column)) *DependencyVulnRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]*models.DependencyVuln), args[1].(*[]clause.Column))
	})
	return _c
}

func (_c *DependencyVulnRepository_Upsert_Call) Return(err error) *DependencyVulnRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DependencyVulnRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.DependencyVuln, conflictingColumns *[]clause.Column) error) *DependencyVulnRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
