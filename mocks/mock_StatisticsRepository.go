// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewStatisticsRepository creates a new instance of StatisticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatisticsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatisticsRepository {
	mock := &StatisticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StatisticsRepository is an autogenerated mock type for the StatisticsRepository type
type StatisticsRepository struct {
	mock.Mock
}

type StatisticsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StatisticsRepository) EXPECT() *StatisticsRepository_Expecter {
	return &StatisticsRepository_Expecter{mock: &_m.Mock}
}

// AverageFixingTime provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) AverageFixingTime(artifactNam *string, assetVersionName string, assetID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64) (time.Duration, error) {
	ret := _mock.Called(artifactNam, assetVersionName, assetID, riskIntervalStart, riskIntervalEnd)

	if len(ret) == 0 {
		panic("no return value specified for AverageFixingTime")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, float64, float64) (time.Duration, error)); ok {
		return returnFunc(artifactNam, assetVersionName, assetID, riskIntervalStart, riskIntervalEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, float64, float64) time.Duration); ok {
		r0 = returnFunc(artifactNam, assetVersionName, assetID, riskIntervalStart, riskIntervalEnd)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(*string, string, uuid.UUID, float64, float64) error); ok {
		r1 = returnFunc(artifactNam, assetVersionName, assetID, riskIntervalStart, riskIntervalEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_AverageFixingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageFixingTime'
type StatisticsRepository_AverageFixingTime_Call struct {
	*mock.Call
}

// AverageFixingTime is a helper method to define mock.On call
//   - artifactNam *string
//   - assetVersionName string
//   - assetID uuid.UUID
//   - riskIntervalStart float64
//   - riskIntervalEnd float64
func (_e *StatisticsRepository_Expecter) AverageFixingTime(artifactNam interface{}, assetVersionName interface{}, assetID interface{}, riskIntervalStart interface{}, riskIntervalEnd interface{}) *StatisticsRepository_AverageFixingTime_Call {
	return &StatisticsRepository_AverageFixingTime_Call{Call: _e.mock.On("AverageFixingTime", artifactNam, assetVersionName, assetID, riskIntervalStart, riskIntervalEnd)}
}

func (_c *StatisticsRepository_AverageFixingTime_Call) Run(run func(artifactNam *string, assetVersionName string, assetID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64)) *StatisticsRepository_AverageFixingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *string
		if args[0] != nil {
			arg0 = args[0].(*string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 float64
		if args[3] != nil {
			arg3 = args[3].(float64)
		}
		var arg4 float64
		if args[4] != nil {
			arg4 = args[4].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *StatisticsRepository_AverageFixingTime_Call) Return(duration time.Duration, err error) *StatisticsRepository_AverageFixingTime_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsRepository_AverageFixingTime_Call) RunAndReturn(run func(artifactNam *string, assetVersionName string, assetID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64) (time.Duration, error)) *StatisticsRepository_AverageFixingTime_Call {
	_c.Call.Return(run)
	return _c
}

// AverageFixingTimeByCvss provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) AverageFixingTimeByCvss(artifactName *string, assetVersionName string, assetID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64) (time.Duration, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID, cvssIntervalStart, cvssIntervalEnd)

	if len(ret) == 0 {
		panic("no return value specified for AverageFixingTimeByCvss")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, float64, float64) (time.Duration, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID, cvssIntervalStart, cvssIntervalEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, float64, float64) time.Duration); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID, cvssIntervalStart, cvssIntervalEnd)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(*string, string, uuid.UUID, float64, float64) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID, cvssIntervalStart, cvssIntervalEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_AverageFixingTimeByCvss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageFixingTimeByCvss'
type StatisticsRepository_AverageFixingTimeByCvss_Call struct {
	*mock.Call
}

// AverageFixingTimeByCvss is a helper method to define mock.On call
//   - artifactName *string
//   - assetVersionName string
//   - assetID uuid.UUID
//   - cvssIntervalStart float64
//   - cvssIntervalEnd float64
func (_e *StatisticsRepository_Expecter) AverageFixingTimeByCvss(artifactName interface{}, assetVersionName interface{}, assetID interface{}, cvssIntervalStart interface{}, cvssIntervalEnd interface{}) *StatisticsRepository_AverageFixingTimeByCvss_Call {
	return &StatisticsRepository_AverageFixingTimeByCvss_Call{Call: _e.mock.On("AverageFixingTimeByCvss", artifactName, assetVersionName, assetID, cvssIntervalStart, cvssIntervalEnd)}
}

func (_c *StatisticsRepository_AverageFixingTimeByCvss_Call) Run(run func(artifactName *string, assetVersionName string, assetID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64)) *StatisticsRepository_AverageFixingTimeByCvss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *string
		if args[0] != nil {
			arg0 = args[0].(*string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 float64
		if args[3] != nil {
			arg3 = args[3].(float64)
		}
		var arg4 float64
		if args[4] != nil {
			arg4 = args[4].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeByCvss_Call) Return(duration time.Duration, err error) *StatisticsRepository_AverageFixingTimeByCvss_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeByCvss_Call) RunAndReturn(run func(artifactName *string, assetVersionName string, assetID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64) (time.Duration, error)) *StatisticsRepository_AverageFixingTimeByCvss_Call {
	_c.Call.Return(run)
	return _c
}

// AverageFixingTimeByCvssForRelease provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) AverageFixingTimeByCvssForRelease(releaseID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64) (time.Duration, error) {
	ret := _mock.Called(releaseID, cvssIntervalStart, cvssIntervalEnd)

	if len(ret) == 0 {
		panic("no return value specified for AverageFixingTimeByCvssForRelease")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, float64, float64) (time.Duration, error)); ok {
		return returnFunc(releaseID, cvssIntervalStart, cvssIntervalEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, float64, float64) time.Duration); ok {
		r0 = returnFunc(releaseID, cvssIntervalStart, cvssIntervalEnd)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, float64, float64) error); ok {
		r1 = returnFunc(releaseID, cvssIntervalStart, cvssIntervalEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_AverageFixingTimeByCvssForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageFixingTimeByCvssForRelease'
type StatisticsRepository_AverageFixingTimeByCvssForRelease_Call struct {
	*mock.Call
}

// AverageFixingTimeByCvssForRelease is a helper method to define mock.On call
//   - releaseID uuid.UUID
//   - cvssIntervalStart float64
//   - cvssIntervalEnd float64
func (_e *StatisticsRepository_Expecter) AverageFixingTimeByCvssForRelease(releaseID interface{}, cvssIntervalStart interface{}, cvssIntervalEnd interface{}) *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call {
	return &StatisticsRepository_AverageFixingTimeByCvssForRelease_Call{Call: _e.mock.On("AverageFixingTimeByCvssForRelease", releaseID, cvssIntervalStart, cvssIntervalEnd)}
}

func (_c *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call) Run(run func(releaseID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64)) *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call) Return(duration time.Duration, err error) *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call) RunAndReturn(run func(releaseID uuid.UUID, cvssIntervalStart float64, cvssIntervalEnd float64) (time.Duration, error)) *StatisticsRepository_AverageFixingTimeByCvssForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// AverageFixingTimeForRelease provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) AverageFixingTimeForRelease(releaseID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64) (time.Duration, error) {
	ret := _mock.Called(releaseID, riskIntervalStart, riskIntervalEnd)

	if len(ret) == 0 {
		panic("no return value specified for AverageFixingTimeForRelease")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, float64, float64) (time.Duration, error)); ok {
		return returnFunc(releaseID, riskIntervalStart, riskIntervalEnd)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, float64, float64) time.Duration); ok {
		r0 = returnFunc(releaseID, riskIntervalStart, riskIntervalEnd)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, float64, float64) error); ok {
		r1 = returnFunc(releaseID, riskIntervalStart, riskIntervalEnd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_AverageFixingTimeForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageFixingTimeForRelease'
type StatisticsRepository_AverageFixingTimeForRelease_Call struct {
	*mock.Call
}

// AverageFixingTimeForRelease is a helper method to define mock.On call
//   - releaseID uuid.UUID
//   - riskIntervalStart float64
//   - riskIntervalEnd float64
func (_e *StatisticsRepository_Expecter) AverageFixingTimeForRelease(releaseID interface{}, riskIntervalStart interface{}, riskIntervalEnd interface{}) *StatisticsRepository_AverageFixingTimeForRelease_Call {
	return &StatisticsRepository_AverageFixingTimeForRelease_Call{Call: _e.mock.On("AverageFixingTimeForRelease", releaseID, riskIntervalStart, riskIntervalEnd)}
}

func (_c *StatisticsRepository_AverageFixingTimeForRelease_Call) Run(run func(releaseID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64)) *StatisticsRepository_AverageFixingTimeForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeForRelease_Call) Return(duration time.Duration, err error) *StatisticsRepository_AverageFixingTimeForRelease_Call {
	_c.Call.Return(duration, err)
	return _c
}

func (_c *StatisticsRepository_AverageFixingTimeForRelease_Call) RunAndReturn(run func(releaseID uuid.UUID, riskIntervalStart float64, riskIntervalEnd float64) (time.Duration, error)) *StatisticsRepository_AverageFixingTimeForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// CVESWithKnownExploitsInAssetVersion provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) CVESWithKnownExploitsInAssetVersion(assetVersion models.AssetVersion) ([]models.CVE, error) {
	ret := _mock.Called(assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for CVESWithKnownExploitsInAssetVersion")
	}

	var r0 []models.CVE
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.AssetVersion) ([]models.CVE, error)); ok {
		return returnFunc(assetVersion)
	}
	if returnFunc, ok := ret.Get(0).(func(models.AssetVersion) []models.CVE); ok {
		r0 = returnFunc(assetVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CVE)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(models.AssetVersion) error); ok {
		r1 = returnFunc(assetVersion)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CVESWithKnownExploitsInAssetVersion'
type StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call struct {
	*mock.Call
}

// CVESWithKnownExploitsInAssetVersion is a helper method to define mock.On call
//   - assetVersion models.AssetVersion
func (_e *StatisticsRepository_Expecter) CVESWithKnownExploitsInAssetVersion(assetVersion interface{}) *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call {
	return &StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call{Call: _e.mock.On("CVESWithKnownExploitsInAssetVersion", assetVersion)}
}

func (_c *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call) Run(run func(assetVersion models.AssetVersion)) *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.AssetVersion
		if args[0] != nil {
			arg0 = args[0].(models.AssetVersion)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call) Return(cVEs []models.CVE, err error) *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call {
	_c.Call.Return(cVEs, err)
	return _c
}

func (_c *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call) RunAndReturn(run func(assetVersion models.AssetVersion) ([]models.CVE, error)) *StatisticsRepository_CVESWithKnownExploitsInAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// TimeTravelDependencyVulnState provides a mock function for the type StatisticsRepository
func (_mock *StatisticsRepository) TimeTravelDependencyVulnState(artifactName *string, assetVersionName *string, assetID uuid.UUID, time1 time.Time) ([]models.DependencyVuln, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID, time1)

	if len(ret) == 0 {
		panic("no return value specified for TimeTravelDependencyVulnState")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*string, *string, uuid.UUID, time.Time) ([]models.DependencyVuln, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID, time1)
	}
	if returnFunc, ok := ret.Get(0).(func(*string, *string, uuid.UUID, time.Time) []models.DependencyVuln); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID, time1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*string, *string, uuid.UUID, time.Time) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID, time1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatisticsRepository_TimeTravelDependencyVulnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeTravelDependencyVulnState'
type StatisticsRepository_TimeTravelDependencyVulnState_Call struct {
	*mock.Call
}

// TimeTravelDependencyVulnState is a helper method to define mock.On call
//   - artifactName *string
//   - assetVersionName *string
//   - assetID uuid.UUID
//   - time1 time.Time
func (_e *StatisticsRepository_Expecter) TimeTravelDependencyVulnState(artifactName interface{}, assetVersionName interface{}, assetID interface{}, time1 interface{}) *StatisticsRepository_TimeTravelDependencyVulnState_Call {
	return &StatisticsRepository_TimeTravelDependencyVulnState_Call{Call: _e.mock.On("TimeTravelDependencyVulnState", artifactName, assetVersionName, assetID, time1)}
}

func (_c *StatisticsRepository_TimeTravelDependencyVulnState_Call) Run(run func(artifactName *string, assetVersionName *string, assetID uuid.UUID, time1 time.Time)) *StatisticsRepository_TimeTravelDependencyVulnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *string
		if args[0] != nil {
			arg0 = args[0].(*string)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *StatisticsRepository_TimeTravelDependencyVulnState_Call) Return(dependencyVulns []models.DependencyVuln, err error) *StatisticsRepository_TimeTravelDependencyVulnState_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *StatisticsRepository_TimeTravelDependencyVulnState_Call) RunAndReturn(run func(artifactName *string, assetVersionName *string, assetID uuid.UUID, time1 time.Time) ([]models.DependencyVuln, error)) *StatisticsRepository_TimeTravelDependencyVulnState_Call {
	_c.Call.Return(run)
	return _c
}
