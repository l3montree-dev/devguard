// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core/normalize"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewArtifactService creates a new instance of ArtifactService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactService {
	mock := &ArtifactService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArtifactService is an autogenerated mock type for the ArtifactService type
type ArtifactService struct {
	mock.Mock
}

type ArtifactService_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactService) EXPECT() *ArtifactService_Expecter {
	return &ArtifactService_Expecter{mock: &_m.Mock}
}

// AddUpstreamURLs provides a mock function for the type ArtifactService
func (_mock *ArtifactService) AddUpstreamURLs(artifact *models.Artifact, upstreamURLs []string) error {
	ret := _mock.Called(artifact, upstreamURLs)

	if len(ret) == 0 {
		panic("no return value specified for AddUpstreamURLs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Artifact, []string) error); ok {
		r0 = returnFunc(artifact, upstreamURLs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactService_AddUpstreamURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUpstreamURLs'
type ArtifactService_AddUpstreamURLs_Call struct {
	*mock.Call
}

// AddUpstreamURLs is a helper method to define mock.On call
//   - artifact *models.Artifact
//   - upstreamURLs []string
func (_e *ArtifactService_Expecter) AddUpstreamURLs(artifact interface{}, upstreamURLs interface{}) *ArtifactService_AddUpstreamURLs_Call {
	return &ArtifactService_AddUpstreamURLs_Call{Call: _e.mock.On("AddUpstreamURLs", artifact, upstreamURLs)}
}

func (_c *ArtifactService_AddUpstreamURLs_Call) Run(run func(artifact *models.Artifact, upstreamURLs []string)) *ArtifactService_AddUpstreamURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*models.Artifact)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactService_AddUpstreamURLs_Call) Return(err error) *ArtifactService_AddUpstreamURLs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactService_AddUpstreamURLs_Call) RunAndReturn(run func(artifact *models.Artifact, upstreamURLs []string) error) *ArtifactService_AddUpstreamURLs_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArtifact provides a mock function for the type ArtifactService
func (_mock *ArtifactService) DeleteArtifact(assetID uuid.UUID, assetVersionName string, artifactName string) error {
	ret := _mock.Called(assetID, assetVersionName, artifactName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, string) error); ok {
		r0 = returnFunc(assetID, assetVersionName, artifactName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactService_DeleteArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArtifact'
type ArtifactService_DeleteArtifact_Call struct {
	*mock.Call
}

// DeleteArtifact is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersionName string
//   - artifactName string
func (_e *ArtifactService_Expecter) DeleteArtifact(assetID interface{}, assetVersionName interface{}, artifactName interface{}) *ArtifactService_DeleteArtifact_Call {
	return &ArtifactService_DeleteArtifact_Call{Call: _e.mock.On("DeleteArtifact", assetID, assetVersionName, artifactName)}
}

func (_c *ArtifactService_DeleteArtifact_Call) Run(run func(assetID uuid.UUID, assetVersionName string, artifactName string)) *ArtifactService_DeleteArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ArtifactService_DeleteArtifact_Call) Return(err error) *ArtifactService_DeleteArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactService_DeleteArtifact_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string, artifactName string) error) *ArtifactService_DeleteArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// FetchBomsFromUpstream provides a mock function for the type ArtifactService
func (_mock *ArtifactService) FetchBomsFromUpstream(upstreamURLs []string) ([]normalize.BomWithOrigin, []string, []string) {
	ret := _mock.Called(upstreamURLs)

	if len(ret) == 0 {
		panic("no return value specified for FetchBomsFromUpstream")
	}

	var r0 []normalize.BomWithOrigin
	var r1 []string
	var r2 []string
	if returnFunc, ok := ret.Get(0).(func([]string) ([]normalize.BomWithOrigin, []string, []string)); ok {
		return returnFunc(upstreamURLs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []normalize.BomWithOrigin); ok {
		r0 = returnFunc(upstreamURLs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]normalize.BomWithOrigin)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = returnFunc(upstreamURLs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func([]string) []string); ok {
		r2 = returnFunc(upstreamURLs)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}
	return r0, r1, r2
}

// ArtifactService_FetchBomsFromUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBomsFromUpstream'
type ArtifactService_FetchBomsFromUpstream_Call struct {
	*mock.Call
}

// FetchBomsFromUpstream is a helper method to define mock.On call
//   - upstreamURLs []string
func (_e *ArtifactService_Expecter) FetchBomsFromUpstream(upstreamURLs interface{}) *ArtifactService_FetchBomsFromUpstream_Call {
	return &ArtifactService_FetchBomsFromUpstream_Call{Call: _e.mock.On("FetchBomsFromUpstream", upstreamURLs)}
}

func (_c *ArtifactService_FetchBomsFromUpstream_Call) Run(run func(upstreamURLs []string)) *ArtifactService_FetchBomsFromUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactService_FetchBomsFromUpstream_Call) Return(bomWithOrigins []normalize.BomWithOrigin, strings []string, strings1 []string) *ArtifactService_FetchBomsFromUpstream_Call {
	_c.Call.Return(bomWithOrigins, strings, strings1)
	return _c
}

func (_c *ArtifactService_FetchBomsFromUpstream_Call) RunAndReturn(run func(upstreamURLs []string) ([]normalize.BomWithOrigin, []string, []string)) *ArtifactService_FetchBomsFromUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtifactNamesByAssetIDAndAssetVersionName provides a mock function for the type ArtifactService
func (_mock *ArtifactService) GetArtifactNamesByAssetIDAndAssetVersionName(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error) {
	ret := _mock.Called(assetID, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifactNamesByAssetIDAndAssetVersionName")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.Artifact, error)); ok {
		return returnFunc(assetID, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) []models.Artifact); ok {
		r0 = returnFunc(assetID, assetVersionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifactNamesByAssetIDAndAssetVersionName'
type ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call struct {
	*mock.Call
}

// GetArtifactNamesByAssetIDAndAssetVersionName is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersionName string
func (_e *ArtifactService_Expecter) GetArtifactNamesByAssetIDAndAssetVersionName(assetID interface{}, assetVersionName interface{}) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	return &ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call{Call: _e.mock.On("GetArtifactNamesByAssetIDAndAssetVersionName", assetID, assetVersionName)}
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) Run(run func(assetID uuid.UUID, assetVersionName string)) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) Return(artifacts []models.Artifact, err error) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error)) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(run)
	return _c
}

// ReadArtifact provides a mock function for the type ArtifactService
func (_mock *ArtifactService) ReadArtifact(name string, assetVersionName string, assetID uuid.UUID) (models.Artifact, error) {
	ret := _mock.Called(name, assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for ReadArtifact")
	}

	var r0 models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) (models.Artifact, error)); ok {
		return returnFunc(name, assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, uuid.UUID) models.Artifact); ok {
		r0 = returnFunc(name, assetVersionName, assetID)
	} else {
		r0 = ret.Get(0).(models.Artifact)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, uuid.UUID) error); ok {
		r1 = returnFunc(name, assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactService_ReadArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadArtifact'
type ArtifactService_ReadArtifact_Call struct {
	*mock.Call
}

// ReadArtifact is a helper method to define mock.On call
//   - name string
//   - assetVersionName string
//   - assetID uuid.UUID
func (_e *ArtifactService_Expecter) ReadArtifact(name interface{}, assetVersionName interface{}, assetID interface{}) *ArtifactService_ReadArtifact_Call {
	return &ArtifactService_ReadArtifact_Call{Call: _e.mock.On("ReadArtifact", name, assetVersionName, assetID)}
}

func (_c *ArtifactService_ReadArtifact_Call) Run(run func(name string, assetVersionName string, assetID uuid.UUID)) *ArtifactService_ReadArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ArtifactService_ReadArtifact_Call) Return(artifact models.Artifact, err error) *ArtifactService_ReadArtifact_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *ArtifactService_ReadArtifact_Call) RunAndReturn(run func(name string, assetVersionName string, assetID uuid.UUID) (models.Artifact, error)) *ArtifactService_ReadArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUpstreamURLs provides a mock function for the type ArtifactService
func (_mock *ArtifactService) RemoveUpstreamURLs(artifact *models.Artifact, upstreamURLs []string) error {
	ret := _mock.Called(artifact, upstreamURLs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUpstreamURLs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Artifact, []string) error); ok {
		r0 = returnFunc(artifact, upstreamURLs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactService_RemoveUpstreamURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUpstreamURLs'
type ArtifactService_RemoveUpstreamURLs_Call struct {
	*mock.Call
}

// RemoveUpstreamURLs is a helper method to define mock.On call
//   - artifact *models.Artifact
//   - upstreamURLs []string
func (_e *ArtifactService_Expecter) RemoveUpstreamURLs(artifact interface{}, upstreamURLs interface{}) *ArtifactService_RemoveUpstreamURLs_Call {
	return &ArtifactService_RemoveUpstreamURLs_Call{Call: _e.mock.On("RemoveUpstreamURLs", artifact, upstreamURLs)}
}

func (_c *ArtifactService_RemoveUpstreamURLs_Call) Run(run func(artifact *models.Artifact, upstreamURLs []string)) *ArtifactService_RemoveUpstreamURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*models.Artifact)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactService_RemoveUpstreamURLs_Call) Return(err error) *ArtifactService_RemoveUpstreamURLs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactService_RemoveUpstreamURLs_Call) RunAndReturn(run func(artifact *models.Artifact, upstreamURLs []string) error) *ArtifactService_RemoveUpstreamURLs_Call {
	_c.Call.Return(run)
	return _c
}

// SaveArtifact provides a mock function for the type ArtifactService
func (_mock *ArtifactService) SaveArtifact(artifact *models.Artifact) error {
	ret := _mock.Called(artifact)

	if len(ret) == 0 {
		panic("no return value specified for SaveArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Artifact) error); ok {
		r0 = returnFunc(artifact)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactService_SaveArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveArtifact'
type ArtifactService_SaveArtifact_Call struct {
	*mock.Call
}

// SaveArtifact is a helper method to define mock.On call
//   - artifact *models.Artifact
func (_e *ArtifactService_Expecter) SaveArtifact(artifact interface{}) *ArtifactService_SaveArtifact_Call {
	return &ArtifactService_SaveArtifact_Call{Call: _e.mock.On("SaveArtifact", artifact)}
}

func (_c *ArtifactService_SaveArtifact_Call) Run(run func(artifact *models.Artifact)) *ArtifactService_SaveArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*models.Artifact)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactService_SaveArtifact_Call) Return(err error) *ArtifactService_SaveArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactService_SaveArtifact_Call) RunAndReturn(run func(artifact *models.Artifact) error) *ArtifactService_SaveArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// SyncUpstreamBoms provides a mock function for the type ArtifactService
func (_mock *ArtifactService) SyncUpstreamBoms(boms []normalize.BomWithOrigin, org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, artifact models.Artifact, userID string) ([]models.DependencyVuln, error) {
	ret := _mock.Called(boms, org, project, asset, assetVersion, artifact, userID)

	if len(ret) == 0 {
		panic("no return value specified for SyncUpstreamBoms")
	}

	var r0 []models.DependencyVuln
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]normalize.BomWithOrigin, models.Org, models.Project, models.Asset, models.AssetVersion, models.Artifact, string) ([]models.DependencyVuln, error)); ok {
		return returnFunc(boms, org, project, asset, assetVersion, artifact, userID)
	}
	if returnFunc, ok := ret.Get(0).(func([]normalize.BomWithOrigin, models.Org, models.Project, models.Asset, models.AssetVersion, models.Artifact, string) []models.DependencyVuln); ok {
		r0 = returnFunc(boms, org, project, asset, assetVersion, artifact, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DependencyVuln)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]normalize.BomWithOrigin, models.Org, models.Project, models.Asset, models.AssetVersion, models.Artifact, string) error); ok {
		r1 = returnFunc(boms, org, project, asset, assetVersion, artifact, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactService_SyncUpstreamBoms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncUpstreamBoms'
type ArtifactService_SyncUpstreamBoms_Call struct {
	*mock.Call
}

// SyncUpstreamBoms is a helper method to define mock.On call
//   - boms []normalize.BomWithOrigin
//   - org models.Org
//   - project models.Project
//   - asset models.Asset
//   - assetVersion models.AssetVersion
//   - artifact models.Artifact
//   - userID string
func (_e *ArtifactService_Expecter) SyncUpstreamBoms(boms interface{}, org interface{}, project interface{}, asset interface{}, assetVersion interface{}, artifact interface{}, userID interface{}) *ArtifactService_SyncUpstreamBoms_Call {
	return &ArtifactService_SyncUpstreamBoms_Call{Call: _e.mock.On("SyncUpstreamBoms", boms, org, project, asset, assetVersion, artifact, userID)}
}

func (_c *ArtifactService_SyncUpstreamBoms_Call) Run(run func(boms []normalize.BomWithOrigin, org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, artifact models.Artifact, userID string)) *ArtifactService_SyncUpstreamBoms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []normalize.BomWithOrigin
		if args[0] != nil {
			arg0 = args[0].([]normalize.BomWithOrigin)
		}
		var arg1 models.Org
		if args[1] != nil {
			arg1 = args[1].(models.Org)
		}
		var arg2 models.Project
		if args[2] != nil {
			arg2 = args[2].(models.Project)
		}
		var arg3 models.Asset
		if args[3] != nil {
			arg3 = args[3].(models.Asset)
		}
		var arg4 models.AssetVersion
		if args[4] != nil {
			arg4 = args[4].(models.AssetVersion)
		}
		var arg5 models.Artifact
		if args[5] != nil {
			arg5 = args[5].(models.Artifact)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *ArtifactService_SyncUpstreamBoms_Call) Return(dependencyVulns []models.DependencyVuln, err error) *ArtifactService_SyncUpstreamBoms_Call {
	_c.Call.Return(dependencyVulns, err)
	return _c
}

func (_c *ArtifactService_SyncUpstreamBoms_Call) RunAndReturn(run func(boms []normalize.BomWithOrigin, org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, artifact models.Artifact, userID string) ([]models.DependencyVuln, error)) *ArtifactService_SyncUpstreamBoms_Call {
	_c.Call.Return(run)
	return _c
}
