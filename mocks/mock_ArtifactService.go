// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewArtifactService creates a new instance of ArtifactService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactService {
	mock := &ArtifactService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArtifactService is an autogenerated mock type for the ArtifactService type
type ArtifactService struct {
	mock.Mock
}

type ArtifactService_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactService) EXPECT() *ArtifactService_Expecter {
	return &ArtifactService_Expecter{mock: &_m.Mock}
}

// GetArtifactNamesByAssetIDAndAssetVersionName provides a mock function for the type ArtifactService
func (_mock *ArtifactService) GetArtifactNamesByAssetIDAndAssetVersionName(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error) {
	ret := _mock.Called(assetID, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifactNamesByAssetIDAndAssetVersionName")
	}

	var r0 []models.Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.Artifact, error)); ok {
		return returnFunc(assetID, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) []models.Artifact); ok {
		r0 = returnFunc(assetID, assetVersionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifactNamesByAssetIDAndAssetVersionName'
type ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call struct {
	*mock.Call
}

// GetArtifactNamesByAssetIDAndAssetVersionName is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersionName string
func (_e *ArtifactService_Expecter) GetArtifactNamesByAssetIDAndAssetVersionName(assetID interface{}, assetVersionName interface{}) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	return &ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call{Call: _e.mock.On("GetArtifactNamesByAssetIDAndAssetVersionName", assetID, assetVersionName)}
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) Run(run func(assetID uuid.UUID, assetVersionName string)) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) Return(artifacts []models.Artifact, err error) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string) ([]models.Artifact, error)) *ArtifactService_GetArtifactNamesByAssetIDAndAssetVersionName_Call {
	_c.Call.Return(run)
	return _c
}

// SaveArtifact provides a mock function for the type ArtifactService
func (_mock *ArtifactService) SaveArtifact(artifact *models.Artifact) error {
	ret := _mock.Called(artifact)

	if len(ret) == 0 {
		panic("no return value specified for SaveArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.Artifact) error); ok {
		r0 = returnFunc(artifact)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactService_SaveArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveArtifact'
type ArtifactService_SaveArtifact_Call struct {
	*mock.Call
}

// SaveArtifact is a helper method to define mock.On call
//   - artifact *models.Artifact
func (_e *ArtifactService_Expecter) SaveArtifact(artifact interface{}) *ArtifactService_SaveArtifact_Call {
	return &ArtifactService_SaveArtifact_Call{Call: _e.mock.On("SaveArtifact", artifact)}
}

func (_c *ArtifactService_SaveArtifact_Call) Run(run func(artifact *models.Artifact)) *ArtifactService_SaveArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Artifact
		if args[0] != nil {
			arg0 = args[0].(*models.Artifact)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ArtifactService_SaveArtifact_Call) Return(err error) *ArtifactService_SaveArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactService_SaveArtifact_Call) RunAndReturn(run func(artifact *models.Artifact) error) *ArtifactService_SaveArtifact_Call {
	_c.Call.Return(run)
	return _c
}
