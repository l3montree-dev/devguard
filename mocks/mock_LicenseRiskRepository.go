// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	"github.com/package-url/packageurl-go"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewLicenseRiskRepository creates a new instance of LicenseRiskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLicenseRiskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LicenseRiskRepository {
	mock := &LicenseRiskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LicenseRiskRepository is an autogenerated mock type for the LicenseRiskRepository type
type LicenseRiskRepository struct {
	mock.Mock
}

type LicenseRiskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LicenseRiskRepository) EXPECT() *LicenseRiskRepository_Expecter {
	return &LicenseRiskRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Activate(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type LicenseRiskRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx
//   - id
func (_e *LicenseRiskRepository_Expecter) Activate(tx interface{}, id interface{}) *LicenseRiskRepository_Activate_Call {
	return &LicenseRiskRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *LicenseRiskRepository_Activate_Call) Run(run func(tx core.DB, id string)) *LicenseRiskRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *LicenseRiskRepository_Activate_Call) Return(err error) *LicenseRiskRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id string) error) *LicenseRiskRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) All() ([]models.LicenseRisk, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.LicenseRisk, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.LicenseRisk); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LicenseRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type LicenseRiskRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *LicenseRiskRepository_Expecter) All() *LicenseRiskRepository_All_Call {
	return &LicenseRiskRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *LicenseRiskRepository_All_Call) Run(run func()) *LicenseRiskRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LicenseRiskRepository_All_Call) Return(licenseRisks []models.LicenseRisk, err error) *LicenseRiskRepository_All_Call {
	_c.Call.Return(licenseRisks, err)
	return _c
}

func (_c *LicenseRiskRepository_All_Call) RunAndReturn(run func() ([]models.LicenseRisk, error)) *LicenseRiskRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// LicenseRiskRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type LicenseRiskRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *LicenseRiskRepository_Expecter) Begin() *LicenseRiskRepository_Begin_Call {
	return &LicenseRiskRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *LicenseRiskRepository_Begin_Call) Run(run func()) *LicenseRiskRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LicenseRiskRepository_Begin_Call) Return(v core.DB) *LicenseRiskRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *LicenseRiskRepository_Begin_Call) RunAndReturn(run func() core.DB) *LicenseRiskRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Create(tx core.DB, t *models.LicenseRisk) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.LicenseRisk) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type LicenseRiskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx
//   - t
func (_e *LicenseRiskRepository_Expecter) Create(tx interface{}, t interface{}) *LicenseRiskRepository_Create_Call {
	return &LicenseRiskRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *LicenseRiskRepository_Create_Call) Run(run func(tx core.DB, t *models.LicenseRisk)) *LicenseRiskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.LicenseRisk))
	})
	return _c
}

func (_c *LicenseRiskRepository_Create_Call) Return(err error) *LicenseRiskRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.LicenseRisk) error) *LicenseRiskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) CreateBatch(tx core.DB, ts []models.LicenseRisk) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.LicenseRisk) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type LicenseRiskRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *LicenseRiskRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *LicenseRiskRepository_CreateBatch_Call {
	return &LicenseRiskRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *LicenseRiskRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.LicenseRisk)) *LicenseRiskRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.LicenseRisk))
	})
	return _c
}

func (_c *LicenseRiskRepository_CreateBatch_Call) Return(err error) *LicenseRiskRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.LicenseRisk) error) *LicenseRiskRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Delete(tx core.DB, id string) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type LicenseRiskRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *LicenseRiskRepository_Expecter) Delete(tx interface{}, id interface{}) *LicenseRiskRepository_Delete_Call {
	return &LicenseRiskRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *LicenseRiskRepository_Delete_Call) Run(run func(tx core.DB, id string)) *LicenseRiskRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string))
	})
	return _c
}

func (_c *LicenseRiskRepository_Delete_Call) Return(err error) *LicenseRiskRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id string) error) *LicenseRiskRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) DeleteBatch(tx core.DB, ids []models.LicenseRisk) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.LicenseRisk) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type LicenseRiskRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx
//   - ids
func (_e *LicenseRiskRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *LicenseRiskRepository_DeleteBatch_Call {
	return &LicenseRiskRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *LicenseRiskRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.LicenseRisk)) *LicenseRiskRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.LicenseRisk))
	})
	return _c
}

func (_c *LicenseRiskRepository_DeleteBatch_Call) Return(err error) *LicenseRiskRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.LicenseRisk) error) *LicenseRiskRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByComponentPurl provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) DeleteByComponentPurl(assetID uuid.UUID, assetVersionName string, purl packageurl.PackageURL) error {
	ret := _mock.Called(assetID, assetVersionName, purl)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByComponentPurl")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, packageurl.PackageURL) error); ok {
		r0 = returnFunc(assetID, assetVersionName, purl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_DeleteByComponentPurl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByComponentPurl'
type LicenseRiskRepository_DeleteByComponentPurl_Call struct {
	*mock.Call
}

// DeleteByComponentPurl is a helper method to define mock.On call
//   - assetID
//   - assetVersionName
//   - purl
func (_e *LicenseRiskRepository_Expecter) DeleteByComponentPurl(assetID interface{}, assetVersionName interface{}, purl interface{}) *LicenseRiskRepository_DeleteByComponentPurl_Call {
	return &LicenseRiskRepository_DeleteByComponentPurl_Call{Call: _e.mock.On("DeleteByComponentPurl", assetID, assetVersionName, purl)}
}

func (_c *LicenseRiskRepository_DeleteByComponentPurl_Call) Run(run func(assetID uuid.UUID, assetVersionName string, purl packageurl.PackageURL)) *LicenseRiskRepository_DeleteByComponentPurl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string), args[2].(packageurl.PackageURL))
	})
	return _c
}

func (_c *LicenseRiskRepository_DeleteByComponentPurl_Call) Return(err error) *LicenseRiskRepository_DeleteByComponentPurl_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_DeleteByComponentPurl_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string, purl packageurl.PackageURL) error) *LicenseRiskRepository_DeleteByComponentPurl_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLicenseRisksForAssetVersion provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) GetAllLicenseRisksForAssetVersion(assetID uuid.UUID, assetVersionName string) ([]models.LicenseRisk, error) {
	ret := _mock.Called(assetID, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLicenseRisksForAssetVersion")
	}

	var r0 []models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.LicenseRisk, error)); ok {
		return returnFunc(assetID, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) []models.LicenseRisk); ok {
		r0 = returnFunc(assetID, assetVersionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LicenseRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLicenseRisksForAssetVersion'
type LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call struct {
	*mock.Call
}

// GetAllLicenseRisksForAssetVersion is a helper method to define mock.On call
//   - assetID
//   - assetVersionName
func (_e *LicenseRiskRepository_Expecter) GetAllLicenseRisksForAssetVersion(assetID interface{}, assetVersionName interface{}) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call {
	return &LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call{Call: _e.mock.On("GetAllLicenseRisksForAssetVersion", assetID, assetVersionName)}
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call) Run(run func(assetID uuid.UUID, assetVersionName string)) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call) Return(licenseRisks []models.LicenseRisk, err error) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call {
	_c.Call.Return(licenseRisks, err)
	return _c
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string) ([]models.LicenseRisk, error)) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLicenseRisksForAssetVersionPaged provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) GetAllLicenseRisksForAssetVersionPaged(tx core.DB, assetID uuid.UUID, assetVersionName string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.LicenseRisk], error) {
	ret := _mock.Called(tx, assetID, assetVersionName, pageInfo, search, filter, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLicenseRisksForAssetVersionPaged")
	}

	var r0 core.Paged[models.LicenseRisk]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) (core.Paged[models.LicenseRisk], error)); ok {
		return returnFunc(tx, assetID, assetVersionName, pageInfo, search, filter, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) core.Paged[models.LicenseRisk]); ok {
		r0 = returnFunc(tx, assetID, assetVersionName, pageInfo, search, filter, sort)
	} else {
		r0 = ret.Get(0).(core.Paged[models.LicenseRisk])
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, uuid.UUID, string, core.PageInfo, string, []core.FilterQuery, []core.SortQuery) error); ok {
		r1 = returnFunc(tx, assetID, assetVersionName, pageInfo, search, filter, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLicenseRisksForAssetVersionPaged'
type LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call struct {
	*mock.Call
}

// GetAllLicenseRisksForAssetVersionPaged is a helper method to define mock.On call
//   - tx
//   - assetID
//   - assetVersionName
//   - pageInfo
//   - search
//   - filter
//   - sort
func (_e *LicenseRiskRepository_Expecter) GetAllLicenseRisksForAssetVersionPaged(tx interface{}, assetID interface{}, assetVersionName interface{}, pageInfo interface{}, search interface{}, filter interface{}, sort interface{}) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call {
	return &LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call{Call: _e.mock.On("GetAllLicenseRisksForAssetVersionPaged", tx, assetID, assetVersionName, pageInfo, search, filter, sort)}
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call) Run(run func(tx core.DB, assetID uuid.UUID, assetVersionName string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery)) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID), args[2].(string), args[3].(core.PageInfo), args[4].(string), args[5].([]core.FilterQuery), args[6].([]core.SortQuery))
	})
	return _c
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call) Return(paged core.Paged[models.LicenseRisk], err error) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call {
	_c.Call.Return(paged, err)
	return _c
}

func (_c *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call) RunAndReturn(run func(tx core.DB, assetID uuid.UUID, assetVersionName string, pageInfo core.PageInfo, search string, filter []core.FilterQuery, sort []core.SortQuery) (core.Paged[models.LicenseRisk], error)) *LicenseRiskRepository_GetAllLicenseRisksForAssetVersionPaged_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOverwrittenLicensesForAssetVersion provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) GetAllOverwrittenLicensesForAssetVersion(assetID uuid.UUID, assetVersionName string) ([]models.LicenseRisk, error) {
	ret := _mock.Called(assetID, assetVersionName)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOverwrittenLicensesForAssetVersion")
	}

	var r0 []models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.LicenseRisk, error)); ok {
		return returnFunc(assetID, assetVersionName)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) []models.LicenseRisk); ok {
		r0 = returnFunc(assetID, assetVersionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LicenseRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = returnFunc(assetID, assetVersionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOverwrittenLicensesForAssetVersion'
type LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call struct {
	*mock.Call
}

// GetAllOverwrittenLicensesForAssetVersion is a helper method to define mock.On call
//   - assetID
//   - assetVersionName
func (_e *LicenseRiskRepository_Expecter) GetAllOverwrittenLicensesForAssetVersion(assetID interface{}, assetVersionName interface{}) *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call {
	return &LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call{Call: _e.mock.On("GetAllOverwrittenLicensesForAssetVersion", assetID, assetVersionName)}
}

func (_c *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call) Run(run func(assetID uuid.UUID, assetVersionName string)) *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call) Return(licenseRisks []models.LicenseRisk, err error) *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call {
	_c.Call.Return(licenseRisks, err)
	return _c
}

func (_c *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string) ([]models.LicenseRisk, error)) *LicenseRiskRepository_GetAllOverwrittenLicensesForAssetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// LicenseRiskRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type LicenseRiskRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *LicenseRiskRepository_Expecter) GetDB(tx interface{}) *LicenseRiskRepository_GetDB_Call {
	return &LicenseRiskRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *LicenseRiskRepository_GetDB_Call) Run(run func(tx core.DB)) *LicenseRiskRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *LicenseRiskRepository_GetDB_Call) Return(v core.DB) *LicenseRiskRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *LicenseRiskRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *LicenseRiskRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) List(ids []string) ([]models.LicenseRisk, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]models.LicenseRisk, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []models.LicenseRisk); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LicenseRisk)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type LicenseRiskRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids
func (_e *LicenseRiskRepository_Expecter) List(ids interface{}) *LicenseRiskRepository_List_Call {
	return &LicenseRiskRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *LicenseRiskRepository_List_Call) Run(run func(ids []string)) *LicenseRiskRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *LicenseRiskRepository_List_Call) Return(licenseRisks []models.LicenseRisk, err error) *LicenseRiskRepository_List_Call {
	_c.Call.Return(licenseRisks, err)
	return _c
}

func (_c *LicenseRiskRepository_List_Call) RunAndReturn(run func(ids []string) ([]models.LicenseRisk, error)) *LicenseRiskRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// MaybeGetLicenseOverwriteForComponent provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) MaybeGetLicenseOverwriteForComponent(assetID uuid.UUID, assetVersionName string, pURL packageurl.PackageURL) (models.LicenseRisk, error) {
	ret := _mock.Called(assetID, assetVersionName, pURL)

	if len(ret) == 0 {
		panic("no return value specified for MaybeGetLicenseOverwriteForComponent")
	}

	var r0 models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, packageurl.PackageURL) (models.LicenseRisk, error)); ok {
		return returnFunc(assetID, assetVersionName, pURL)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, packageurl.PackageURL) models.LicenseRisk); ok {
		r0 = returnFunc(assetID, assetVersionName, pURL)
	} else {
		r0 = ret.Get(0).(models.LicenseRisk)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, string, packageurl.PackageURL) error); ok {
		r1 = returnFunc(assetID, assetVersionName, pURL)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeGetLicenseOverwriteForComponent'
type LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call struct {
	*mock.Call
}

// MaybeGetLicenseOverwriteForComponent is a helper method to define mock.On call
//   - assetID
//   - assetVersionName
//   - pURL
func (_e *LicenseRiskRepository_Expecter) MaybeGetLicenseOverwriteForComponent(assetID interface{}, assetVersionName interface{}, pURL interface{}) *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call {
	return &LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call{Call: _e.mock.On("MaybeGetLicenseOverwriteForComponent", assetID, assetVersionName, pURL)}
}

func (_c *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call) Run(run func(assetID uuid.UUID, assetVersionName string, pURL packageurl.PackageURL)) *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string), args[2].(packageurl.PackageURL))
	})
	return _c
}

func (_c *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call) Return(licenseRisk models.LicenseRisk, err error) *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call {
	_c.Call.Return(licenseRisk, err)
	return _c
}

func (_c *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call) RunAndReturn(run func(assetID uuid.UUID, assetVersionName string, pURL packageurl.PackageURL) (models.LicenseRisk, error)) *LicenseRiskRepository_MaybeGetLicenseOverwriteForComponent_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Read(id string) (models.LicenseRisk, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.LicenseRisk
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.LicenseRisk, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.LicenseRisk); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.LicenseRisk)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LicenseRiskRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type LicenseRiskRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *LicenseRiskRepository_Expecter) Read(id interface{}) *LicenseRiskRepository_Read_Call {
	return &LicenseRiskRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *LicenseRiskRepository_Read_Call) Run(run func(id string)) *LicenseRiskRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LicenseRiskRepository_Read_Call) Return(licenseRisk models.LicenseRisk, err error) *LicenseRiskRepository_Read_Call {
	_c.Call.Return(licenseRisk, err)
	return _c
}

func (_c *LicenseRiskRepository_Read_Call) RunAndReturn(run func(id string) (models.LicenseRisk, error)) *LicenseRiskRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Save(tx core.DB, t *models.LicenseRisk) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.LicenseRisk) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type LicenseRiskRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - t
func (_e *LicenseRiskRepository_Expecter) Save(tx interface{}, t interface{}) *LicenseRiskRepository_Save_Call {
	return &LicenseRiskRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *LicenseRiskRepository_Save_Call) Run(run func(tx core.DB, t *models.LicenseRisk)) *LicenseRiskRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.LicenseRisk))
	})
	return _c
}

func (_c *LicenseRiskRepository_Save_Call) Return(err error) *LicenseRiskRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.LicenseRisk) error) *LicenseRiskRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) SaveBatch(tx core.DB, ts []models.LicenseRisk) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.LicenseRisk) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type LicenseRiskRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *LicenseRiskRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *LicenseRiskRepository_SaveBatch_Call {
	return &LicenseRiskRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *LicenseRiskRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.LicenseRisk)) *LicenseRiskRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.LicenseRisk))
	})
	return _c
}

func (_c *LicenseRiskRepository_SaveBatch_Call) Return(err error) *LicenseRiskRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.LicenseRisk) error) *LicenseRiskRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type LicenseRiskRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *LicenseRiskRepository_Expecter) Transaction(fn interface{}) *LicenseRiskRepository_Transaction_Call {
	return &LicenseRiskRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *LicenseRiskRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *LicenseRiskRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *LicenseRiskRepository_Transaction_Call) Return(err error) *LicenseRiskRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *LicenseRiskRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type LicenseRiskRepository
func (_mock *LicenseRiskRepository) Upsert(t *[]*models.LicenseRisk, conflictingColumns []clause.Column, updateOnly []string) error {
	ret := _mock.Called(t, conflictingColumns, updateOnly)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.LicenseRisk, []clause.Column, []string) error); ok {
		r0 = returnFunc(t, conflictingColumns, updateOnly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LicenseRiskRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type LicenseRiskRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t
//   - conflictingColumns
//   - updateOnly
func (_e *LicenseRiskRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}, updateOnly interface{}) *LicenseRiskRepository_Upsert_Call {
	return &LicenseRiskRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns, updateOnly)}
}

func (_c *LicenseRiskRepository_Upsert_Call) Run(run func(t *[]*models.LicenseRisk, conflictingColumns []clause.Column, updateOnly []string)) *LicenseRiskRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]*models.LicenseRisk), args[1].([]clause.Column), args[2].([]string))
	})
	return _c
}

func (_c *LicenseRiskRepository_Upsert_Call) Return(err error) *LicenseRiskRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LicenseRiskRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.LicenseRisk, conflictingColumns []clause.Column, updateOnly []string) error) *LicenseRiskRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
