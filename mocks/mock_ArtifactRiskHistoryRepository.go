// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewArtifactRiskHistoryRepository creates a new instance of ArtifactRiskHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactRiskHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactRiskHistoryRepository {
	mock := &ArtifactRiskHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ArtifactRiskHistoryRepository is an autogenerated mock type for the ArtifactRiskHistoryRepository type
type ArtifactRiskHistoryRepository struct {
	mock.Mock
}

type ArtifactRiskHistoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactRiskHistoryRepository) EXPECT() *ArtifactRiskHistoryRepository_Expecter {
	return &ArtifactRiskHistoryRepository_Expecter{mock: &_m.Mock}
}

// GetRiskHistory provides a mock function for the type ArtifactRiskHistoryRepository
func (_mock *ArtifactRiskHistoryRepository) GetRiskHistory(artifactName *string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(artifactName, assetVersionName, assetID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetRiskHistory")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(artifactName, assetVersionName, assetID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(*string, string, uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(artifactName, assetVersionName, assetID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*string, string, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(artifactName, assetVersionName, assetID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRiskHistoryRepository_GetRiskHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiskHistory'
type ArtifactRiskHistoryRepository_GetRiskHistory_Call struct {
	*mock.Call
}

// GetRiskHistory is a helper method to define mock.On call
//   - artifactName
//   - assetVersionName
//   - assetID
//   - start
//   - end
func (_e *ArtifactRiskHistoryRepository_Expecter) GetRiskHistory(artifactName interface{}, assetVersionName interface{}, assetID interface{}, start interface{}, end interface{}) *ArtifactRiskHistoryRepository_GetRiskHistory_Call {
	return &ArtifactRiskHistoryRepository_GetRiskHistory_Call{Call: _e.mock.On("GetRiskHistory", artifactName, assetVersionName, assetID, start, end)}
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistory_Call) Run(run func(artifactName *string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time)) *ArtifactRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistory_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *ArtifactRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistory_Call) RunAndReturn(run func(artifactName *string, assetVersionName string, assetID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *ArtifactRiskHistoryRepository_GetRiskHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetRiskHistoryByRelease provides a mock function for the type ArtifactRiskHistoryRepository
func (_mock *ArtifactRiskHistoryRepository) GetRiskHistoryByRelease(releaseID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error) {
	ret := _mock.Called(releaseID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetRiskHistoryByRelease")
	}

	var r0 []models.ArtifactRiskHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) ([]models.ArtifactRiskHistory, error)); ok {
		return returnFunc(releaseID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, time.Time, time.Time) []models.ArtifactRiskHistory); ok {
		r0 = returnFunc(releaseID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ArtifactRiskHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(releaseID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRiskHistoryByRelease'
type ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call struct {
	*mock.Call
}

// GetRiskHistoryByRelease is a helper method to define mock.On call
//   - releaseID
//   - start
//   - end
func (_e *ArtifactRiskHistoryRepository_Expecter) GetRiskHistoryByRelease(releaseID interface{}, start interface{}, end interface{}) *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call {
	return &ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call{Call: _e.mock.On("GetRiskHistoryByRelease", releaseID, start, end)}
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call) Run(run func(releaseID uuid.UUID, start time.Time, end time.Time)) *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call) Return(artifactRiskHistorys []models.ArtifactRiskHistory, err error) *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call {
	_c.Call.Return(artifactRiskHistorys, err)
	return _c
}

func (_c *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call) RunAndReturn(run func(releaseID uuid.UUID, start time.Time, end time.Time) ([]models.ArtifactRiskHistory, error)) *ArtifactRiskHistoryRepository_GetRiskHistoryByRelease_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRiskAggregation provides a mock function for the type ArtifactRiskHistoryRepository
func (_mock *ArtifactRiskHistoryRepository) UpdateRiskAggregation(assetRisk *models.ArtifactRiskHistory) error {
	ret := _mock.Called(assetRisk)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRiskAggregation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.ArtifactRiskHistory) error); ok {
		r0 = returnFunc(assetRisk)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRiskAggregation'
type ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call struct {
	*mock.Call
}

// UpdateRiskAggregation is a helper method to define mock.On call
//   - assetRisk
func (_e *ArtifactRiskHistoryRepository_Expecter) UpdateRiskAggregation(assetRisk interface{}) *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call {
	return &ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call{Call: _e.mock.On("UpdateRiskAggregation", assetRisk)}
}

func (_c *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call) Run(run func(assetRisk *models.ArtifactRiskHistory)) *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.ArtifactRiskHistory))
	})
	return _c
}

func (_c *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call) Return(err error) *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call) RunAndReturn(run func(assetRisk *models.ArtifactRiskHistory) error) *ArtifactRiskHistoryRepository_UpdateRiskAggregation_Call {
	_c.Call.Return(run)
	return _c
}
