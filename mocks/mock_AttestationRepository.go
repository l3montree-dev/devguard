// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	uuid "github.com/google/uuid"
)

// AttestationRepository is an autogenerated mock type for the AttestationRepository type
type AttestationRepository struct {
	mock.Mock
}

type AttestationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AttestationRepository) EXPECT() *AttestationRepository_Expecter {
	return &AttestationRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: tx, id
func (_m *AttestationRepository) Activate(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type AttestationRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *AttestationRepository_Expecter) Activate(tx interface{}, id interface{}) *AttestationRepository_Activate_Call {
	return &AttestationRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *AttestationRepository_Activate_Call) Run(run func(tx *gorm.DB, id string)) *AttestationRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *AttestationRepository_Activate_Call) Return(_a0 error) *AttestationRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Activate_Call) RunAndReturn(run func(*gorm.DB, string) error) *AttestationRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with no fields
func (_m *AttestationRepository) All() ([]models.Attestation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Attestation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Attestation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Attestation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type AttestationRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *AttestationRepository_Expecter) All() *AttestationRepository_All_Call {
	return &AttestationRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *AttestationRepository_All_Call) Run(run func()) *AttestationRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AttestationRepository_All_Call) Return(_a0 []models.Attestation, _a1 error) *AttestationRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttestationRepository_All_Call) RunAndReturn(run func() ([]models.Attestation, error)) *AttestationRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with no fields
func (_m *AttestationRepository) Begin() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// AttestationRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type AttestationRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *AttestationRepository_Expecter) Begin() *AttestationRepository_Begin_Call {
	return &AttestationRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *AttestationRepository_Begin_Call) Run(run func()) *AttestationRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AttestationRepository_Begin_Call) Return(_a0 *gorm.DB) *AttestationRepository_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Begin_Call) RunAndReturn(run func() *gorm.DB) *AttestationRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, t
func (_m *AttestationRepository) Create(tx *gorm.DB, t *models.Attestation) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Attestation) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AttestationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Attestation
func (_e *AttestationRepository_Expecter) Create(tx interface{}, t interface{}) *AttestationRepository_Create_Call {
	return &AttestationRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *AttestationRepository_Create_Call) Run(run func(tx *gorm.DB, t *models.Attestation)) *AttestationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Attestation))
	})
	return _c
}

func (_c *AttestationRepository_Create_Call) Return(_a0 error) *AttestationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Create_Call) RunAndReturn(run func(*gorm.DB, *models.Attestation) error) *AttestationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: tx, ts
func (_m *AttestationRepository) CreateBatch(tx *gorm.DB, ts []models.Attestation) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Attestation) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type AttestationRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Attestation
func (_e *AttestationRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *AttestationRepository_CreateBatch_Call {
	return &AttestationRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *AttestationRepository_CreateBatch_Call) Run(run func(tx *gorm.DB, ts []models.Attestation)) *AttestationRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Attestation))
	})
	return _c
}

func (_c *AttestationRepository_CreateBatch_Call) Return(_a0 error) *AttestationRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_CreateBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Attestation) error) *AttestationRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: tx, id
func (_m *AttestationRepository) Delete(tx *gorm.DB, id string) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AttestationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx *gorm.DB
//   - id string
func (_e *AttestationRepository_Expecter) Delete(tx interface{}, id interface{}) *AttestationRepository_Delete_Call {
	return &AttestationRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *AttestationRepository_Delete_Call) Run(run func(tx *gorm.DB, id string)) *AttestationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(string))
	})
	return _c
}

func (_c *AttestationRepository_Delete_Call) Return(_a0 error) *AttestationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Delete_Call) RunAndReturn(run func(*gorm.DB, string) error) *AttestationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function with given fields: tx, ids
func (_m *AttestationRepository) DeleteBatch(tx *gorm.DB, ids []models.Attestation) error {
	ret := _m.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Attestation) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type AttestationRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ids []models.Attestation
func (_e *AttestationRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *AttestationRepository_DeleteBatch_Call {
	return &AttestationRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *AttestationRepository_DeleteBatch_Call) Run(run func(tx *gorm.DB, ids []models.Attestation)) *AttestationRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Attestation))
	})
	return _c
}

func (_c *AttestationRepository_DeleteBatch_Call) Return(_a0 error) *AttestationRepository_DeleteBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_DeleteBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Attestation) error) *AttestationRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetID provides a mock function with given fields: assetID
func (_m *AttestationRepository) GetByAssetID(assetID uuid.UUID) ([]models.Attestation, error) {
	ret := _m.Called(assetID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetID")
	}

	var r0 []models.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Attestation, error)); ok {
		return rf(assetID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Attestation); ok {
		r0 = rf(assetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Attestation)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(assetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationRepository_GetByAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetID'
type AttestationRepository_GetByAssetID_Call struct {
	*mock.Call
}

// GetByAssetID is a helper method to define mock.On call
//   - assetID uuid.UUID
func (_e *AttestationRepository_Expecter) GetByAssetID(assetID interface{}) *AttestationRepository_GetByAssetID_Call {
	return &AttestationRepository_GetByAssetID_Call{Call: _e.mock.On("GetByAssetID", assetID)}
}

func (_c *AttestationRepository_GetByAssetID_Call) Run(run func(assetID uuid.UUID)) *AttestationRepository_GetByAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AttestationRepository_GetByAssetID_Call) Return(_a0 []models.Attestation, _a1 error) *AttestationRepository_GetByAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttestationRepository_GetByAssetID_Call) RunAndReturn(run func(uuid.UUID) ([]models.Attestation, error)) *AttestationRepository_GetByAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetVersionAndAssetID provides a mock function with given fields: assetID, assetVersion
func (_m *AttestationRepository) GetByAssetVersionAndAssetID(assetID uuid.UUID, assetVersion string) ([]models.Attestation, error) {
	ret := _m.Called(assetID, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetVersionAndAssetID")
	}

	var r0 []models.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) ([]models.Attestation, error)); ok {
		return rf(assetID, assetVersion)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) []models.Attestation); ok {
		r0 = rf(assetID, assetVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Attestation)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(assetID, assetVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationRepository_GetByAssetVersionAndAssetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetVersionAndAssetID'
type AttestationRepository_GetByAssetVersionAndAssetID_Call struct {
	*mock.Call
}

// GetByAssetVersionAndAssetID is a helper method to define mock.On call
//   - assetID uuid.UUID
//   - assetVersion string
func (_e *AttestationRepository_Expecter) GetByAssetVersionAndAssetID(assetID interface{}, assetVersion interface{}) *AttestationRepository_GetByAssetVersionAndAssetID_Call {
	return &AttestationRepository_GetByAssetVersionAndAssetID_Call{Call: _e.mock.On("GetByAssetVersionAndAssetID", assetID, assetVersion)}
}

func (_c *AttestationRepository_GetByAssetVersionAndAssetID_Call) Run(run func(assetID uuid.UUID, assetVersion string)) *AttestationRepository_GetByAssetVersionAndAssetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *AttestationRepository_GetByAssetVersionAndAssetID_Call) Return(_a0 []models.Attestation, _a1 error) *AttestationRepository_GetByAssetVersionAndAssetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttestationRepository_GetByAssetVersionAndAssetID_Call) RunAndReturn(run func(uuid.UUID, string) ([]models.Attestation, error)) *AttestationRepository_GetByAssetVersionAndAssetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields: tx
func (_m *AttestationRepository) GetDB(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// AttestationRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type AttestationRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *AttestationRepository_Expecter) GetDB(tx interface{}) *AttestationRepository_GetDB_Call {
	return &AttestationRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *AttestationRepository_GetDB_Call) Run(run func(tx *gorm.DB)) *AttestationRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *AttestationRepository_GetDB_Call) Return(_a0 *gorm.DB) *AttestationRepository_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_GetDB_Call) RunAndReturn(run func(*gorm.DB) *gorm.DB) *AttestationRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ids
func (_m *AttestationRepository) List(ids []string) ([]models.Attestation, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.Attestation, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.Attestation); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Attestation)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AttestationRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids []string
func (_e *AttestationRepository_Expecter) List(ids interface{}) *AttestationRepository_List_Call {
	return &AttestationRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *AttestationRepository_List_Call) Run(run func(ids []string)) *AttestationRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *AttestationRepository_List_Call) Return(_a0 []models.Attestation, _a1 error) *AttestationRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttestationRepository_List_Call) RunAndReturn(run func([]string) ([]models.Attestation, error)) *AttestationRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: id
func (_m *AttestationRepository) Read(id string) (models.Attestation, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Attestation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Attestation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Attestation); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Attestation)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type AttestationRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id string
func (_e *AttestationRepository_Expecter) Read(id interface{}) *AttestationRepository_Read_Call {
	return &AttestationRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *AttestationRepository_Read_Call) Run(run func(id string)) *AttestationRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AttestationRepository_Read_Call) Return(_a0 models.Attestation, _a1 error) *AttestationRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AttestationRepository_Read_Call) RunAndReturn(run func(string) (models.Attestation, error)) *AttestationRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: tx, t
func (_m *AttestationRepository) Save(tx *gorm.DB, t *models.Attestation) error {
	ret := _m.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *models.Attestation) error); ok {
		r0 = rf(tx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type AttestationRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx *gorm.DB
//   - t *models.Attestation
func (_e *AttestationRepository_Expecter) Save(tx interface{}, t interface{}) *AttestationRepository_Save_Call {
	return &AttestationRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *AttestationRepository_Save_Call) Run(run func(tx *gorm.DB, t *models.Attestation)) *AttestationRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(*models.Attestation))
	})
	return _c
}

func (_c *AttestationRepository_Save_Call) Return(_a0 error) *AttestationRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Save_Call) RunAndReturn(run func(*gorm.DB, *models.Attestation) error) *AttestationRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function with given fields: tx, ts
func (_m *AttestationRepository) SaveBatch(tx *gorm.DB, ts []models.Attestation) error {
	ret := _m.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []models.Attestation) error); ok {
		r0 = rf(tx, ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type AttestationRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx *gorm.DB
//   - ts []models.Attestation
func (_e *AttestationRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *AttestationRepository_SaveBatch_Call {
	return &AttestationRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *AttestationRepository_SaveBatch_Call) Run(run func(tx *gorm.DB, ts []models.Attestation)) *AttestationRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].([]models.Attestation))
	})
	return _c
}

func (_c *AttestationRepository_SaveBatch_Call) Return(_a0 error) *AttestationRepository_SaveBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_SaveBatch_Call) RunAndReturn(run func(*gorm.DB, []models.Attestation) error) *AttestationRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: _a0
func (_m *AttestationRepository) Transaction(_a0 func(*gorm.DB) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AttestationRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type AttestationRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - _a0 func(*gorm.DB) error
func (_e *AttestationRepository_Expecter) Transaction(_a0 interface{}) *AttestationRepository_Transaction_Call {
	return &AttestationRepository_Transaction_Call{Call: _e.mock.On("Transaction", _a0)}
}

func (_c *AttestationRepository_Transaction_Call) Run(run func(_a0 func(*gorm.DB) error)) *AttestationRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) error))
	})
	return _c
}

func (_c *AttestationRepository_Transaction_Call) Return(_a0 error) *AttestationRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AttestationRepository_Transaction_Call) RunAndReturn(run func(func(*gorm.DB) error) error) *AttestationRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAttestationRepository creates a new instance of AttestationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttestationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttestationRepository {
	mock := &AttestationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
