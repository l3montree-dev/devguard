// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm/clause"
)

// NewSupplyChainRepository creates a new instance of SupplyChainRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupplyChainRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SupplyChainRepository {
	mock := &SupplyChainRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SupplyChainRepository is an autogenerated mock type for the SupplyChainRepository type
type SupplyChainRepository struct {
	mock.Mock
}

type SupplyChainRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SupplyChainRepository) EXPECT() *SupplyChainRepository_Expecter {
	return &SupplyChainRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Activate(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type SupplyChainRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - tx
//   - id
func (_e *SupplyChainRepository_Expecter) Activate(tx interface{}, id interface{}) *SupplyChainRepository_Activate_Call {
	return &SupplyChainRepository_Activate_Call{Call: _e.mock.On("Activate", tx, id)}
}

func (_c *SupplyChainRepository_Activate_Call) Run(run func(tx core.DB, id uuid.UUID)) *SupplyChainRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SupplyChainRepository_Activate_Call) Return(err error) *SupplyChainRepository_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Activate_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *SupplyChainRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) All() ([]models.SupplyChain, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.SupplyChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.SupplyChain, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.SupplyChain); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SupplyChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type SupplyChainRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *SupplyChainRepository_Expecter) All() *SupplyChainRepository_All_Call {
	return &SupplyChainRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *SupplyChainRepository_All_Call) Run(run func()) *SupplyChainRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SupplyChainRepository_All_Call) Return(supplyChains []models.SupplyChain, err error) *SupplyChainRepository_All_Call {
	_c.Call.Return(supplyChains, err)
	return _c
}

func (_c *SupplyChainRepository_All_Call) RunAndReturn(run func() ([]models.SupplyChain, error)) *SupplyChainRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Begin() core.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func() core.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// SupplyChainRepository_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type SupplyChainRepository_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *SupplyChainRepository_Expecter) Begin() *SupplyChainRepository_Begin_Call {
	return &SupplyChainRepository_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *SupplyChainRepository_Begin_Call) Run(run func()) *SupplyChainRepository_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SupplyChainRepository_Begin_Call) Return(v core.DB) *SupplyChainRepository_Begin_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *SupplyChainRepository_Begin_Call) RunAndReturn(run func() core.DB) *SupplyChainRepository_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Create(tx core.DB, t *models.SupplyChain) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.SupplyChain) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SupplyChainRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx
//   - t
func (_e *SupplyChainRepository_Expecter) Create(tx interface{}, t interface{}) *SupplyChainRepository_Create_Call {
	return &SupplyChainRepository_Create_Call{Call: _e.mock.On("Create", tx, t)}
}

func (_c *SupplyChainRepository_Create_Call) Run(run func(tx core.DB, t *models.SupplyChain)) *SupplyChainRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.SupplyChain))
	})
	return _c
}

func (_c *SupplyChainRepository_Create_Call) Return(err error) *SupplyChainRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Create_Call) RunAndReturn(run func(tx core.DB, t *models.SupplyChain) error) *SupplyChainRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) CreateBatch(tx core.DB, ts []models.SupplyChain) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.SupplyChain) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type SupplyChainRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *SupplyChainRepository_Expecter) CreateBatch(tx interface{}, ts interface{}) *SupplyChainRepository_CreateBatch_Call {
	return &SupplyChainRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", tx, ts)}
}

func (_c *SupplyChainRepository_CreateBatch_Call) Run(run func(tx core.DB, ts []models.SupplyChain)) *SupplyChainRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.SupplyChain))
	})
	return _c
}

func (_c *SupplyChainRepository_CreateBatch_Call) Return(err error) *SupplyChainRepository_CreateBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_CreateBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.SupplyChain) error) *SupplyChainRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Delete(tx core.DB, id uuid.UUID) error {
	ret := _mock.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, uuid.UUID) error); ok {
		r0 = returnFunc(tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SupplyChainRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tx
//   - id
func (_e *SupplyChainRepository_Expecter) Delete(tx interface{}, id interface{}) *SupplyChainRepository_Delete_Call {
	return &SupplyChainRepository_Delete_Call{Call: _e.mock.On("Delete", tx, id)}
}

func (_c *SupplyChainRepository_Delete_Call) Run(run func(tx core.DB, id uuid.UUID)) *SupplyChainRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SupplyChainRepository_Delete_Call) Return(err error) *SupplyChainRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Delete_Call) RunAndReturn(run func(tx core.DB, id uuid.UUID) error) *SupplyChainRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBatch provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) DeleteBatch(tx core.DB, ids []models.SupplyChain) error {
	ret := _mock.Called(tx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.SupplyChain) error); ok {
		r0 = returnFunc(tx, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_DeleteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBatch'
type SupplyChainRepository_DeleteBatch_Call struct {
	*mock.Call
}

// DeleteBatch is a helper method to define mock.On call
//   - tx
//   - ids
func (_e *SupplyChainRepository_Expecter) DeleteBatch(tx interface{}, ids interface{}) *SupplyChainRepository_DeleteBatch_Call {
	return &SupplyChainRepository_DeleteBatch_Call{Call: _e.mock.On("DeleteBatch", tx, ids)}
}

func (_c *SupplyChainRepository_DeleteBatch_Call) Run(run func(tx core.DB, ids []models.SupplyChain)) *SupplyChainRepository_DeleteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.SupplyChain))
	})
	return _c
}

func (_c *SupplyChainRepository_DeleteBatch_Call) Return(err error) *SupplyChainRepository_DeleteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_DeleteBatch_Call) RunAndReturn(run func(tx core.DB, ids []models.SupplyChain) error) *SupplyChainRepository_DeleteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// FindByDigest provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) FindByDigest(digest string) ([]models.SupplyChain, error) {
	ret := _mock.Called(digest)

	if len(ret) == 0 {
		panic("no return value specified for FindByDigest")
	}

	var r0 []models.SupplyChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]models.SupplyChain, error)); ok {
		return returnFunc(digest)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []models.SupplyChain); ok {
		r0 = returnFunc(digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SupplyChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(digest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_FindByDigest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDigest'
type SupplyChainRepository_FindByDigest_Call struct {
	*mock.Call
}

// FindByDigest is a helper method to define mock.On call
//   - digest
func (_e *SupplyChainRepository_Expecter) FindByDigest(digest interface{}) *SupplyChainRepository_FindByDigest_Call {
	return &SupplyChainRepository_FindByDigest_Call{Call: _e.mock.On("FindByDigest", digest)}
}

func (_c *SupplyChainRepository_FindByDigest_Call) Run(run func(digest string)) *SupplyChainRepository_FindByDigest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SupplyChainRepository_FindByDigest_Call) Return(supplyChains []models.SupplyChain, err error) *SupplyChainRepository_FindByDigest_Call {
	_c.Call.Return(supplyChains, err)
	return _c
}

func (_c *SupplyChainRepository_FindByDigest_Call) RunAndReturn(run func(digest string) ([]models.SupplyChain, error)) *SupplyChainRepository_FindByDigest_Call {
	_c.Call.Return(run)
	return _c
}

// FindBySupplyChainID provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) FindBySupplyChainID(supplyChainID string) ([]models.SupplyChain, error) {
	ret := _mock.Called(supplyChainID)

	if len(ret) == 0 {
		panic("no return value specified for FindBySupplyChainID")
	}

	var r0 []models.SupplyChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]models.SupplyChain, error)); ok {
		return returnFunc(supplyChainID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []models.SupplyChain); ok {
		r0 = returnFunc(supplyChainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SupplyChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(supplyChainID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_FindBySupplyChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySupplyChainID'
type SupplyChainRepository_FindBySupplyChainID_Call struct {
	*mock.Call
}

// FindBySupplyChainID is a helper method to define mock.On call
//   - supplyChainID
func (_e *SupplyChainRepository_Expecter) FindBySupplyChainID(supplyChainID interface{}) *SupplyChainRepository_FindBySupplyChainID_Call {
	return &SupplyChainRepository_FindBySupplyChainID_Call{Call: _e.mock.On("FindBySupplyChainID", supplyChainID)}
}

func (_c *SupplyChainRepository_FindBySupplyChainID_Call) Run(run func(supplyChainID string)) *SupplyChainRepository_FindBySupplyChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SupplyChainRepository_FindBySupplyChainID_Call) Return(supplyChains []models.SupplyChain, err error) *SupplyChainRepository_FindBySupplyChainID_Call {
	_c.Call.Return(supplyChains, err)
	return _c
}

func (_c *SupplyChainRepository_FindBySupplyChainID_Call) RunAndReturn(run func(supplyChainID string) ([]models.SupplyChain, error)) *SupplyChainRepository_FindBySupplyChainID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) GetDB(tx core.DB) core.DB {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 core.DB
	if returnFunc, ok := ret.Get(0).(func(core.DB) core.DB); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.DB)
		}
	}
	return r0
}

// SupplyChainRepository_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type SupplyChainRepository_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - tx
func (_e *SupplyChainRepository_Expecter) GetDB(tx interface{}) *SupplyChainRepository_GetDB_Call {
	return &SupplyChainRepository_GetDB_Call{Call: _e.mock.On("GetDB", tx)}
}

func (_c *SupplyChainRepository_GetDB_Call) Run(run func(tx core.DB)) *SupplyChainRepository_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB))
	})
	return _c
}

func (_c *SupplyChainRepository_GetDB_Call) Return(v core.DB) *SupplyChainRepository_GetDB_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *SupplyChainRepository_GetDB_Call) RunAndReturn(run func(tx core.DB) core.DB) *SupplyChainRepository_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) List(ids []uuid.UUID) ([]models.SupplyChain, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.SupplyChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) ([]models.SupplyChain, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]uuid.UUID) []models.SupplyChain); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SupplyChain)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type SupplyChainRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ids
func (_e *SupplyChainRepository_Expecter) List(ids interface{}) *SupplyChainRepository_List_Call {
	return &SupplyChainRepository_List_Call{Call: _e.mock.On("List", ids)}
}

func (_c *SupplyChainRepository_List_Call) Run(run func(ids []uuid.UUID)) *SupplyChainRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *SupplyChainRepository_List_Call) Return(supplyChains []models.SupplyChain, err error) *SupplyChainRepository_List_Call {
	_c.Call.Return(supplyChains, err)
	return _c
}

func (_c *SupplyChainRepository_List_Call) RunAndReturn(run func(ids []uuid.UUID) ([]models.SupplyChain, error)) *SupplyChainRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// PercentageOfVerifiedSupplyChains provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) PercentageOfVerifiedSupplyChains(assetVersionName string, assetID uuid.UUID) (float64, error) {
	ret := _mock.Called(assetVersionName, assetID)

	if len(ret) == 0 {
		panic("no return value specified for PercentageOfVerifiedSupplyChains")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (float64, error)); ok {
		return returnFunc(assetVersionName, assetID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) float64); ok {
		r0 = returnFunc(assetVersionName, assetID)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(assetVersionName, assetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PercentageOfVerifiedSupplyChains'
type SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call struct {
	*mock.Call
}

// PercentageOfVerifiedSupplyChains is a helper method to define mock.On call
//   - assetVersionName
//   - assetID
func (_e *SupplyChainRepository_Expecter) PercentageOfVerifiedSupplyChains(assetVersionName interface{}, assetID interface{}) *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	return &SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call{Call: _e.mock.On("PercentageOfVerifiedSupplyChains", assetVersionName, assetID)}
}

func (_c *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) Run(run func(assetVersionName string, assetID uuid.UUID)) *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) Return(f float64, err error) *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call) RunAndReturn(run func(assetVersionName string, assetID uuid.UUID) (float64, error)) *SupplyChainRepository_PercentageOfVerifiedSupplyChains_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Read(id uuid.UUID) (models.SupplyChain, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.SupplyChain
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.SupplyChain, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.SupplyChain); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.SupplyChain)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupplyChainRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type SupplyChainRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - id
func (_e *SupplyChainRepository_Expecter) Read(id interface{}) *SupplyChainRepository_Read_Call {
	return &SupplyChainRepository_Read_Call{Call: _e.mock.On("Read", id)}
}

func (_c *SupplyChainRepository_Read_Call) Run(run func(id uuid.UUID)) *SupplyChainRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *SupplyChainRepository_Read_Call) Return(supplyChain models.SupplyChain, err error) *SupplyChainRepository_Read_Call {
	_c.Call.Return(supplyChain, err)
	return _c
}

func (_c *SupplyChainRepository_Read_Call) RunAndReturn(run func(id uuid.UUID) (models.SupplyChain, error)) *SupplyChainRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Save(tx core.DB, t *models.SupplyChain) error {
	ret := _mock.Called(tx, t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, *models.SupplyChain) error); ok {
		r0 = returnFunc(tx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type SupplyChainRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - tx
//   - t
func (_e *SupplyChainRepository_Expecter) Save(tx interface{}, t interface{}) *SupplyChainRepository_Save_Call {
	return &SupplyChainRepository_Save_Call{Call: _e.mock.On("Save", tx, t)}
}

func (_c *SupplyChainRepository_Save_Call) Run(run func(tx core.DB, t *models.SupplyChain)) *SupplyChainRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(*models.SupplyChain))
	})
	return _c
}

func (_c *SupplyChainRepository_Save_Call) Return(err error) *SupplyChainRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Save_Call) RunAndReturn(run func(tx core.DB, t *models.SupplyChain) error) *SupplyChainRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) SaveBatch(tx core.DB, ts []models.SupplyChain) error {
	ret := _mock.Called(tx, ts)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, []models.SupplyChain) error); ok {
		r0 = returnFunc(tx, ts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type SupplyChainRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - tx
//   - ts
func (_e *SupplyChainRepository_Expecter) SaveBatch(tx interface{}, ts interface{}) *SupplyChainRepository_SaveBatch_Call {
	return &SupplyChainRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", tx, ts)}
}

func (_c *SupplyChainRepository_SaveBatch_Call) Run(run func(tx core.DB, ts []models.SupplyChain)) *SupplyChainRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].([]models.SupplyChain))
	})
	return _c
}

func (_c *SupplyChainRepository_SaveBatch_Call) Return(err error) *SupplyChainRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_SaveBatch_Call) RunAndReturn(run func(tx core.DB, ts []models.SupplyChain) error) *SupplyChainRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Transaction(fn func(tx core.DB) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(tx core.DB) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type SupplyChainRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn
func (_e *SupplyChainRepository_Expecter) Transaction(fn interface{}) *SupplyChainRepository_Transaction_Call {
	return &SupplyChainRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *SupplyChainRepository_Transaction_Call) Run(run func(fn func(tx core.DB) error)) *SupplyChainRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(tx core.DB) error))
	})
	return _c
}

func (_c *SupplyChainRepository_Transaction_Call) Return(err error) *SupplyChainRepository_Transaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Transaction_Call) RunAndReturn(run func(fn func(tx core.DB) error) error) *SupplyChainRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type SupplyChainRepository
func (_mock *SupplyChainRepository) Upsert(t *[]*models.SupplyChain, conflictingColumns *[]clause.Column) error {
	ret := _mock.Called(t, conflictingColumns)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*[]*models.SupplyChain, *[]clause.Column) error); ok {
		r0 = returnFunc(t, conflictingColumns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SupplyChainRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type SupplyChainRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - t
//   - conflictingColumns
func (_e *SupplyChainRepository_Expecter) Upsert(t interface{}, conflictingColumns interface{}) *SupplyChainRepository_Upsert_Call {
	return &SupplyChainRepository_Upsert_Call{Call: _e.mock.On("Upsert", t, conflictingColumns)}
}

func (_c *SupplyChainRepository_Upsert_Call) Run(run func(t *[]*models.SupplyChain, conflictingColumns *[]clause.Column)) *SupplyChainRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]*models.SupplyChain), args[1].(*[]clause.Column))
	})
	return _c
}

func (_c *SupplyChainRepository_Upsert_Call) Return(err error) *SupplyChainRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SupplyChainRepository_Upsert_Call) RunAndReturn(run func(t *[]*models.SupplyChain, conflictingColumns *[]clause.Column) error) *SupplyChainRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
