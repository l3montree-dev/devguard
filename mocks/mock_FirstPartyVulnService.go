// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/core"
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewFirstPartyVulnService creates a new instance of FirstPartyVulnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirstPartyVulnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirstPartyVulnService {
	mock := &FirstPartyVulnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FirstPartyVulnService is an autogenerated mock type for the FirstPartyVulnService type
type FirstPartyVulnService struct {
	mock.Mock
}

type FirstPartyVulnService_Expecter struct {
	mock *mock.Mock
}

func (_m *FirstPartyVulnService) EXPECT() *FirstPartyVulnService_Expecter {
	return &FirstPartyVulnService_Expecter{mock: &_m.Mock}
}

// SyncAllIssues provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) SyncAllIssues(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion) error {
	ret := _mock.Called(org, project, asset, assetVersion)

	if len(ret) == 0 {
		panic("no return value specified for SyncAllIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Org, models.Project, models.Asset, models.AssetVersion) error); ok {
		r0 = returnFunc(org, project, asset, assetVersion)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnService_SyncAllIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAllIssues'
type FirstPartyVulnService_SyncAllIssues_Call struct {
	*mock.Call
}

// SyncAllIssues is a helper method to define mock.On call
//   - org
//   - project
//   - asset
//   - assetVersion
func (_e *FirstPartyVulnService_Expecter) SyncAllIssues(org interface{}, project interface{}, asset interface{}, assetVersion interface{}) *FirstPartyVulnService_SyncAllIssues_Call {
	return &FirstPartyVulnService_SyncAllIssues_Call{Call: _e.mock.On("SyncAllIssues", org, project, asset, assetVersion)}
}

func (_c *FirstPartyVulnService_SyncAllIssues_Call) Run(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion)) *FirstPartyVulnService_SyncAllIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Org), args[1].(models.Project), args[2].(models.Asset), args[3].(models.AssetVersion))
	})
	return _c
}

func (_c *FirstPartyVulnService_SyncAllIssues_Call) Return(err error) *FirstPartyVulnService_SyncAllIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnService_SyncAllIssues_Call) RunAndReturn(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion) error) *FirstPartyVulnService_SyncAllIssues_Call {
	_c.Call.Return(run)
	return _c
}

// SyncIssues provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) SyncIssues(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.FirstPartyVuln) error {
	ret := _mock.Called(org, project, asset, assetVersion, vulnList)

	if len(ret) == 0 {
		panic("no return value specified for SyncIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Org, models.Project, models.Asset, models.AssetVersion, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(org, project, asset, assetVersion, vulnList)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnService_SyncIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncIssues'
type FirstPartyVulnService_SyncIssues_Call struct {
	*mock.Call
}

// SyncIssues is a helper method to define mock.On call
//   - org
//   - project
//   - asset
//   - assetVersion
//   - vulnList
func (_e *FirstPartyVulnService_Expecter) SyncIssues(org interface{}, project interface{}, asset interface{}, assetVersion interface{}, vulnList interface{}) *FirstPartyVulnService_SyncIssues_Call {
	return &FirstPartyVulnService_SyncIssues_Call{Call: _e.mock.On("SyncIssues", org, project, asset, assetVersion, vulnList)}
}

func (_c *FirstPartyVulnService_SyncIssues_Call) Run(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.FirstPartyVuln)) *FirstPartyVulnService_SyncIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Org), args[1].(models.Project), args[2].(models.Asset), args[3].(models.AssetVersion), args[4].([]models.FirstPartyVuln))
	})
	return _c
}

func (_c *FirstPartyVulnService_SyncIssues_Call) Return(err error) *FirstPartyVulnService_SyncIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnService_SyncIssues_Call) RunAndReturn(run func(org models.Org, project models.Project, asset models.Asset, assetVersion models.AssetVersion, vulnList []models.FirstPartyVuln) error) *FirstPartyVulnService_SyncIssues_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFirstPartyVulnState provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) UpdateFirstPartyVulnState(tx core.DB, userID string, firstPartyVuln *models.FirstPartyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType) (models.VulnEvent, error) {
	ret := _mock.Called(tx, userID, firstPartyVuln, statusType, justification, mechanicalJustification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFirstPartyVulnState")
	}

	var r0 models.VulnEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, *models.FirstPartyVuln, string, string, models.MechanicalJustificationType) (models.VulnEvent, error)); ok {
		return returnFunc(tx, userID, firstPartyVuln, statusType, justification, mechanicalJustification)
	}
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, *models.FirstPartyVuln, string, string, models.MechanicalJustificationType) models.VulnEvent); ok {
		r0 = returnFunc(tx, userID, firstPartyVuln, statusType, justification, mechanicalJustification)
	} else {
		r0 = ret.Get(0).(models.VulnEvent)
	}
	if returnFunc, ok := ret.Get(1).(func(core.DB, string, *models.FirstPartyVuln, string, string, models.MechanicalJustificationType) error); ok {
		r1 = returnFunc(tx, userID, firstPartyVuln, statusType, justification, mechanicalJustification)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FirstPartyVulnService_UpdateFirstPartyVulnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFirstPartyVulnState'
type FirstPartyVulnService_UpdateFirstPartyVulnState_Call struct {
	*mock.Call
}

// UpdateFirstPartyVulnState is a helper method to define mock.On call
//   - tx
//   - userID
//   - firstPartyVuln
//   - statusType
//   - justification
//   - mechanicalJustification
func (_e *FirstPartyVulnService_Expecter) UpdateFirstPartyVulnState(tx interface{}, userID interface{}, firstPartyVuln interface{}, statusType interface{}, justification interface{}, mechanicalJustification interface{}) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	return &FirstPartyVulnService_UpdateFirstPartyVulnState_Call{Call: _e.mock.On("UpdateFirstPartyVulnState", tx, userID, firstPartyVuln, statusType, justification, mechanicalJustification)}
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) Run(run func(tx core.DB, userID string, firstPartyVuln *models.FirstPartyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType)) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(*models.FirstPartyVuln), args[3].(string), args[4].(string), args[5].(models.MechanicalJustificationType))
	})
	return _c
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) Return(vulnEvent models.VulnEvent, err error) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Return(vulnEvent, err)
	return _c
}

func (_c *FirstPartyVulnService_UpdateFirstPartyVulnState_Call) RunAndReturn(run func(tx core.DB, userID string, firstPartyVuln *models.FirstPartyVuln, statusType string, justification string, mechanicalJustification models.MechanicalJustificationType) (models.VulnEvent, error)) *FirstPartyVulnService_UpdateFirstPartyVulnState_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedExistingFirstPartyVulnOnDifferentBranch provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) UserDetectedExistingFirstPartyVulnOnDifferentBranch(tx core.DB, scannerID string, firstPartyVulns []models.FirstPartyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset) error {
	ret := _mock.Called(tx, scannerID, firstPartyVulns, alreadyExistingEvents, assetVersion, asset)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedExistingFirstPartyVulnOnDifferentBranch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.FirstPartyVuln, [][]models.VulnEvent, models.AssetVersion, models.Asset) error); ok {
		r0 = returnFunc(tx, scannerID, firstPartyVulns, alreadyExistingEvents, assetVersion, asset)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedExistingFirstPartyVulnOnDifferentBranch'
type FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call struct {
	*mock.Call
}

// UserDetectedExistingFirstPartyVulnOnDifferentBranch is a helper method to define mock.On call
//   - tx
//   - scannerID
//   - firstPartyVulns
//   - alreadyExistingEvents
//   - assetVersion
//   - asset
func (_e *FirstPartyVulnService_Expecter) UserDetectedExistingFirstPartyVulnOnDifferentBranch(tx interface{}, scannerID interface{}, firstPartyVulns interface{}, alreadyExistingEvents interface{}, assetVersion interface{}, asset interface{}) *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call {
	return &FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call{Call: _e.mock.On("UserDetectedExistingFirstPartyVulnOnDifferentBranch", tx, scannerID, firstPartyVulns, alreadyExistingEvents, assetVersion, asset)}
}

func (_c *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call) Run(run func(tx core.DB, scannerID string, firstPartyVulns []models.FirstPartyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset)) *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].([]models.FirstPartyVuln), args[3].([][]models.VulnEvent), args[4].(models.AssetVersion), args[5].(models.Asset))
	})
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call) Return(err error) *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call) RunAndReturn(run func(tx core.DB, scannerID string, firstPartyVulns []models.FirstPartyVuln, alreadyExistingEvents [][]models.VulnEvent, assetVersion models.AssetVersion, asset models.Asset) error) *FirstPartyVulnService_UserDetectedExistingFirstPartyVulnOnDifferentBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserDetectedFirstPartyVulns provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) UserDetectedFirstPartyVulns(tx core.DB, userID string, scannerID string, firstPartyVulns []models.FirstPartyVuln) error {
	ret := _mock.Called(tx, userID, scannerID, firstPartyVulns)

	if len(ret) == 0 {
		panic("no return value specified for UserDetectedFirstPartyVulns")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, string, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, userID, scannerID, firstPartyVulns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnService_UserDetectedFirstPartyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDetectedFirstPartyVulns'
type FirstPartyVulnService_UserDetectedFirstPartyVulns_Call struct {
	*mock.Call
}

// UserDetectedFirstPartyVulns is a helper method to define mock.On call
//   - tx
//   - userID
//   - scannerID
//   - firstPartyVulns
func (_e *FirstPartyVulnService_Expecter) UserDetectedFirstPartyVulns(tx interface{}, userID interface{}, scannerID interface{}, firstPartyVulns interface{}) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	return &FirstPartyVulnService_UserDetectedFirstPartyVulns_Call{Call: _e.mock.On("UserDetectedFirstPartyVulns", tx, userID, scannerID, firstPartyVulns)}
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) Run(run func(tx core.DB, userID string, scannerID string, firstPartyVulns []models.FirstPartyVuln)) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].(string), args[3].([]models.FirstPartyVuln))
	})
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) Return(err error) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call) RunAndReturn(run func(tx core.DB, userID string, scannerID string, firstPartyVulns []models.FirstPartyVuln) error) *FirstPartyVulnService_UserDetectedFirstPartyVulns_Call {
	_c.Call.Return(run)
	return _c
}

// UserFixedFirstPartyVulns provides a mock function for the type FirstPartyVulnService
func (_mock *FirstPartyVulnService) UserFixedFirstPartyVulns(tx core.DB, userID string, firstPartyVulns []models.FirstPartyVuln) error {
	ret := _mock.Called(tx, userID, firstPartyVulns)

	if len(ret) == 0 {
		panic("no return value specified for UserFixedFirstPartyVulns")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(core.DB, string, []models.FirstPartyVuln) error); ok {
		r0 = returnFunc(tx, userID, firstPartyVulns)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FirstPartyVulnService_UserFixedFirstPartyVulns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFixedFirstPartyVulns'
type FirstPartyVulnService_UserFixedFirstPartyVulns_Call struct {
	*mock.Call
}

// UserFixedFirstPartyVulns is a helper method to define mock.On call
//   - tx
//   - userID
//   - firstPartyVulns
func (_e *FirstPartyVulnService_Expecter) UserFixedFirstPartyVulns(tx interface{}, userID interface{}, firstPartyVulns interface{}) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	return &FirstPartyVulnService_UserFixedFirstPartyVulns_Call{Call: _e.mock.On("UserFixedFirstPartyVulns", tx, userID, firstPartyVulns)}
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) Run(run func(tx core.DB, userID string, firstPartyVulns []models.FirstPartyVuln)) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.DB), args[1].(string), args[2].([]models.FirstPartyVuln))
	})
	return _c
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) Return(err error) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FirstPartyVulnService_UserFixedFirstPartyVulns_Call) RunAndReturn(run func(tx core.DB, userID string, firstPartyVulns []models.FirstPartyVuln) error) *FirstPartyVulnService_UserFixedFirstPartyVulns_Call {
	_c.Call.Return(run)
	return _c
}
