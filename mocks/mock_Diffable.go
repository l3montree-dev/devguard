// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/l3montree-dev/devguard/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// NewDiffable creates a new instance of Diffable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiffable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Diffable {
	mock := &Diffable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Diffable is an autogenerated mock type for the Diffable type
type Diffable struct {
	mock.Mock
}

type Diffable_Expecter struct {
	mock *mock.Mock
}

func (_m *Diffable) EXPECT() *Diffable_Expecter {
	return &Diffable_Expecter{mock: &_m.Mock}
}

// AssetVersionIndependentHash provides a mock function for the type Diffable
func (_mock *Diffable) AssetVersionIndependentHash() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AssetVersionIndependentHash")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Diffable_AssetVersionIndependentHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssetVersionIndependentHash'
type Diffable_AssetVersionIndependentHash_Call struct {
	*mock.Call
}

// AssetVersionIndependentHash is a helper method to define mock.On call
func (_e *Diffable_Expecter) AssetVersionIndependentHash() *Diffable_AssetVersionIndependentHash_Call {
	return &Diffable_AssetVersionIndependentHash_Call{Call: _e.mock.On("AssetVersionIndependentHash")}
}

func (_c *Diffable_AssetVersionIndependentHash_Call) Run(run func()) *Diffable_AssetVersionIndependentHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Diffable_AssetVersionIndependentHash_Call) Return(s string) *Diffable_AssetVersionIndependentHash_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Diffable_AssetVersionIndependentHash_Call) RunAndReturn(run func() string) *Diffable_AssetVersionIndependentHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetVersionName provides a mock function for the type Diffable
func (_mock *Diffable) GetAssetVersionName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAssetVersionName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Diffable_GetAssetVersionName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetVersionName'
type Diffable_GetAssetVersionName_Call struct {
	*mock.Call
}

// GetAssetVersionName is a helper method to define mock.On call
func (_e *Diffable_Expecter) GetAssetVersionName() *Diffable_GetAssetVersionName_Call {
	return &Diffable_GetAssetVersionName_Call{Call: _e.mock.On("GetAssetVersionName")}
}

func (_c *Diffable_GetAssetVersionName_Call) Run(run func()) *Diffable_GetAssetVersionName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Diffable_GetAssetVersionName_Call) Return(s string) *Diffable_GetAssetVersionName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Diffable_GetAssetVersionName_Call) RunAndReturn(run func() string) *Diffable_GetAssetVersionName_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function for the type Diffable
func (_mock *Diffable) GetEvents() []models.VulnEvent {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []models.VulnEvent
	if returnFunc, ok := ret.Get(0).(func() []models.VulnEvent); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.VulnEvent)
		}
	}
	return r0
}

// Diffable_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type Diffable_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
func (_e *Diffable_Expecter) GetEvents() *Diffable_GetEvents_Call {
	return &Diffable_GetEvents_Call{Call: _e.mock.On("GetEvents")}
}

func (_c *Diffable_GetEvents_Call) Run(run func()) *Diffable_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Diffable_GetEvents_Call) Return(vulnEvents []models.VulnEvent) *Diffable_GetEvents_Call {
	_c.Call.Return(vulnEvents)
	return _c
}

func (_c *Diffable_GetEvents_Call) RunAndReturn(run func() []models.VulnEvent) *Diffable_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}
