# DevSecOps Workflow Definition
# This workflow is triggered on every push to the repository
name: DevGuard-Workflow

on:
  workflow_dispatch:
  push:

permissions:
  contents: read
  actions: read
  security-events: write
  packages: write


jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5 - https://github.com/actions/checkout/releases/tag/v5.0.0
      with:
        submodules: recursive
    - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0 - https://github.com/actions/setup-go/releases/tag/v5.5.0
      with:
        go-version: '1.25'
        cache: false
    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0 - https://github.com/golangci/golangci-lint-action/releases/tag/v8.0.0
      with:
        args: --timeout=30m
        version: v2.1.6

  tests:
    name: tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5 - https://github.com/actions/checkout/releases/tag/v5.0.0
      with:
        submodules: recursive
    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0 - https://github.com/actions/setup-go/releases/tag/v5.5.0
      with:
        go-version: '1.25'

    - name: Run unittests
      run: go test $(go list ./... | grep -v "/mocks") -coverprofile=coverage.out && go tool cover -func=coverage.out
    - name: Archive code coverage results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2 - https://github.com/actions/upload-artifact/releases/tag/v4.6.2
      with:
        name: code-coverage
        path: coverage.out


  devguard:
    uses: l3montree-dev/devguard-action/.github/workflows/full.yml@main
    with:
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      fail-on-risk: high
      fail-on-cvss: high
      web-ui: https://main.devguard.org
      should-deploy:  ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      continue-on-open-code-risk: true
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}       
      build-args: "--context=. --dockerfile=Dockerfile --build-arg GITHUB_REF_NAME=$GITHUB_REF_NAME"       


  build-scanner-image:
    uses: l3montree-dev/devguard-action/.github/workflows/build-image.yml@main
    with:
      artifact-name: "scanner"
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      image-suffix: "scanner"
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}  
      build-args: "--context=. --dockerfile=Dockerfile.scanner"


  # Image scanning job to detect vulnerabilities in the built Docker image
  scanner-container-scanning:
    uses: l3montree-dev/devguard-action/.github/workflows/container-scanning.yml@main
    needs: 
    - build-scanner-image
    with:
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      artifact-name: "scanner"
      web-ui: https://main.devguard.org
      fail-on-cvss: high
      fail-on-risk: high
      image-suffix: "scanner"
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}
      
  deploy-scanner:
    needs: 
    - build-scanner-image
    - scanner-container-scanning
    - tests
    uses: l3montree-dev/devguard-action/.github/workflows/deploy.yml@main
    with:
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      image-suffix: "scanner"
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}     
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/troubleshooting-sast'

  
  sign-scanner:
    needs: 
    - build-scanner-image
    - scanner-container-scanning
    - tests
    uses: l3montree-dev/devguard-action/.github/workflows/sign.yml@main
    with:
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      artifact-name: "scanner"
      image-suffix: "scanner"
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

  attest-scanner:
    needs: 
    - build-scanner-image
    - scanner-container-scanning
    - tests
    uses: l3montree-dev/devguard-action/.github/workflows/attest.yml@main
    with:
      asset-name: l3montree-cybersecurity/projects/devguard/assets/devguard
      api-url: https://api.main.devguard.org
      artifact-name: "scanner"
      image-suffix: "scanner"
    secrets:
      devguard-token: ${{ secrets.DEVGUARD_TOKEN }}
