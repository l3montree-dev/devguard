apiVersion: v1
kind: ConfigMap
metadata:
  name: kratos-config
data:  
  {{- $publicUrl := (index .Values.web.ingress.hosts 0).host }}
  {{- $protocol := "http" }}
  {{- if .Values.web.ingress.tls }}
  {{- $protocol = "https" }}
  {{- end }}
  identity.schema.json: |
    {
        "$id": "https://schemas.ory.sh/presets/kratos/quickstart/email-password/identity.schema.json",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Person",
        "type": "object",
        "properties": {
            "traits": {
                "required": [
                    "email",
                    "name",
                    "confirmedTerms"
                ],
                "additionalProperties": false,
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "E-Mail",
                        "minLength": 3,
                        "ory.sh/kratos": {
                            "credentials": {
                                "password": {
                                    "identifier": true
                                },
                                "passkey": {
                                    "display_name": true
                                },
                                "webauthn": {
                                    "identifier": true
                                }
                            },
                            "verification": {
                                "via": "email"
                            },
                            "recovery": {
                                "via": "email"
                            }
                        }
                    },
                    "name": {
                        "type": "object",
                        "properties": {
                            "first": {
                                "title": "First Name",
                                "type": "string"
                            },
                            "last": {
                                "title": "Last Name",
                                "type": "string"
                            }
                        }
                    },
                    "confirmedTerms": {
                        "type": "boolean",
                        "title": "I agree to the terms of use ",
                        "description": "You must agree to the terms of use to use this service.",
                        "default": false,
                        "const": true
                    }
                }
            }
        }
    }
    
  kratos.yml: |
    serve: 
      public: 
        base_url: {{ $protocol }}://{{ $publicUrl }}/api/.ory/
        cors:
          enabled: true
    identity:
      default_schema_id: identity
      schemas:
      - id: identity
        url: file:///etc/config/identity.schema.json
    courier:
      smtp:
        from_address: {{ .Values.mail.fromAddress }}
        from_name: {{ .Values.mail.fromName }}
    selfservice:
      default_browser_return_url: {{ $protocol }}://{{ $publicUrl }}/
      allowed_return_urls: 
      - {{ $protocol }}://{{ $publicUrl }}/
      methods:
        oidc:
          enabled: {{ .Values.oidc.enabled }}
          config:
          {{- if .Values.oidc.enabled }}
            providers:
            {{- range .Values.oidc.providers }}
            - id: {{ .id }}
              provider: {{ .provider }}
              client_id: {{ .clientId }}
              client_secret: "will be overwritten with env variable"
              {{- if .issuerUrl }}
              issuer_url: {{ .issuerUrl | default "" | quote }}
              {{- end }}
              mapper_url: "base64://bG9jYWwgY2xhaW1zID0gewogIGVtYWlsX3ZlcmlmaWVkOiBmYWxzZSwKfSArIHN0ZC5leHRWYXIoJ2NsYWltcycpOwoKbG9jYWwgc3BsaXROYW1lKGZ1bGxOYW1lKSA9IAogIGxvY2FsIHBhcnRzID0gc3RkLnNwbGl0KGZ1bGxOYW1lLCAnICcpOwogIGlmIHN0ZC5sZW5ndGgocGFydHMpID4gMSB0aGVuCiAgICB7CiAgICAgIGZpcnN0OiBwYXJ0c1swXSwKICAgICAgbGFzdDogc3RkLmpvaW4oJyAnLCBwYXJ0c1sxOl0pCiAgICB9CiAgZWxzZQogICAgewogICAgICBmaXJzdDogZnVsbE5hbWUsCiAgICAgIGxhc3Q6ICcnCiAgICB9OwoKewogIGlkZW50aXR5OiB7CiAgICB0cmFpdHM6IHsKICAgICAgLy8gQWxsb3dpbmcgdW52ZXJpZmllZCBlbWFpbCBhZGRyZXNzZXMgZW5hYmxlcyBhY2NvdW50CiAgICAgIC8vIGVudW1lcmF0aW9uIGF0dGFja3MsIGVzcGVjaWFsbHkgaWYgdGhlIHZhbHVlIGlzIHVzZWQgZm9yCiAgICAgIC8vIGUuZy4gdmVyaWZpY2F0aW9uIG9yIGFzIGEgcGFzc3dvcmQgbG9naW4gaWRlbnRpZmllci4KICAgICAgLy8KICAgICAgLy8gVGhlcmVmb3JlIHdlIG9ubHkgcmV0dXJuIHRoZSBlbWFpbCBpZiBpdCAoYSkgZXhpc3RzIGFuZCAoYikgaXMgbWFya2VkIHZlcmlmaWVkCiAgICAgIC8vIGJ5IEdpdEh1Yi4KICAgICAgW2lmICdlbWFpbCcgaW4gY2xhaW1zICYmIGNsYWltcy5lbWFpbF92ZXJpZmllZCB0aGVuICdlbWFpbCcgZWxzZSBudWxsXTogY2xhaW1zLmVtYWlsLAogICAgICBuYW1lOiBzcGxpdE5hbWUoY2xhaW1zLm5hbWUpLAogICAgICBjb25maXJtZWRUZXJtczogdHJ1ZSwKICAgIH0sCiAgfSwKfQ=="
            {{- if .scope }}
              scope:
              {{- range .scope }}
              - {{ . }}
              {{- end }}
            {{- end }}
                
            {{- end }}
          {{- else }}
            providers: []
          {{- end }}
            
        webauthn:
          enabled: {{ .Values.webauthn.enabled }}
          config:
            # If set to true will use WebAuthn for passwordless flows intead of multi-factor authentication.
            passwordless: true
            rp:
              # This MUST be your root domain (not a subdomain)
              {{- $urlParts := splitList "." $publicUrl }}
              {{- if ge (len $urlParts) 2 }}
              id: {{ index $urlParts (sub (len $urlParts) 2) }}.{{ index $urlParts (sub (len $urlParts) 1) }}
              {{- else }}
              id: {{ $publicUrl }}
              {{- end }}
              # This MUST be the exact URL of the page which will prompt for WebAuthn!
              # Only the scheme (https / http), host (auth.example.org), and port (4455) are relevant. The
              # path is irrelevant.
              origins:
              - {{ $protocol }}://{{ $publicUrl }}
              # A display name which will be shown to the user on her/his device.
              display_name: DevGuard

        passkey:
          enabled: {{ .Values.passkey.enabled }}
          config:
            rp:
              {{- $urlParts := splitList "." $publicUrl }}
              {{- if ge (len $urlParts) 2 }}
              id: {{ index $urlParts (sub (len $urlParts) 2) }}.{{ index $urlParts (sub (len $urlParts) 1) }}
              {{- else }}
              id: {{ $publicUrl }}
              {{- end }}
              
              origins:
              - {{ $protocol }}://{{ $publicUrl }}
              display_name: DevGuard

        password:
          enabled: {{ .Values.password.enabled }}
        totp:
          config:
            issuer: devguard
          enabled: {{ .Values.totp.enabled }}
        lookup_secret:
          enabled: false
        link:
          enabled: false
        code:
          enabled: true
      flows:
        error:
          ui_url: {{ $protocol }}://{{ $publicUrl }}/error
        settings:
          ui_url: {{ $protocol }}://{{ $publicUrl }}/user-settings
          privileged_session_max_age: 15m
          required_aal: highest_available
        recovery:
          enabled: {{ .Values.verificationAfterSignUp.enabled }}
          ui_url: {{ $protocol }}://{{ $publicUrl }}/recovery
          use: code
        verification:
          enabled: {{ .Values.verificationAfterSignUp.enabled }}
          ui_url: {{ $protocol }}://{{ $publicUrl }}/verification
          use: code
          after:
            default_browser_return_url: {{ $protocol }}://{{ $publicUrl }}/
        logout:
          after:
            default_browser_return_url: {{ $protocol }}://{{ $publicUrl }}/login
        login:
          ui_url: {{ $protocol }}://{{ $publicUrl }}/login
          lifespan: 10m
        registration:
          lifespan: 10m
          ui_url: {{ $protocol }}://{{ $publicUrl }}/registration
          after:
              password:
                  hooks:
                      - hook: session
              oidc:
                  hooks:
                      - hook: session
              passkey:
                  hooks:
                      - hook: session
              webauthn:
                  hooks:
                      - hook: session
